
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE ASSIGN BOOLEAN BREAK CASE CLASS COMMA CONST DAPOSTROPHE DEF DIVIDE DO DOT ELSE ELSIF END EQUAL FALSE FOR GETS GLOBAL_VAR GREATEROREQUAL GREATERTHAN ID IF IN INSTANCE_VAR LBRACE LBRACKET LESSOREQUAL LESSTHAN LPAREN MINUS MOD NIL NONE NOT NOTEQUAL NUMBER OR P PLUS PRINT PUTS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING TIMES TRUE WHEN WHILEassign : INSTANCE_VAR ASSIGN value\n              | GLOBAL_VAR ASSIGN value\n              value : NUMBER\n            |  STRING\n            |  BOOLEANcode : aritmeticExpresion\n              | impression\n              | tupla\n              | assign\n              | conditions\n              | while_loopvalues : value\n              | value COMMA valuesaritmeticExpresion : value operator value operator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODarray : LBRACKET RBRACKETarray : LBRACKET values RBRACKETconector : AND\n                | ORoperComp : LESSTHAN\n                | GREATERTHANcondition : value operComp valueconditions : condition\n                  | condition conector conditionswhen : WHEN conditions codewhens : when\n             | whenscase : CASE whens ENDSfunction : DEF ID code ENDp_SfunctionINV : ID\n                      | ID LPAREN RPARENimpression : PRINT LPAREN values RPAREN\n                  | PRINT values\n                  | PUTS values \n\n                  | PUTS LPAREN values RPAREN \n\n                  | P LPAREN values RPAREN\n                  | P valueswhile_loop : WHILE condition DO code ENDtupla : LPAREN values RPAREN'
    
_lr_action_items = {'INSTANCE_VAR':([0,],[2,]),'GLOBAL_VAR':([0,],[3,]),'$end':([1,6,7,8,9,10,],[0,-1,-3,-4,-5,-2,]),'ASSIGN':([2,3,],[4,5,]),'NUMBER':([4,5,],[7,7,]),'STRING':([4,5,],[8,8,]),'BOOLEAN':([4,5,],[9,9,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assign':([0,],[1,]),'value':([4,5,],[6,10,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assign","S'",1,None,None,None),
  ('assign -> INSTANCE_VAR ASSIGN value','assign',3,'p_assign','analizador_sintactico.py',11),
  ('assign -> GLOBAL_VAR ASSIGN value','assign',3,'p_assign','analizador_sintactico.py',12),
  ('value -> NUMBER','value',1,'p_value','analizador_sintactico.py',16),
  ('value -> STRING','value',1,'p_value','analizador_sintactico.py',17),
  ('value -> BOOLEAN','value',1,'p_value','analizador_sintactico.py',18),
  ('code -> aritmeticExpresion','code',1,'p_code','analizador_sintactico.py',21),
  ('code -> impression','code',1,'p_code','analizador_sintactico.py',22),
  ('code -> tupla','code',1,'p_code','analizador_sintactico.py',23),
  ('code -> assign','code',1,'p_code','analizador_sintactico.py',24),
  ('code -> conditions','code',1,'p_code','analizador_sintactico.py',25),
  ('code -> while_loop','code',1,'p_code','analizador_sintactico.py',26),
  ('values -> value','values',1,'p_values','analizador_sintactico.py',30),
  ('values -> value COMMA values','values',3,'p_values','analizador_sintactico.py',31),
  ('aritmeticExpresion -> value operator value','aritmeticExpresion',3,'p_aritmeticExpresion','analizador_sintactico.py',36),
  ('operator -> PLUS','operator',1,'p_operator','analizador_sintactico.py',40),
  ('operator -> MINUS','operator',1,'p_operator','analizador_sintactico.py',41),
  ('operator -> TIMES','operator',1,'p_operator','analizador_sintactico.py',42),
  ('operator -> DIVIDE','operator',1,'p_operator','analizador_sintactico.py',43),
  ('operator -> MOD','operator',1,'p_operator','analizador_sintactico.py',44),
  ('array -> LBRACKET RBRACKET','array',2,'p_emptyarray','analizador_sintactico.py',47),
  ('array -> LBRACKET values RBRACKET','array',3,'p_array','analizador_sintactico.py',50),
  ('conector -> AND','conector',1,'p_conector','analizador_sintactico.py',55),
  ('conector -> OR','conector',1,'p_conector','analizador_sintactico.py',56),
  ('operComp -> LESSTHAN','operComp',1,'p_operComp','analizador_sintactico.py',59),
  ('operComp -> GREATERTHAN','operComp',1,'p_operComp','analizador_sintactico.py',60),
  ('condition -> value operComp value','condition',3,'p_condition','analizador_sintactico.py',63),
  ('conditions -> condition','conditions',1,'p_conditions','analizador_sintactico.py',66),
  ('conditions -> condition conector conditions','conditions',3,'p_conditions','analizador_sintactico.py',67),
  ('when -> WHEN conditions code','when',3,'p_when','analizador_sintactico.py',70),
  ('whens -> when','whens',1,'p_whens','analizador_sintactico.py',73),
  ('whens -> whens','whens',1,'p_whens','analizador_sintactico.py',74),
  ('case -> CASE whens END','case',3,'p_case','analizador_sintactico.py',77),
  ('Sfunction -> DEF ID code END','Sfunction',4,'p_Sfunction','analizador_sintactico.py',82),
  ('p_SfunctionINV -> ID','p_SfunctionINV',1,'p_SfunctionINV','analizador_sintactico.py',85),
  ('p_SfunctionINV -> ID LPAREN RPAREN','p_SfunctionINV',3,'p_SfunctionINV','analizador_sintactico.py',86),
  ('impression -> PRINT LPAREN values RPAREN','impression',4,'p_impression','analizador_sintactico.py',93),
  ('impression -> PRINT values','impression',2,'p_impression','analizador_sintactico.py',94),
  ('impression -> PUTS values','impression',2,'p_impression','analizador_sintactico.py',95),
  ('impression -> PUTS LPAREN values RPAREN','impression',4,'p_impression','analizador_sintactico.py',97),
  ('impression -> P LPAREN values RPAREN','impression',4,'p_impression','analizador_sintactico.py',99),
  ('impression -> P values','impression',2,'p_impression','analizador_sintactico.py',100),
  ('while_loop -> WHILE condition DO code END','while_loop',5,'p_while_loop','analizador_sintactico.py',107),
  ('tupla -> LPAREN values RPAREN','tupla',3,'p_tupla','analizador_sintactico.py',111),
]
