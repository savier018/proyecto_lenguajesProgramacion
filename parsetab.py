
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND APOSTROPHE ASSIGN BOOLEAN BREAK CASE CLASS COLON COMMA CONST DAPOSTROPHE DEF DIVIDE DO DOT ELSE ELSIF END EQUAL FALSE FOR GETS GLOBAL_VAR GREATEROREQUAL GREATERTHAN ID IF IN INSTANCE_VAR LBRACE LBRACKET LESSOREQUAL LESSTHAN LPAREN MINUS MOD NIL NONE NOT NOTEQUAL NUMBER OR P PLUS PRINT PUTS RBRACE RBRACKET RETURN RPAREN SEMICOLON STRING TIMES TRUE WHEN WHILEcodigo : assign\n              | impression\n              | tupla\n              | conditions\n              | while_loop\n              | case\n              | Sfunction\n              | array\n              | p_SfunctionINV\n              | p_function_one_parameter\n              | p_function_two_parameter\n              | aritmeticExpresion\n              | operator\n              | dataIn\n              | control_structures\n              | hashvalue : NUMBER\n             | STRING\n             | BOOLEAN\n             | INSTANCE_VAR\n             | GLOBAL_VAR\n             | IDvalues : value\n              | value COMMA valuesassign : INSTANCE_VAR ASSIGN value\n              | GLOBAL_VAR ASSIGN value\n              | ID ASSIGN value\n              | INSTANCE_VAR ASSIGN data_structure\n              | GLOBAL_VAR ASSIGN data_structure\n              | ID ASSIGN data_structurearitmeticExpresion : value operator value\n                          | aritmeticExpresion operator valueoperator : PLUS\n                | MINUS\n                | TIMES\n                | DIVIDE\n                | MODdata_structure : array\n                      | tupla\n                      | hasharray : LBRACKET RBRACKETarray : LBRACKET values RBRACKEThash : LBRACE RBRACEhash : LBRACE hash_contents RBRACEhash_contents : hash_pair\n                     | hash_contents COMMA hash_pairhash_pair : value COLON valueconditions : condition\n                  | condition conector conditionscondition : value operComp valueconector : AND\n                | ORoperComp : LESSTHAN\n                | GREATERTHAN\n                | GREATEROREQUAL\n                | LESSOREQUAL\n                | EQUAL\n                | NOTEQUALcontrol_structures : if_block\n                          | if_block elsif_blocks\n                          | if_block elsif_blocks else_block\n                          | if_block else_blockif_block : IF condition codigo ENDelsif_blocks : elsif_block\n                    | elsif_blocks elsif_blockelsif_block : ELSIF condition codigoelse_block : ELSE codigowhen : WHEN conditions codigowhens : when\n             | whenscase : CASE whens ENDSfunction : DEF ID codigo ENDp_SfunctionINV : ID\n                      | ID LPAREN RPARENp_function_one_parameter : DEF ID LPAREN ID RPAREN codigo ENDp_function_two_parameter : DEF ID LPAREN ID COMMA ID RPAREN codigo ENDimpression : PRINT LPAREN values RPAREN\n                  | PRINT values\n                  | PUTS values\n                  | PUTS LPAREN values RPAREN\n                  | P LPAREN values RPAREN\n                  | P values\n                  | PRINT\n                  | PUTS\n                  dataIn : ID ASSIGN GETS\n              | INSTANCE_VAR ASSIGN GETS\n              | GLOBAL_VAR ASSIGN GETS while_loop : WHILE condition DO codigo ENDtupla : LPAREN values RPAREN'
    
_lr_action_items = {'INSTANCE_VAR':([0,22,23,24,25,26,27,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,63,64,66,67,68,73,74,80,81,86,95,104,108,109,111,113,118,120,121,136,141,],[18,58,58,58,58,-48,58,58,-33,-34,-35,-36,-37,58,-17,-18,-19,58,58,58,58,58,-53,-54,-55,-56,-57,-58,58,58,58,-20,-21,-22,58,58,58,-51,-52,58,18,18,58,18,-50,58,-49,18,18,58,18,58,58,18,18,]),'GLOBAL_VAR':([0,22,23,24,25,26,27,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,63,64,66,67,68,73,74,80,81,86,95,104,108,109,111,113,118,120,121,136,141,],[20,59,59,59,59,-48,59,59,-33,-34,-35,-36,-37,59,-17,-18,-19,59,59,59,59,59,-53,-54,-55,-56,-57,-58,59,59,59,-20,-21,-22,59,59,59,-51,-52,59,20,20,59,20,-50,59,-49,20,20,59,20,59,59,20,20,]),'ID':([0,22,23,24,25,26,27,29,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,63,64,66,67,68,73,74,80,81,86,95,104,108,109,111,113,118,120,121,136,137,141,],[21,60,60,60,60,-48,60,74,60,-33,-34,-35,-36,-37,60,-17,-18,-19,60,60,60,60,60,-53,-54,-55,-56,-57,-58,60,60,60,-20,-21,-22,60,60,60,-51,-52,60,21,21,60,21,-50,60,-49,21,21,130,21,60,60,21,139,21,]),'PRINT':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[22,-48,-17,-18,-19,-20,-21,-22,22,22,22,-50,-49,22,22,22,22,22,]),'PUTS':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[24,-48,-17,-18,-19,-20,-21,-22,24,24,24,-50,-49,24,24,24,24,24,]),'P':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[25,-48,-17,-18,-19,-20,-21,-22,25,25,25,-50,-49,25,25,25,25,25,]),'LPAREN':([0,21,22,24,25,26,38,39,40,43,52,53,58,59,60,74,80,86,95,108,109,111,118,136,141,],[23,54,55,63,64,-48,-17,-18,-19,23,23,23,-20,-21,-22,113,23,23,-50,-49,23,23,23,23,23,]),'WHILE':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[27,-48,-17,-18,-19,-20,-21,-22,27,27,27,-50,-49,27,27,27,27,27,]),'CASE':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[28,-48,-17,-18,-19,-20,-21,-22,28,28,28,-50,-49,28,28,28,28,28,]),'DEF':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[29,-48,-17,-18,-19,-20,-21,-22,29,29,29,-50,-49,29,29,29,29,29,]),'LBRACKET':([0,26,38,39,40,43,52,53,58,59,60,74,80,86,95,108,109,111,118,136,141,],[30,-48,-17,-18,-19,30,30,30,-20,-21,-22,30,30,30,-50,-49,30,30,30,30,30,]),'PLUS':([0,13,18,19,20,21,26,38,39,40,58,59,60,74,80,86,87,94,95,108,109,111,118,136,141,],[31,31,-20,31,-21,-22,-48,-17,-18,-19,-20,-21,-22,31,31,31,-32,-31,-50,-49,31,31,31,31,31,]),'MINUS':([0,13,18,19,20,21,26,38,39,40,58,59,60,74,80,86,87,94,95,108,109,111,118,136,141,],[32,32,-20,32,-21,-22,-48,-17,-18,-19,-20,-21,-22,32,32,32,-32,-31,-50,-49,32,32,32,32,32,]),'TIMES':([0,13,18,19,20,21,26,38,39,40,58,59,60,74,80,86,87,94,95,108,109,111,118,136,141,],[33,33,-20,33,-21,-22,-48,-17,-18,-19,-20,-21,-22,33,33,33,-32,-31,-50,-49,33,33,33,33,33,]),'DIVIDE':([0,13,18,19,20,21,26,38,39,40,58,59,60,74,80,86,87,94,95,108,109,111,118,136,141,],[34,34,-20,34,-21,-22,-48,-17,-18,-19,-20,-21,-22,34,34,34,-32,-31,-50,-49,34,34,34,34,34,]),'MOD':([0,13,18,19,20,21,26,38,39,40,58,59,60,74,80,86,87,94,95,108,109,111,118,136,141,],[35,35,-20,35,-21,-22,-48,-17,-18,-19,-20,-21,-22,35,35,35,-32,-31,-50,-49,35,35,35,35,35,]),'LBRACE':([0,26,38,39,40,43,52,53,58,59,60,74,80,86,95,108,109,111,118,136,141,],[37,-48,-17,-18,-19,37,37,37,-20,-21,-22,37,37,37,-50,-49,37,37,37,37,37,]),'NUMBER':([0,22,23,24,25,26,27,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,63,64,66,67,68,73,74,80,81,86,95,104,108,109,111,113,118,120,121,136,141,],[38,38,38,38,38,-48,38,38,-33,-34,-35,-36,-37,38,-17,-18,-19,38,38,38,38,38,-53,-54,-55,-56,-57,-58,38,38,38,-20,-21,-22,38,38,38,-51,-52,38,38,38,38,38,-50,38,-49,38,38,38,38,38,38,38,38,]),'STRING':([0,22,23,24,25,26,27,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,63,64,66,67,68,73,74,80,81,86,95,104,108,109,111,113,118,120,121,136,141,],[39,39,39,39,39,-48,39,39,-33,-34,-35,-36,-37,39,-17,-18,-19,39,39,39,39,39,-53,-54,-55,-56,-57,-58,39,39,39,-20,-21,-22,39,39,39,-51,-52,39,39,39,39,39,-50,39,-49,39,39,39,39,39,39,39,39,]),'BOOLEAN':([0,22,23,24,25,26,27,30,31,32,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,55,58,59,60,63,64,66,67,68,73,74,80,81,86,95,104,108,109,111,113,118,120,121,136,141,],[40,40,40,40,40,-48,40,40,-33,-34,-35,-36,-37,40,-17,-18,-19,40,40,40,40,40,-53,-54,-55,-56,-57,-58,40,40,40,-20,-21,-22,40,40,40,-51,-52,40,40,40,40,40,-50,40,-49,40,40,40,40,40,40,40,40,]),'IF':([0,26,38,39,40,58,59,60,74,80,86,95,108,109,111,118,136,141,],[41,-48,-17,-18,-19,-20,-21,-22,41,41,41,-50,-49,41,41,41,41,41,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,24,26,31,32,33,34,35,36,38,39,40,56,57,58,59,60,62,65,75,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,108,110,114,115,116,117,119,123,124,125,126,129,131,134,135,140,143,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-73,-83,-84,-48,-33,-34,-35,-36,-37,-59,-17,-18,-19,-78,-23,-20,-21,-22,-79,-82,-41,-60,-62,-64,-43,-32,-25,-28,-86,-38,-39,-40,-31,-50,-26,-29,-87,-27,-30,-85,-74,-89,-49,-71,-42,-61,-65,-67,-44,-77,-24,-80,-81,-72,-66,-63,-88,-75,-76,]),'END':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,24,26,31,32,33,34,35,36,38,39,40,56,57,58,59,60,62,65,71,72,75,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,108,110,112,114,115,116,117,119,122,123,124,125,126,127,128,129,131,134,135,138,140,142,143,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-73,-83,-84,-48,-33,-34,-35,-36,-37,-59,-17,-18,-19,-78,-23,-20,-21,-22,-79,-82,110,-69,-41,-60,-62,-64,-43,-32,-25,-28,-86,-38,-39,-40,-31,-50,-26,-29,-87,-27,-30,-85,-74,-89,-49,-71,129,-42,-61,-65,-67,-44,134,-77,-24,-80,-81,135,-68,-72,-66,-63,-88,140,-75,143,-76,]),'ELSE':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,24,26,31,32,33,34,35,36,38,39,40,56,57,58,59,60,62,65,75,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,108,110,114,115,116,117,119,123,124,125,126,129,131,134,135,140,143,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-73,-83,-84,-48,-33,-34,-35,-36,-37,80,-17,-18,-19,-78,-23,-20,-21,-22,-79,-82,-41,80,-62,-64,-43,-32,-25,-28,-86,-38,-39,-40,-31,-50,-26,-29,-87,-27,-30,-85,-74,-89,-49,-71,-42,-61,-65,-67,-44,-77,-24,-80,-81,-72,-66,-63,-88,-75,-76,]),'ELSIF':([2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,21,22,24,26,31,32,33,34,35,36,38,39,40,56,57,58,59,60,62,65,75,77,78,79,82,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,105,108,110,114,115,116,117,119,123,124,125,126,129,131,134,135,140,143,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-73,-83,-84,-48,-33,-34,-35,-36,-37,81,-17,-18,-19,-78,-23,-20,-21,-22,-79,-82,-41,81,-62,-64,-43,-32,-25,-28,-86,-38,-39,-40,-31,-50,-26,-29,-87,-27,-30,-85,-74,-89,-49,-71,-42,-61,-65,-67,-44,-77,-24,-80,-81,-72,-66,-63,-88,-75,-76,]),'ASSIGN':([18,20,21,],[43,52,53,]),'LESSTHAN':([18,19,20,21,38,39,40,58,59,60,70,],[-20,46,-21,-22,-17,-18,-19,-20,-21,-22,46,]),'GREATERTHAN':([18,19,20,21,38,39,40,58,59,60,70,],[-20,47,-21,-22,-17,-18,-19,-20,-21,-22,47,]),'GREATEROREQUAL':([18,19,20,21,38,39,40,58,59,60,70,],[-20,48,-21,-22,-17,-18,-19,-20,-21,-22,48,]),'LESSOREQUAL':([18,19,20,21,38,39,40,58,59,60,70,],[-20,49,-21,-22,-17,-18,-19,-20,-21,-22,49,]),'EQUAL':([18,19,20,21,38,39,40,58,59,60,70,],[-20,50,-21,-22,-17,-18,-19,-20,-21,-22,50,]),'NOTEQUAL':([18,19,20,21,38,39,40,58,59,60,70,],[-20,51,-21,-22,-17,-18,-19,-20,-21,-22,51,]),'AND':([26,38,39,40,58,59,60,95,],[67,-17,-18,-19,-20,-21,-22,-50,]),'OR':([26,38,39,40,58,59,60,95,],[68,-17,-18,-19,-20,-21,-22,-50,]),'WHEN':([28,],[73,]),'RBRACKET':([30,38,39,40,57,58,59,60,76,124,],[75,-17,-18,-19,-23,-20,-21,-22,114,-24,]),'RBRACE':([37,38,39,40,58,59,60,83,84,132,133,],[82,-17,-18,-19,-20,-21,-22,119,-45,-46,-47,]),'COMMA':([38,39,40,57,58,59,60,83,84,130,132,133,],[-17,-18,-19,104,-20,-21,-22,120,-45,137,-46,-47,]),'RPAREN':([38,39,40,54,57,58,59,60,61,103,106,107,124,130,139,],[-17,-18,-19,102,-23,-20,-21,-22,105,123,125,126,-24,136,141,]),'COLON':([38,39,40,58,59,60,85,],[-17,-18,-19,-20,-21,-22,121,]),'DO':([38,39,40,58,59,60,69,95,],[-17,-18,-19,-20,-21,-22,109,-50,]),'GETS':([43,52,53,],[90,98,101,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'codigo':([0,74,80,86,109,111,118,136,141,],[1,112,117,122,127,128,131,138,142,]),'assign':([0,74,80,86,109,111,118,136,141,],[2,2,2,2,2,2,2,2,2,]),'impression':([0,74,80,86,109,111,118,136,141,],[3,3,3,3,3,3,3,3,3,]),'tupla':([0,43,52,53,74,80,86,109,111,118,136,141,],[4,92,92,92,4,4,4,4,4,4,4,4,]),'conditions':([0,66,73,74,80,86,109,111,118,136,141,],[5,108,111,5,5,5,5,5,5,5,5,]),'while_loop':([0,74,80,86,109,111,118,136,141,],[6,6,6,6,6,6,6,6,6,]),'case':([0,74,80,86,109,111,118,136,141,],[7,7,7,7,7,7,7,7,7,]),'Sfunction':([0,74,80,86,109,111,118,136,141,],[8,8,8,8,8,8,8,8,8,]),'array':([0,43,52,53,74,80,86,109,111,118,136,141,],[9,91,91,91,9,9,9,9,9,9,9,9,]),'p_SfunctionINV':([0,74,80,86,109,111,118,136,141,],[10,10,10,10,10,10,10,10,10,]),'p_function_one_parameter':([0,74,80,86,109,111,118,136,141,],[11,11,11,11,11,11,11,11,11,]),'p_function_two_parameter':([0,74,80,86,109,111,118,136,141,],[12,12,12,12,12,12,12,12,12,]),'aritmeticExpresion':([0,74,80,86,109,111,118,136,141,],[13,13,13,13,13,13,13,13,13,]),'operator':([0,13,19,74,80,86,109,111,118,136,141,],[14,42,44,14,14,14,14,14,14,14,14,]),'dataIn':([0,74,80,86,109,111,118,136,141,],[15,15,15,15,15,15,15,15,15,]),'control_structures':([0,74,80,86,109,111,118,136,141,],[16,16,16,16,16,16,16,16,16,]),'hash':([0,43,52,53,74,80,86,109,111,118,136,141,],[17,93,93,93,17,17,17,17,17,17,17,17,]),'value':([0,22,23,24,25,27,30,37,41,42,43,44,45,52,53,55,63,64,66,73,74,80,81,86,104,109,111,113,118,120,121,136,141,],[19,57,57,57,57,70,57,85,70,87,88,94,95,96,99,57,57,57,70,70,19,19,70,19,57,19,19,57,19,85,133,19,19,]),'condition':([0,27,41,66,73,74,80,81,86,109,111,118,136,141,],[26,69,86,26,26,26,26,118,26,26,26,26,26,26,]),'if_block':([0,74,80,86,109,111,118,136,141,],[36,36,36,36,36,36,36,36,36,]),'operComp':([19,70,],[45,45,]),'values':([22,23,24,25,30,55,63,64,104,113,],[56,61,62,65,76,103,106,107,124,61,]),'conector':([26,],[66,]),'whens':([28,],[71,]),'when':([28,],[72,]),'elsif_blocks':([36,],[77,]),'else_block':([36,77,],[78,115,]),'elsif_block':([36,77,],[79,116,]),'hash_contents':([37,],[83,]),'hash_pair':([37,120,],[84,132,]),'data_structure':([43,52,53,],[89,97,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> codigo","S'",1,None,None,None),
  ('codigo -> assign','codigo',1,'p_codigo','analizador_sintactico.py',7),
  ('codigo -> impression','codigo',1,'p_codigo','analizador_sintactico.py',8),
  ('codigo -> tupla','codigo',1,'p_codigo','analizador_sintactico.py',9),
  ('codigo -> conditions','codigo',1,'p_codigo','analizador_sintactico.py',10),
  ('codigo -> while_loop','codigo',1,'p_codigo','analizador_sintactico.py',11),
  ('codigo -> case','codigo',1,'p_codigo','analizador_sintactico.py',12),
  ('codigo -> Sfunction','codigo',1,'p_codigo','analizador_sintactico.py',13),
  ('codigo -> array','codigo',1,'p_codigo','analizador_sintactico.py',14),
  ('codigo -> p_SfunctionINV','codigo',1,'p_codigo','analizador_sintactico.py',15),
  ('codigo -> p_function_one_parameter','codigo',1,'p_codigo','analizador_sintactico.py',16),
  ('codigo -> p_function_two_parameter','codigo',1,'p_codigo','analizador_sintactico.py',17),
  ('codigo -> aritmeticExpresion','codigo',1,'p_codigo','analizador_sintactico.py',18),
  ('codigo -> operator','codigo',1,'p_codigo','analizador_sintactico.py',19),
  ('codigo -> dataIn','codigo',1,'p_codigo','analizador_sintactico.py',20),
  ('codigo -> control_structures','codigo',1,'p_codigo','analizador_sintactico.py',21),
  ('codigo -> hash','codigo',1,'p_codigo','analizador_sintactico.py',22),
  ('value -> NUMBER','value',1,'p_value','analizador_sintactico.py',25),
  ('value -> STRING','value',1,'p_value','analizador_sintactico.py',26),
  ('value -> BOOLEAN','value',1,'p_value','analizador_sintactico.py',27),
  ('value -> INSTANCE_VAR','value',1,'p_value','analizador_sintactico.py',28),
  ('value -> GLOBAL_VAR','value',1,'p_value','analizador_sintactico.py',29),
  ('value -> ID','value',1,'p_value','analizador_sintactico.py',30),
  ('values -> value','values',1,'p_values','analizador_sintactico.py',33),
  ('values -> value COMMA values','values',3,'p_values','analizador_sintactico.py',34),
  ('assign -> INSTANCE_VAR ASSIGN value','assign',3,'p_assign','analizador_sintactico.py',44),
  ('assign -> GLOBAL_VAR ASSIGN value','assign',3,'p_assign','analizador_sintactico.py',45),
  ('assign -> ID ASSIGN value','assign',3,'p_assign','analizador_sintactico.py',46),
  ('assign -> INSTANCE_VAR ASSIGN data_structure','assign',3,'p_assign','analizador_sintactico.py',47),
  ('assign -> GLOBAL_VAR ASSIGN data_structure','assign',3,'p_assign','analizador_sintactico.py',48),
  ('assign -> ID ASSIGN data_structure','assign',3,'p_assign','analizador_sintactico.py',49),
  ('aritmeticExpresion -> value operator value','aritmeticExpresion',3,'p_aritmeticExpresion','analizador_sintactico.py',54),
  ('aritmeticExpresion -> aritmeticExpresion operator value','aritmeticExpresion',3,'p_aritmeticExpresion','analizador_sintactico.py',55),
  ('operator -> PLUS','operator',1,'p_operator','analizador_sintactico.py',58),
  ('operator -> MINUS','operator',1,'p_operator','analizador_sintactico.py',59),
  ('operator -> TIMES','operator',1,'p_operator','analizador_sintactico.py',60),
  ('operator -> DIVIDE','operator',1,'p_operator','analizador_sintactico.py',61),
  ('operator -> MOD','operator',1,'p_operator','analizador_sintactico.py',62),
  ('data_structure -> array','data_structure',1,'p_data_structure','analizador_sintactico.py',67),
  ('data_structure -> tupla','data_structure',1,'p_data_structure','analizador_sintactico.py',68),
  ('data_structure -> hash','data_structure',1,'p_data_structure','analizador_sintactico.py',69),
  ('array -> LBRACKET RBRACKET','array',2,'p_emptyarray','analizador_sintactico.py',74),
  ('array -> LBRACKET values RBRACKET','array',3,'p_array','analizador_sintactico.py',77),
  ('hash -> LBRACE RBRACE','hash',2,'p_empty_hash','analizador_sintactico.py',82),
  ('hash -> LBRACE hash_contents RBRACE','hash',3,'p_hash','analizador_sintactico.py',85),
  ('hash_contents -> hash_pair','hash_contents',1,'p_hash_contents','analizador_sintactico.py',88),
  ('hash_contents -> hash_contents COMMA hash_pair','hash_contents',3,'p_hash_contents','analizador_sintactico.py',89),
  ('hash_pair -> value COLON value','hash_pair',3,'p_hash_pair','analizador_sintactico.py',92),
  ('conditions -> condition','conditions',1,'p_conditions','analizador_sintactico.py',97),
  ('conditions -> condition conector conditions','conditions',3,'p_conditions','analizador_sintactico.py',98),
  ('condition -> value operComp value','condition',3,'p_condition','analizador_sintactico.py',101),
  ('conector -> AND','conector',1,'p_conector','analizador_sintactico.py',104),
  ('conector -> OR','conector',1,'p_conector','analizador_sintactico.py',105),
  ('operComp -> LESSTHAN','operComp',1,'p_operComp','analizador_sintactico.py',108),
  ('operComp -> GREATERTHAN','operComp',1,'p_operComp','analizador_sintactico.py',109),
  ('operComp -> GREATEROREQUAL','operComp',1,'p_operComp','analizador_sintactico.py',110),
  ('operComp -> LESSOREQUAL','operComp',1,'p_operComp','analizador_sintactico.py',111),
  ('operComp -> EQUAL','operComp',1,'p_operComp','analizador_sintactico.py',112),
  ('operComp -> NOTEQUAL','operComp',1,'p_operComp','analizador_sintactico.py',113),
  ('control_structures -> if_block','control_structures',1,'p_control_structures','analizador_sintactico.py',118),
  ('control_structures -> if_block elsif_blocks','control_structures',2,'p_control_structures','analizador_sintactico.py',119),
  ('control_structures -> if_block elsif_blocks else_block','control_structures',3,'p_control_structures','analizador_sintactico.py',120),
  ('control_structures -> if_block else_block','control_structures',2,'p_control_structures','analizador_sintactico.py',121),
  ('if_block -> IF condition codigo END','if_block',4,'p_if_block','analizador_sintactico.py',124),
  ('elsif_blocks -> elsif_block','elsif_blocks',1,'p_elsif_blocks','analizador_sintactico.py',127),
  ('elsif_blocks -> elsif_blocks elsif_block','elsif_blocks',2,'p_elsif_blocks','analizador_sintactico.py',128),
  ('elsif_block -> ELSIF condition codigo','elsif_block',3,'p_elsif_block','analizador_sintactico.py',131),
  ('else_block -> ELSE codigo','else_block',2,'p_else_block','analizador_sintactico.py',134),
  ('when -> WHEN conditions codigo','when',3,'p_when','analizador_sintactico.py',138),
  ('whens -> when','whens',1,'p_whens','analizador_sintactico.py',141),
  ('whens -> whens','whens',1,'p_whens','analizador_sintactico.py',142),
  ('case -> CASE whens END','case',3,'p_case','analizador_sintactico.py',145),
  ('Sfunction -> DEF ID codigo END','Sfunction',4,'p_Sfunction','analizador_sintactico.py',150),
  ('p_SfunctionINV -> ID','p_SfunctionINV',1,'p_SfunctionINV','analizador_sintactico.py',153),
  ('p_SfunctionINV -> ID LPAREN RPAREN','p_SfunctionINV',3,'p_SfunctionINV','analizador_sintactico.py',154),
  ('p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END','p_function_one_parameter',7,'p_function_one_parameter','analizador_sintactico.py',159),
  ('p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END','p_function_two_parameter',9,'p_function_two_parameter','analizador_sintactico.py',162),
  ('impression -> PRINT LPAREN values RPAREN','impression',4,'p_impression','analizador_sintactico.py',169),
  ('impression -> PRINT values','impression',2,'p_impression','analizador_sintactico.py',170),
  ('impression -> PUTS values','impression',2,'p_impression','analizador_sintactico.py',171),
  ('impression -> PUTS LPAREN values RPAREN','impression',4,'p_impression','analizador_sintactico.py',172),
  ('impression -> P LPAREN values RPAREN','impression',4,'p_impression','analizador_sintactico.py',173),
  ('impression -> P values','impression',2,'p_impression','analizador_sintactico.py',174),
  ('impression -> PRINT','impression',1,'p_impression','analizador_sintactico.py',175),
  ('impression -> PUTS','impression',1,'p_impression','analizador_sintactico.py',176),
  ('dataIn -> ID ASSIGN GETS','dataIn',3,'p_dataIn','analizador_sintactico.py',181),
  ('dataIn -> INSTANCE_VAR ASSIGN GETS','dataIn',3,'p_dataIn','analizador_sintactico.py',182),
  ('dataIn -> GLOBAL_VAR ASSIGN GETS','dataIn',3,'p_dataIn','analizador_sintactico.py',183),
  ('while_loop -> WHILE condition DO codigo END','while_loop',5,'p_while_loop','analizador_sintactico.py',187),
  ('tupla -> LPAREN values RPAREN','tupla',3,'p_tupla','analizador_sintactico.py',191),
]
