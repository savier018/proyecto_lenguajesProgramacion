Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    BREAK
    CLASS
    CONST
    DAPOSTROPHE
    DOT
    ELSE
    ELSIF
    EQUAL
    FALSE
    FOR
    GREATEROREQUAL
    IF
    IN
    LBRACE
    LESSOREQUAL
    NIL
    NONE
    NOT
    NOTEQUAL
    RBRACE
    RETURN
    SEMICOLON
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement statement_list
Rule 4     statement -> assign
Rule 5     statement -> impression
Rule 6     statement -> tupla
Rule 7     statement -> conditions
Rule 8     statement -> while_loop
Rule 9     statement -> case
Rule 10    statement -> Sfunction
Rule 11    statement -> array
Rule 12    statement -> p_SfunctionINV
Rule 13    statement -> aritmeticExpresion
Rule 14    statement -> operator
Rule 15    statement -> dataIn
Rule 16    assign -> INSTANCE_VAR ASSIGN value
Rule 17    assign -> GLOBAL_VAR ASSIGN value
Rule 18    assign -> VARIABLE ASSIGN value
Rule 19    assign -> VARIABLE ASSIGN data_structure
Rule 20    assign -> INSTANCE_VAR ASSIGN data_structure
Rule 21    assign -> GLOBAL_VAR ASSIGN data_structure
Rule 22    VARIABLE -> ID
Rule 23    value -> NUMBER
Rule 24    value -> STRING
Rule 25    value -> BOOLEAN
Rule 26    value -> aritmeticExpresion
Rule 27    value -> conditions
Rule 28    values -> value
Rule 29    values -> value COMMA values
Rule 30    aritmeticExpresion -> value operator value
Rule 31    aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN
Rule 32    operator -> PLUS
Rule 33    operator -> MINUS
Rule 34    operator -> TIMES
Rule 35    operator -> DIVIDE
Rule 36    operator -> MOD
Rule 37    array -> LBRACKET RBRACKET
Rule 38    array -> LBRACKET values RBRACKET
Rule 39    data_structure -> array
Rule 40    data_structure -> tupla
Rule 41    conector -> AND
Rule 42    conector -> OR
Rule 43    operComp -> LESSTHAN
Rule 44    operComp -> GREATERTHAN
Rule 45    condition -> value operComp value
Rule 46    conditions -> condition
Rule 47    conditions -> condition conector conditions
Rule 48    when -> WHEN conditions statement_list
Rule 49    whens -> when
Rule 50    whens -> whens
Rule 51    case -> CASE whens END
Rule 52    Sfunction -> DEF ID statement_list END
Rule 53    p_SfunctionINV -> ID
Rule 54    p_SfunctionINV -> ID LPAREN RPAREN
Rule 55    impression -> PRINT LPAREN values RPAREN
Rule 56    impression -> PRINT values
Rule 57    impression -> PUTS values
Rule 58    impression -> PUTS LPAREN values RPAREN
Rule 59    impression -> P LPAREN values RPAREN
Rule 60    impression -> P values
Rule 61    impression -> PRINT
Rule 62    impression -> PUTS
Rule 63    dataIn -> VARIABLE ASSIGN GETS
Rule 64    dataIn -> INSTANCE_VAR ASSIGN GETS
Rule 65    dataIn -> GLOBAL_VAR ASSIGN GETS
Rule 66    while_loop -> WHILE condition DO statement_list END
Rule 67    tupla -> LPAREN values RPAREN
Rule 68    tupla -> LPAREN RPAREN

Terminals, with rules where they appear

AND                  : 41
APOSTROPHE           : 
ASSIGN               : 16 17 18 19 20 21 63 64 65
BOOLEAN              : 25
BREAK                : 
CASE                 : 51
CLASS                : 
COMMA                : 29
CONST                : 
DAPOSTROPHE          : 
DEF                  : 52
DIVIDE               : 35
DO                   : 66
DOT                  : 
ELSE                 : 
ELSIF                : 
END                  : 51 52 66
EQUAL                : 
FALSE                : 
FOR                  : 
GETS                 : 63 64 65
GLOBAL_VAR           : 17 21 65
GREATEROREQUAL       : 
GREATERTHAN          : 44
ID                   : 22 52 53 54
IF                   : 
IN                   : 
INSTANCE_VAR         : 16 20 64
LBRACE               : 
LBRACKET             : 37 38
LESSOREQUAL          : 
LESSTHAN             : 43
LPAREN               : 31 54 55 58 59 67 68
MINUS                : 33
MOD                  : 36
NIL                  : 
NONE                 : 
NOT                  : 
NOTEQUAL             : 
NUMBER               : 23
OR                   : 42
P                    : 59 60
PLUS                 : 32
PRINT                : 55 56 61
PUTS                 : 57 58 62
RBRACE               : 
RBRACKET             : 37 38
RETURN               : 
RPAREN               : 31 54 55 58 59 67 68
SEMICOLON            : 
STRING               : 24
TIMES                : 34
TRUE                 : 
WHEN                 : 48
WHILE                : 66
error                : 

Nonterminals, with rules where they appear

Sfunction            : 10
VARIABLE             : 18 19 63
aritmeticExpresion   : 13 26 31
array                : 11 39
assign               : 4
case                 : 9
condition            : 46 47 66
conditions           : 7 27 47 48
conector             : 47
dataIn               : 15
data_structure       : 19 20 21
impression           : 5
operComp             : 45
operator             : 14 30
p_SfunctionINV       : 12
program              : 0
statement            : 2 3
statement_list       : 1 3 48 52 66
tupla                : 6 40
value                : 16 17 18 28 29 30 30 45 45
values               : 29 38 55 56 57 58 59 60 67
when                 : 49
whens                : 50 51
while_loop           : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement statement_list
    (4) statement -> . assign
    (5) statement -> . impression
    (6) statement -> . tupla
    (7) statement -> . conditions
    (8) statement -> . while_loop
    (9) statement -> . case
    (10) statement -> . Sfunction
    (11) statement -> . array
    (12) statement -> . p_SfunctionINV
    (13) statement -> . aritmeticExpresion
    (14) statement -> . operator
    (15) statement -> . dataIn
    (16) assign -> . INSTANCE_VAR ASSIGN value
    (17) assign -> . GLOBAL_VAR ASSIGN value
    (18) assign -> . VARIABLE ASSIGN value
    (19) assign -> . VARIABLE ASSIGN data_structure
    (20) assign -> . INSTANCE_VAR ASSIGN data_structure
    (21) assign -> . GLOBAL_VAR ASSIGN data_structure
    (55) impression -> . PRINT LPAREN values RPAREN
    (56) impression -> . PRINT values
    (57) impression -> . PUTS values
    (58) impression -> . PUTS LPAREN values RPAREN
    (59) impression -> . P LPAREN values RPAREN
    (60) impression -> . P values
    (61) impression -> . PRINT
    (62) impression -> . PUTS
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (66) while_loop -> . WHILE condition DO statement_list END
    (51) case -> . CASE whens END
    (52) Sfunction -> . DEF ID statement_list END
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (53) p_SfunctionINV -> . ID
    (54) p_SfunctionINV -> . ID LPAREN RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (63) dataIn -> . VARIABLE ASSIGN GETS
    (64) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (65) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (22) VARIABLE -> . ID
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions

    INSTANCE_VAR    shift and go to state 16
    GLOBAL_VAR      shift and go to state 18
    PRINT           shift and go to state 20
    PUTS            shift and go to state 22
    P               shift and go to state 23
    LPAREN          shift and go to state 21
    WHILE           shift and go to state 25
    CASE            shift and go to state 26
    DEF             shift and go to state 27
    LBRACKET        shift and go to state 29
    ID              shift and go to state 28
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    assign                         shift and go to state 4
    impression                     shift and go to state 5
    tupla                          shift and go to state 6
    conditions                     shift and go to state 7
    while_loop                     shift and go to state 8
    case                           shift and go to state 9
    Sfunction                      shift and go to state 10
    array                          shift and go to state 11
    p_SfunctionINV                 shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    value                          shift and go to state 17
    VARIABLE                       shift and go to state 19
    condition                      shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .

    $end            reduce using rule 1 (program -> statement_list .)


state 3

    (2) statement_list -> statement .
    (3) statement_list -> statement . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement statement_list
    (4) statement -> . assign
    (5) statement -> . impression
    (6) statement -> . tupla
    (7) statement -> . conditions
    (8) statement -> . while_loop
    (9) statement -> . case
    (10) statement -> . Sfunction
    (11) statement -> . array
    (12) statement -> . p_SfunctionINV
    (13) statement -> . aritmeticExpresion
    (14) statement -> . operator
    (15) statement -> . dataIn
    (16) assign -> . INSTANCE_VAR ASSIGN value
    (17) assign -> . GLOBAL_VAR ASSIGN value
    (18) assign -> . VARIABLE ASSIGN value
    (19) assign -> . VARIABLE ASSIGN data_structure
    (20) assign -> . INSTANCE_VAR ASSIGN data_structure
    (21) assign -> . GLOBAL_VAR ASSIGN data_structure
    (55) impression -> . PRINT LPAREN values RPAREN
    (56) impression -> . PRINT values
    (57) impression -> . PUTS values
    (58) impression -> . PUTS LPAREN values RPAREN
    (59) impression -> . P LPAREN values RPAREN
    (60) impression -> . P values
    (61) impression -> . PRINT
    (62) impression -> . PUTS
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (66) while_loop -> . WHILE condition DO statement_list END
    (51) case -> . CASE whens END
    (52) Sfunction -> . DEF ID statement_list END
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (53) p_SfunctionINV -> . ID
    (54) p_SfunctionINV -> . ID LPAREN RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (63) dataIn -> . VARIABLE ASSIGN GETS
    (64) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (65) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (22) VARIABLE -> . ID
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions

    $end            reduce using rule 2 (statement_list -> statement .)
    END             reduce using rule 2 (statement_list -> statement .)
    INSTANCE_VAR    shift and go to state 16
    GLOBAL_VAR      shift and go to state 18
    PRINT           shift and go to state 20
    PUTS            shift and go to state 22
    P               shift and go to state 23
    LPAREN          shift and go to state 21
    WHILE           shift and go to state 25
    CASE            shift and go to state 26
    DEF             shift and go to state 27
    LBRACKET        shift and go to state 29
    ID              shift and go to state 28
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    statement                      shift and go to state 3
    statement_list                 shift and go to state 38
    assign                         shift and go to state 4
    impression                     shift and go to state 5
    tupla                          shift and go to state 6
    conditions                     shift and go to state 7
    while_loop                     shift and go to state 8
    case                           shift and go to state 9
    Sfunction                      shift and go to state 10
    array                          shift and go to state 11
    p_SfunctionINV                 shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    value                          shift and go to state 17
    VARIABLE                       shift and go to state 19
    condition                      shift and go to state 24

state 4

    (4) statement -> assign .

    INSTANCE_VAR    reduce using rule 4 (statement -> assign .)
    GLOBAL_VAR      reduce using rule 4 (statement -> assign .)
    PRINT           reduce using rule 4 (statement -> assign .)
    PUTS            reduce using rule 4 (statement -> assign .)
    P               reduce using rule 4 (statement -> assign .)
    LPAREN          reduce using rule 4 (statement -> assign .)
    WHILE           reduce using rule 4 (statement -> assign .)
    CASE            reduce using rule 4 (statement -> assign .)
    DEF             reduce using rule 4 (statement -> assign .)
    LBRACKET        reduce using rule 4 (statement -> assign .)
    ID              reduce using rule 4 (statement -> assign .)
    PLUS            reduce using rule 4 (statement -> assign .)
    MINUS           reduce using rule 4 (statement -> assign .)
    TIMES           reduce using rule 4 (statement -> assign .)
    DIVIDE          reduce using rule 4 (statement -> assign .)
    MOD             reduce using rule 4 (statement -> assign .)
    NUMBER          reduce using rule 4 (statement -> assign .)
    STRING          reduce using rule 4 (statement -> assign .)
    BOOLEAN         reduce using rule 4 (statement -> assign .)
    $end            reduce using rule 4 (statement -> assign .)
    END             reduce using rule 4 (statement -> assign .)


state 5

    (5) statement -> impression .

    INSTANCE_VAR    reduce using rule 5 (statement -> impression .)
    GLOBAL_VAR      reduce using rule 5 (statement -> impression .)
    PRINT           reduce using rule 5 (statement -> impression .)
    PUTS            reduce using rule 5 (statement -> impression .)
    P               reduce using rule 5 (statement -> impression .)
    LPAREN          reduce using rule 5 (statement -> impression .)
    WHILE           reduce using rule 5 (statement -> impression .)
    CASE            reduce using rule 5 (statement -> impression .)
    DEF             reduce using rule 5 (statement -> impression .)
    LBRACKET        reduce using rule 5 (statement -> impression .)
    ID              reduce using rule 5 (statement -> impression .)
    PLUS            reduce using rule 5 (statement -> impression .)
    MINUS           reduce using rule 5 (statement -> impression .)
    TIMES           reduce using rule 5 (statement -> impression .)
    DIVIDE          reduce using rule 5 (statement -> impression .)
    MOD             reduce using rule 5 (statement -> impression .)
    NUMBER          reduce using rule 5 (statement -> impression .)
    STRING          reduce using rule 5 (statement -> impression .)
    BOOLEAN         reduce using rule 5 (statement -> impression .)
    $end            reduce using rule 5 (statement -> impression .)
    END             reduce using rule 5 (statement -> impression .)


state 6

    (6) statement -> tupla .

    INSTANCE_VAR    reduce using rule 6 (statement -> tupla .)
    GLOBAL_VAR      reduce using rule 6 (statement -> tupla .)
    PRINT           reduce using rule 6 (statement -> tupla .)
    PUTS            reduce using rule 6 (statement -> tupla .)
    P               reduce using rule 6 (statement -> tupla .)
    LPAREN          reduce using rule 6 (statement -> tupla .)
    WHILE           reduce using rule 6 (statement -> tupla .)
    CASE            reduce using rule 6 (statement -> tupla .)
    DEF             reduce using rule 6 (statement -> tupla .)
    LBRACKET        reduce using rule 6 (statement -> tupla .)
    ID              reduce using rule 6 (statement -> tupla .)
    PLUS            reduce using rule 6 (statement -> tupla .)
    MINUS           reduce using rule 6 (statement -> tupla .)
    TIMES           reduce using rule 6 (statement -> tupla .)
    DIVIDE          reduce using rule 6 (statement -> tupla .)
    MOD             reduce using rule 6 (statement -> tupla .)
    NUMBER          reduce using rule 6 (statement -> tupla .)
    STRING          reduce using rule 6 (statement -> tupla .)
    BOOLEAN         reduce using rule 6 (statement -> tupla .)
    $end            reduce using rule 6 (statement -> tupla .)
    END             reduce using rule 6 (statement -> tupla .)


state 7

    (7) statement -> conditions .
    (27) value -> conditions .

  ! reduce/reduce conflict for PLUS resolved using rule 7 (statement -> conditions .)
  ! reduce/reduce conflict for MINUS resolved using rule 7 (statement -> conditions .)
  ! reduce/reduce conflict for TIMES resolved using rule 7 (statement -> conditions .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 7 (statement -> conditions .)
  ! reduce/reduce conflict for MOD resolved using rule 7 (statement -> conditions .)
    INSTANCE_VAR    reduce using rule 7 (statement -> conditions .)
    GLOBAL_VAR      reduce using rule 7 (statement -> conditions .)
    PRINT           reduce using rule 7 (statement -> conditions .)
    PUTS            reduce using rule 7 (statement -> conditions .)
    P               reduce using rule 7 (statement -> conditions .)
    LPAREN          reduce using rule 7 (statement -> conditions .)
    WHILE           reduce using rule 7 (statement -> conditions .)
    CASE            reduce using rule 7 (statement -> conditions .)
    DEF             reduce using rule 7 (statement -> conditions .)
    LBRACKET        reduce using rule 7 (statement -> conditions .)
    ID              reduce using rule 7 (statement -> conditions .)
    PLUS            reduce using rule 7 (statement -> conditions .)
    MINUS           reduce using rule 7 (statement -> conditions .)
    TIMES           reduce using rule 7 (statement -> conditions .)
    DIVIDE          reduce using rule 7 (statement -> conditions .)
    MOD             reduce using rule 7 (statement -> conditions .)
    NUMBER          reduce using rule 7 (statement -> conditions .)
    STRING          reduce using rule 7 (statement -> conditions .)
    BOOLEAN         reduce using rule 7 (statement -> conditions .)
    $end            reduce using rule 7 (statement -> conditions .)
    END             reduce using rule 7 (statement -> conditions .)
    LESSTHAN        reduce using rule 27 (value -> conditions .)
    GREATERTHAN     reduce using rule 27 (value -> conditions .)

  ! PLUS            [ reduce using rule 27 (value -> conditions .) ]
  ! MINUS           [ reduce using rule 27 (value -> conditions .) ]
  ! TIMES           [ reduce using rule 27 (value -> conditions .) ]
  ! DIVIDE          [ reduce using rule 27 (value -> conditions .) ]
  ! MOD             [ reduce using rule 27 (value -> conditions .) ]


state 8

    (8) statement -> while_loop .

    INSTANCE_VAR    reduce using rule 8 (statement -> while_loop .)
    GLOBAL_VAR      reduce using rule 8 (statement -> while_loop .)
    PRINT           reduce using rule 8 (statement -> while_loop .)
    PUTS            reduce using rule 8 (statement -> while_loop .)
    P               reduce using rule 8 (statement -> while_loop .)
    LPAREN          reduce using rule 8 (statement -> while_loop .)
    WHILE           reduce using rule 8 (statement -> while_loop .)
    CASE            reduce using rule 8 (statement -> while_loop .)
    DEF             reduce using rule 8 (statement -> while_loop .)
    LBRACKET        reduce using rule 8 (statement -> while_loop .)
    ID              reduce using rule 8 (statement -> while_loop .)
    PLUS            reduce using rule 8 (statement -> while_loop .)
    MINUS           reduce using rule 8 (statement -> while_loop .)
    TIMES           reduce using rule 8 (statement -> while_loop .)
    DIVIDE          reduce using rule 8 (statement -> while_loop .)
    MOD             reduce using rule 8 (statement -> while_loop .)
    NUMBER          reduce using rule 8 (statement -> while_loop .)
    STRING          reduce using rule 8 (statement -> while_loop .)
    BOOLEAN         reduce using rule 8 (statement -> while_loop .)
    $end            reduce using rule 8 (statement -> while_loop .)
    END             reduce using rule 8 (statement -> while_loop .)


state 9

    (9) statement -> case .

    INSTANCE_VAR    reduce using rule 9 (statement -> case .)
    GLOBAL_VAR      reduce using rule 9 (statement -> case .)
    PRINT           reduce using rule 9 (statement -> case .)
    PUTS            reduce using rule 9 (statement -> case .)
    P               reduce using rule 9 (statement -> case .)
    LPAREN          reduce using rule 9 (statement -> case .)
    WHILE           reduce using rule 9 (statement -> case .)
    CASE            reduce using rule 9 (statement -> case .)
    DEF             reduce using rule 9 (statement -> case .)
    LBRACKET        reduce using rule 9 (statement -> case .)
    ID              reduce using rule 9 (statement -> case .)
    PLUS            reduce using rule 9 (statement -> case .)
    MINUS           reduce using rule 9 (statement -> case .)
    TIMES           reduce using rule 9 (statement -> case .)
    DIVIDE          reduce using rule 9 (statement -> case .)
    MOD             reduce using rule 9 (statement -> case .)
    NUMBER          reduce using rule 9 (statement -> case .)
    STRING          reduce using rule 9 (statement -> case .)
    BOOLEAN         reduce using rule 9 (statement -> case .)
    $end            reduce using rule 9 (statement -> case .)
    END             reduce using rule 9 (statement -> case .)


state 10

    (10) statement -> Sfunction .

    INSTANCE_VAR    reduce using rule 10 (statement -> Sfunction .)
    GLOBAL_VAR      reduce using rule 10 (statement -> Sfunction .)
    PRINT           reduce using rule 10 (statement -> Sfunction .)
    PUTS            reduce using rule 10 (statement -> Sfunction .)
    P               reduce using rule 10 (statement -> Sfunction .)
    LPAREN          reduce using rule 10 (statement -> Sfunction .)
    WHILE           reduce using rule 10 (statement -> Sfunction .)
    CASE            reduce using rule 10 (statement -> Sfunction .)
    DEF             reduce using rule 10 (statement -> Sfunction .)
    LBRACKET        reduce using rule 10 (statement -> Sfunction .)
    ID              reduce using rule 10 (statement -> Sfunction .)
    PLUS            reduce using rule 10 (statement -> Sfunction .)
    MINUS           reduce using rule 10 (statement -> Sfunction .)
    TIMES           reduce using rule 10 (statement -> Sfunction .)
    DIVIDE          reduce using rule 10 (statement -> Sfunction .)
    MOD             reduce using rule 10 (statement -> Sfunction .)
    NUMBER          reduce using rule 10 (statement -> Sfunction .)
    STRING          reduce using rule 10 (statement -> Sfunction .)
    BOOLEAN         reduce using rule 10 (statement -> Sfunction .)
    $end            reduce using rule 10 (statement -> Sfunction .)
    END             reduce using rule 10 (statement -> Sfunction .)


state 11

    (11) statement -> array .

    INSTANCE_VAR    reduce using rule 11 (statement -> array .)
    GLOBAL_VAR      reduce using rule 11 (statement -> array .)
    PRINT           reduce using rule 11 (statement -> array .)
    PUTS            reduce using rule 11 (statement -> array .)
    P               reduce using rule 11 (statement -> array .)
    LPAREN          reduce using rule 11 (statement -> array .)
    WHILE           reduce using rule 11 (statement -> array .)
    CASE            reduce using rule 11 (statement -> array .)
    DEF             reduce using rule 11 (statement -> array .)
    LBRACKET        reduce using rule 11 (statement -> array .)
    ID              reduce using rule 11 (statement -> array .)
    PLUS            reduce using rule 11 (statement -> array .)
    MINUS           reduce using rule 11 (statement -> array .)
    TIMES           reduce using rule 11 (statement -> array .)
    DIVIDE          reduce using rule 11 (statement -> array .)
    MOD             reduce using rule 11 (statement -> array .)
    NUMBER          reduce using rule 11 (statement -> array .)
    STRING          reduce using rule 11 (statement -> array .)
    BOOLEAN         reduce using rule 11 (statement -> array .)
    $end            reduce using rule 11 (statement -> array .)
    END             reduce using rule 11 (statement -> array .)


state 12

    (12) statement -> p_SfunctionINV .

    INSTANCE_VAR    reduce using rule 12 (statement -> p_SfunctionINV .)
    GLOBAL_VAR      reduce using rule 12 (statement -> p_SfunctionINV .)
    PRINT           reduce using rule 12 (statement -> p_SfunctionINV .)
    PUTS            reduce using rule 12 (statement -> p_SfunctionINV .)
    P               reduce using rule 12 (statement -> p_SfunctionINV .)
    LPAREN          reduce using rule 12 (statement -> p_SfunctionINV .)
    WHILE           reduce using rule 12 (statement -> p_SfunctionINV .)
    CASE            reduce using rule 12 (statement -> p_SfunctionINV .)
    DEF             reduce using rule 12 (statement -> p_SfunctionINV .)
    LBRACKET        reduce using rule 12 (statement -> p_SfunctionINV .)
    ID              reduce using rule 12 (statement -> p_SfunctionINV .)
    PLUS            reduce using rule 12 (statement -> p_SfunctionINV .)
    MINUS           reduce using rule 12 (statement -> p_SfunctionINV .)
    TIMES           reduce using rule 12 (statement -> p_SfunctionINV .)
    DIVIDE          reduce using rule 12 (statement -> p_SfunctionINV .)
    MOD             reduce using rule 12 (statement -> p_SfunctionINV .)
    NUMBER          reduce using rule 12 (statement -> p_SfunctionINV .)
    STRING          reduce using rule 12 (statement -> p_SfunctionINV .)
    BOOLEAN         reduce using rule 12 (statement -> p_SfunctionINV .)
    $end            reduce using rule 12 (statement -> p_SfunctionINV .)
    END             reduce using rule 12 (statement -> p_SfunctionINV .)


state 13

    (13) statement -> aritmeticExpresion .
    (26) value -> aritmeticExpresion .

  ! reduce/reduce conflict for PLUS resolved using rule 13 (statement -> aritmeticExpresion .)
  ! reduce/reduce conflict for MINUS resolved using rule 13 (statement -> aritmeticExpresion .)
  ! reduce/reduce conflict for TIMES resolved using rule 13 (statement -> aritmeticExpresion .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 13 (statement -> aritmeticExpresion .)
  ! reduce/reduce conflict for MOD resolved using rule 13 (statement -> aritmeticExpresion .)
    INSTANCE_VAR    reduce using rule 13 (statement -> aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 13 (statement -> aritmeticExpresion .)
    PRINT           reduce using rule 13 (statement -> aritmeticExpresion .)
    PUTS            reduce using rule 13 (statement -> aritmeticExpresion .)
    P               reduce using rule 13 (statement -> aritmeticExpresion .)
    LPAREN          reduce using rule 13 (statement -> aritmeticExpresion .)
    WHILE           reduce using rule 13 (statement -> aritmeticExpresion .)
    CASE            reduce using rule 13 (statement -> aritmeticExpresion .)
    DEF             reduce using rule 13 (statement -> aritmeticExpresion .)
    LBRACKET        reduce using rule 13 (statement -> aritmeticExpresion .)
    ID              reduce using rule 13 (statement -> aritmeticExpresion .)
    PLUS            reduce using rule 13 (statement -> aritmeticExpresion .)
    MINUS           reduce using rule 13 (statement -> aritmeticExpresion .)
    TIMES           reduce using rule 13 (statement -> aritmeticExpresion .)
    DIVIDE          reduce using rule 13 (statement -> aritmeticExpresion .)
    MOD             reduce using rule 13 (statement -> aritmeticExpresion .)
    NUMBER          reduce using rule 13 (statement -> aritmeticExpresion .)
    STRING          reduce using rule 13 (statement -> aritmeticExpresion .)
    BOOLEAN         reduce using rule 13 (statement -> aritmeticExpresion .)
    $end            reduce using rule 13 (statement -> aritmeticExpresion .)
    END             reduce using rule 13 (statement -> aritmeticExpresion .)
    LESSTHAN        reduce using rule 26 (value -> aritmeticExpresion .)
    GREATERTHAN     reduce using rule 26 (value -> aritmeticExpresion .)

  ! PLUS            [ reduce using rule 26 (value -> aritmeticExpresion .) ]
  ! MINUS           [ reduce using rule 26 (value -> aritmeticExpresion .) ]
  ! TIMES           [ reduce using rule 26 (value -> aritmeticExpresion .) ]
  ! DIVIDE          [ reduce using rule 26 (value -> aritmeticExpresion .) ]
  ! MOD             [ reduce using rule 26 (value -> aritmeticExpresion .) ]


state 14

    (14) statement -> operator .

    INSTANCE_VAR    reduce using rule 14 (statement -> operator .)
    GLOBAL_VAR      reduce using rule 14 (statement -> operator .)
    PRINT           reduce using rule 14 (statement -> operator .)
    PUTS            reduce using rule 14 (statement -> operator .)
    P               reduce using rule 14 (statement -> operator .)
    LPAREN          reduce using rule 14 (statement -> operator .)
    WHILE           reduce using rule 14 (statement -> operator .)
    CASE            reduce using rule 14 (statement -> operator .)
    DEF             reduce using rule 14 (statement -> operator .)
    LBRACKET        reduce using rule 14 (statement -> operator .)
    ID              reduce using rule 14 (statement -> operator .)
    PLUS            reduce using rule 14 (statement -> operator .)
    MINUS           reduce using rule 14 (statement -> operator .)
    TIMES           reduce using rule 14 (statement -> operator .)
    DIVIDE          reduce using rule 14 (statement -> operator .)
    MOD             reduce using rule 14 (statement -> operator .)
    NUMBER          reduce using rule 14 (statement -> operator .)
    STRING          reduce using rule 14 (statement -> operator .)
    BOOLEAN         reduce using rule 14 (statement -> operator .)
    $end            reduce using rule 14 (statement -> operator .)
    END             reduce using rule 14 (statement -> operator .)


state 15

    (15) statement -> dataIn .

    INSTANCE_VAR    reduce using rule 15 (statement -> dataIn .)
    GLOBAL_VAR      reduce using rule 15 (statement -> dataIn .)
    PRINT           reduce using rule 15 (statement -> dataIn .)
    PUTS            reduce using rule 15 (statement -> dataIn .)
    P               reduce using rule 15 (statement -> dataIn .)
    LPAREN          reduce using rule 15 (statement -> dataIn .)
    WHILE           reduce using rule 15 (statement -> dataIn .)
    CASE            reduce using rule 15 (statement -> dataIn .)
    DEF             reduce using rule 15 (statement -> dataIn .)
    LBRACKET        reduce using rule 15 (statement -> dataIn .)
    ID              reduce using rule 15 (statement -> dataIn .)
    PLUS            reduce using rule 15 (statement -> dataIn .)
    MINUS           reduce using rule 15 (statement -> dataIn .)
    TIMES           reduce using rule 15 (statement -> dataIn .)
    DIVIDE          reduce using rule 15 (statement -> dataIn .)
    MOD             reduce using rule 15 (statement -> dataIn .)
    NUMBER          reduce using rule 15 (statement -> dataIn .)
    STRING          reduce using rule 15 (statement -> dataIn .)
    BOOLEAN         reduce using rule 15 (statement -> dataIn .)
    $end            reduce using rule 15 (statement -> dataIn .)
    END             reduce using rule 15 (statement -> dataIn .)


state 16

    (16) assign -> INSTANCE_VAR . ASSIGN value
    (20) assign -> INSTANCE_VAR . ASSIGN data_structure
    (64) dataIn -> INSTANCE_VAR . ASSIGN GETS

    ASSIGN          shift and go to state 39


state 17

    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 18

    (17) assign -> GLOBAL_VAR . ASSIGN value
    (21) assign -> GLOBAL_VAR . ASSIGN data_structure
    (65) dataIn -> GLOBAL_VAR . ASSIGN GETS

    ASSIGN          shift and go to state 44


state 19

    (18) assign -> VARIABLE . ASSIGN value
    (19) assign -> VARIABLE . ASSIGN data_structure
    (63) dataIn -> VARIABLE . ASSIGN GETS

    ASSIGN          shift and go to state 45


state 20

    (55) impression -> PRINT . LPAREN values RPAREN
    (56) impression -> PRINT . values
    (61) impression -> PRINT .
    (28) values -> . value
    (29) values -> . value COMMA values
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    LPAREN          shift and go to state 46
    INSTANCE_VAR    reduce using rule 61 (impression -> PRINT .)
    GLOBAL_VAR      reduce using rule 61 (impression -> PRINT .)
    PRINT           reduce using rule 61 (impression -> PRINT .)
    PUTS            reduce using rule 61 (impression -> PRINT .)
    P               reduce using rule 61 (impression -> PRINT .)
    WHILE           reduce using rule 61 (impression -> PRINT .)
    CASE            reduce using rule 61 (impression -> PRINT .)
    DEF             reduce using rule 61 (impression -> PRINT .)
    LBRACKET        reduce using rule 61 (impression -> PRINT .)
    ID              reduce using rule 61 (impression -> PRINT .)
    PLUS            reduce using rule 61 (impression -> PRINT .)
    MINUS           reduce using rule 61 (impression -> PRINT .)
    TIMES           reduce using rule 61 (impression -> PRINT .)
    DIVIDE          reduce using rule 61 (impression -> PRINT .)
    MOD             reduce using rule 61 (impression -> PRINT .)
    $end            reduce using rule 61 (impression -> PRINT .)
    END             reduce using rule 61 (impression -> PRINT .)
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! LPAREN          [ reduce using rule 61 (impression -> PRINT .) ]
  ! NUMBER          [ reduce using rule 61 (impression -> PRINT .) ]
  ! STRING          [ reduce using rule 61 (impression -> PRINT .) ]
  ! BOOLEAN         [ reduce using rule 61 (impression -> PRINT .) ]

    values                         shift and go to state 47
    value                          shift and go to state 48
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 21

    (67) tupla -> LPAREN . values RPAREN
    (68) tupla -> LPAREN . RPAREN
    (31) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (28) values -> . value
    (29) values -> . value COMMA values
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    RPAREN          shift and go to state 53
    LPAREN          shift and go to state 51
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    values                         shift and go to state 52
    aritmeticExpresion             shift and go to state 54
    value                          shift and go to state 48
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 22

    (57) impression -> PUTS . values
    (58) impression -> PUTS . LPAREN values RPAREN
    (62) impression -> PUTS .
    (28) values -> . value
    (29) values -> . value COMMA values
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
    LPAREN          shift and go to state 56
    INSTANCE_VAR    reduce using rule 62 (impression -> PUTS .)
    GLOBAL_VAR      reduce using rule 62 (impression -> PUTS .)
    PRINT           reduce using rule 62 (impression -> PUTS .)
    PUTS            reduce using rule 62 (impression -> PUTS .)
    P               reduce using rule 62 (impression -> PUTS .)
    WHILE           reduce using rule 62 (impression -> PUTS .)
    CASE            reduce using rule 62 (impression -> PUTS .)
    DEF             reduce using rule 62 (impression -> PUTS .)
    LBRACKET        reduce using rule 62 (impression -> PUTS .)
    ID              reduce using rule 62 (impression -> PUTS .)
    PLUS            reduce using rule 62 (impression -> PUTS .)
    MINUS           reduce using rule 62 (impression -> PUTS .)
    TIMES           reduce using rule 62 (impression -> PUTS .)
    DIVIDE          reduce using rule 62 (impression -> PUTS .)
    MOD             reduce using rule 62 (impression -> PUTS .)
    $end            reduce using rule 62 (impression -> PUTS .)
    END             reduce using rule 62 (impression -> PUTS .)
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! LPAREN          [ reduce using rule 62 (impression -> PUTS .) ]
  ! NUMBER          [ reduce using rule 62 (impression -> PUTS .) ]
  ! STRING          [ reduce using rule 62 (impression -> PUTS .) ]
  ! BOOLEAN         [ reduce using rule 62 (impression -> PUTS .) ]

    values                         shift and go to state 55
    value                          shift and go to state 48
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 23

    (59) impression -> P . LPAREN values RPAREN
    (60) impression -> P . values
    (28) values -> . value
    (29) values -> . value COMMA values
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    LPAREN          shift and go to state 57
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    values                         shift and go to state 58
    value                          shift and go to state 48
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 24

    (46) conditions -> condition .
    (47) conditions -> condition . conector conditions
    (41) conector -> . AND
    (42) conector -> . OR

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    INSTANCE_VAR    reduce using rule 46 (conditions -> condition .)
    GLOBAL_VAR      reduce using rule 46 (conditions -> condition .)
    PRINT           reduce using rule 46 (conditions -> condition .)
    PUTS            reduce using rule 46 (conditions -> condition .)
    P               reduce using rule 46 (conditions -> condition .)
    LPAREN          reduce using rule 46 (conditions -> condition .)
    WHILE           reduce using rule 46 (conditions -> condition .)
    CASE            reduce using rule 46 (conditions -> condition .)
    DEF             reduce using rule 46 (conditions -> condition .)
    LBRACKET        reduce using rule 46 (conditions -> condition .)
    ID              reduce using rule 46 (conditions -> condition .)
    PLUS            reduce using rule 46 (conditions -> condition .)
    MINUS           reduce using rule 46 (conditions -> condition .)
    TIMES           reduce using rule 46 (conditions -> condition .)
    DIVIDE          reduce using rule 46 (conditions -> condition .)
    MOD             reduce using rule 46 (conditions -> condition .)
    NUMBER          reduce using rule 46 (conditions -> condition .)
    STRING          reduce using rule 46 (conditions -> condition .)
    BOOLEAN         reduce using rule 46 (conditions -> condition .)
    $end            reduce using rule 46 (conditions -> condition .)
    LESSTHAN        reduce using rule 46 (conditions -> condition .)
    GREATERTHAN     reduce using rule 46 (conditions -> condition .)
    END             reduce using rule 46 (conditions -> condition .)
    COMMA           reduce using rule 46 (conditions -> condition .)
    RPAREN          reduce using rule 46 (conditions -> condition .)
    RBRACKET        reduce using rule 46 (conditions -> condition .)
    DO              reduce using rule 46 (conditions -> condition .)
    AND             shift and go to state 60
    OR              shift and go to state 61

  ! AND             [ reduce using rule 46 (conditions -> condition .) ]
  ! OR              [ reduce using rule 46 (conditions -> condition .) ]

    conector                       shift and go to state 59

state 25

    (66) while_loop -> WHILE . condition DO statement_list END
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions

    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    condition                      shift and go to state 62
    value                          shift and go to state 63
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50

state 26

    (51) case -> CASE . whens END
    (49) whens -> . when
    (50) whens -> . whens
    (48) when -> . WHEN conditions statement_list

    WHEN            shift and go to state 66

    whens                          shift and go to state 64
    when                           shift and go to state 65

state 27

    (52) Sfunction -> DEF . ID statement_list END

    ID              shift and go to state 67


state 28

    (53) p_SfunctionINV -> ID .
    (54) p_SfunctionINV -> ID . LPAREN RPAREN
    (22) VARIABLE -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    INSTANCE_VAR    reduce using rule 53 (p_SfunctionINV -> ID .)
    GLOBAL_VAR      reduce using rule 53 (p_SfunctionINV -> ID .)
    PRINT           reduce using rule 53 (p_SfunctionINV -> ID .)
    PUTS            reduce using rule 53 (p_SfunctionINV -> ID .)
    P               reduce using rule 53 (p_SfunctionINV -> ID .)
    WHILE           reduce using rule 53 (p_SfunctionINV -> ID .)
    CASE            reduce using rule 53 (p_SfunctionINV -> ID .)
    DEF             reduce using rule 53 (p_SfunctionINV -> ID .)
    LBRACKET        reduce using rule 53 (p_SfunctionINV -> ID .)
    ID              reduce using rule 53 (p_SfunctionINV -> ID .)
    PLUS            reduce using rule 53 (p_SfunctionINV -> ID .)
    MINUS           reduce using rule 53 (p_SfunctionINV -> ID .)
    TIMES           reduce using rule 53 (p_SfunctionINV -> ID .)
    DIVIDE          reduce using rule 53 (p_SfunctionINV -> ID .)
    MOD             reduce using rule 53 (p_SfunctionINV -> ID .)
    NUMBER          reduce using rule 53 (p_SfunctionINV -> ID .)
    STRING          reduce using rule 53 (p_SfunctionINV -> ID .)
    BOOLEAN         reduce using rule 53 (p_SfunctionINV -> ID .)
    $end            reduce using rule 53 (p_SfunctionINV -> ID .)
    END             reduce using rule 53 (p_SfunctionINV -> ID .)
    LPAREN          shift and go to state 68
    ASSIGN          reduce using rule 22 (VARIABLE -> ID .)

  ! LPAREN          [ reduce using rule 53 (p_SfunctionINV -> ID .) ]


state 29

    (37) array -> LBRACKET . RBRACKET
    (38) array -> LBRACKET . values RBRACKET
    (28) values -> . value
    (29) values -> . value COMMA values
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    RBRACKET        shift and go to state 69
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    values                         shift and go to state 70
    value                          shift and go to state 48
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 30

    (32) operator -> PLUS .

    INSTANCE_VAR    reduce using rule 32 (operator -> PLUS .)
    GLOBAL_VAR      reduce using rule 32 (operator -> PLUS .)
    PRINT           reduce using rule 32 (operator -> PLUS .)
    PUTS            reduce using rule 32 (operator -> PLUS .)
    P               reduce using rule 32 (operator -> PLUS .)
    LPAREN          reduce using rule 32 (operator -> PLUS .)
    WHILE           reduce using rule 32 (operator -> PLUS .)
    CASE            reduce using rule 32 (operator -> PLUS .)
    DEF             reduce using rule 32 (operator -> PLUS .)
    LBRACKET        reduce using rule 32 (operator -> PLUS .)
    ID              reduce using rule 32 (operator -> PLUS .)
    PLUS            reduce using rule 32 (operator -> PLUS .)
    MINUS           reduce using rule 32 (operator -> PLUS .)
    TIMES           reduce using rule 32 (operator -> PLUS .)
    DIVIDE          reduce using rule 32 (operator -> PLUS .)
    MOD             reduce using rule 32 (operator -> PLUS .)
    NUMBER          reduce using rule 32 (operator -> PLUS .)
    STRING          reduce using rule 32 (operator -> PLUS .)
    BOOLEAN         reduce using rule 32 (operator -> PLUS .)
    $end            reduce using rule 32 (operator -> PLUS .)
    END             reduce using rule 32 (operator -> PLUS .)


state 31

    (33) operator -> MINUS .

    INSTANCE_VAR    reduce using rule 33 (operator -> MINUS .)
    GLOBAL_VAR      reduce using rule 33 (operator -> MINUS .)
    PRINT           reduce using rule 33 (operator -> MINUS .)
    PUTS            reduce using rule 33 (operator -> MINUS .)
    P               reduce using rule 33 (operator -> MINUS .)
    LPAREN          reduce using rule 33 (operator -> MINUS .)
    WHILE           reduce using rule 33 (operator -> MINUS .)
    CASE            reduce using rule 33 (operator -> MINUS .)
    DEF             reduce using rule 33 (operator -> MINUS .)
    LBRACKET        reduce using rule 33 (operator -> MINUS .)
    ID              reduce using rule 33 (operator -> MINUS .)
    PLUS            reduce using rule 33 (operator -> MINUS .)
    MINUS           reduce using rule 33 (operator -> MINUS .)
    TIMES           reduce using rule 33 (operator -> MINUS .)
    DIVIDE          reduce using rule 33 (operator -> MINUS .)
    MOD             reduce using rule 33 (operator -> MINUS .)
    NUMBER          reduce using rule 33 (operator -> MINUS .)
    STRING          reduce using rule 33 (operator -> MINUS .)
    BOOLEAN         reduce using rule 33 (operator -> MINUS .)
    $end            reduce using rule 33 (operator -> MINUS .)
    END             reduce using rule 33 (operator -> MINUS .)


state 32

    (34) operator -> TIMES .

    INSTANCE_VAR    reduce using rule 34 (operator -> TIMES .)
    GLOBAL_VAR      reduce using rule 34 (operator -> TIMES .)
    PRINT           reduce using rule 34 (operator -> TIMES .)
    PUTS            reduce using rule 34 (operator -> TIMES .)
    P               reduce using rule 34 (operator -> TIMES .)
    LPAREN          reduce using rule 34 (operator -> TIMES .)
    WHILE           reduce using rule 34 (operator -> TIMES .)
    CASE            reduce using rule 34 (operator -> TIMES .)
    DEF             reduce using rule 34 (operator -> TIMES .)
    LBRACKET        reduce using rule 34 (operator -> TIMES .)
    ID              reduce using rule 34 (operator -> TIMES .)
    PLUS            reduce using rule 34 (operator -> TIMES .)
    MINUS           reduce using rule 34 (operator -> TIMES .)
    TIMES           reduce using rule 34 (operator -> TIMES .)
    DIVIDE          reduce using rule 34 (operator -> TIMES .)
    MOD             reduce using rule 34 (operator -> TIMES .)
    NUMBER          reduce using rule 34 (operator -> TIMES .)
    STRING          reduce using rule 34 (operator -> TIMES .)
    BOOLEAN         reduce using rule 34 (operator -> TIMES .)
    $end            reduce using rule 34 (operator -> TIMES .)
    END             reduce using rule 34 (operator -> TIMES .)


state 33

    (35) operator -> DIVIDE .

    INSTANCE_VAR    reduce using rule 35 (operator -> DIVIDE .)
    GLOBAL_VAR      reduce using rule 35 (operator -> DIVIDE .)
    PRINT           reduce using rule 35 (operator -> DIVIDE .)
    PUTS            reduce using rule 35 (operator -> DIVIDE .)
    P               reduce using rule 35 (operator -> DIVIDE .)
    LPAREN          reduce using rule 35 (operator -> DIVIDE .)
    WHILE           reduce using rule 35 (operator -> DIVIDE .)
    CASE            reduce using rule 35 (operator -> DIVIDE .)
    DEF             reduce using rule 35 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 35 (operator -> DIVIDE .)
    ID              reduce using rule 35 (operator -> DIVIDE .)
    PLUS            reduce using rule 35 (operator -> DIVIDE .)
    MINUS           reduce using rule 35 (operator -> DIVIDE .)
    TIMES           reduce using rule 35 (operator -> DIVIDE .)
    DIVIDE          reduce using rule 35 (operator -> DIVIDE .)
    MOD             reduce using rule 35 (operator -> DIVIDE .)
    NUMBER          reduce using rule 35 (operator -> DIVIDE .)
    STRING          reduce using rule 35 (operator -> DIVIDE .)
    BOOLEAN         reduce using rule 35 (operator -> DIVIDE .)
    $end            reduce using rule 35 (operator -> DIVIDE .)
    END             reduce using rule 35 (operator -> DIVIDE .)


state 34

    (36) operator -> MOD .

    INSTANCE_VAR    reduce using rule 36 (operator -> MOD .)
    GLOBAL_VAR      reduce using rule 36 (operator -> MOD .)
    PRINT           reduce using rule 36 (operator -> MOD .)
    PUTS            reduce using rule 36 (operator -> MOD .)
    P               reduce using rule 36 (operator -> MOD .)
    LPAREN          reduce using rule 36 (operator -> MOD .)
    WHILE           reduce using rule 36 (operator -> MOD .)
    CASE            reduce using rule 36 (operator -> MOD .)
    DEF             reduce using rule 36 (operator -> MOD .)
    LBRACKET        reduce using rule 36 (operator -> MOD .)
    ID              reduce using rule 36 (operator -> MOD .)
    PLUS            reduce using rule 36 (operator -> MOD .)
    MINUS           reduce using rule 36 (operator -> MOD .)
    TIMES           reduce using rule 36 (operator -> MOD .)
    DIVIDE          reduce using rule 36 (operator -> MOD .)
    MOD             reduce using rule 36 (operator -> MOD .)
    NUMBER          reduce using rule 36 (operator -> MOD .)
    STRING          reduce using rule 36 (operator -> MOD .)
    BOOLEAN         reduce using rule 36 (operator -> MOD .)
    $end            reduce using rule 36 (operator -> MOD .)
    END             reduce using rule 36 (operator -> MOD .)


state 35

    (23) value -> NUMBER .

    PLUS            reduce using rule 23 (value -> NUMBER .)
    MINUS           reduce using rule 23 (value -> NUMBER .)
    TIMES           reduce using rule 23 (value -> NUMBER .)
    DIVIDE          reduce using rule 23 (value -> NUMBER .)
    MOD             reduce using rule 23 (value -> NUMBER .)
    LESSTHAN        reduce using rule 23 (value -> NUMBER .)
    GREATERTHAN     reduce using rule 23 (value -> NUMBER .)
    COMMA           reduce using rule 23 (value -> NUMBER .)
    INSTANCE_VAR    reduce using rule 23 (value -> NUMBER .)
    GLOBAL_VAR      reduce using rule 23 (value -> NUMBER .)
    PRINT           reduce using rule 23 (value -> NUMBER .)
    PUTS            reduce using rule 23 (value -> NUMBER .)
    P               reduce using rule 23 (value -> NUMBER .)
    LPAREN          reduce using rule 23 (value -> NUMBER .)
    WHILE           reduce using rule 23 (value -> NUMBER .)
    CASE            reduce using rule 23 (value -> NUMBER .)
    DEF             reduce using rule 23 (value -> NUMBER .)
    LBRACKET        reduce using rule 23 (value -> NUMBER .)
    ID              reduce using rule 23 (value -> NUMBER .)
    NUMBER          reduce using rule 23 (value -> NUMBER .)
    STRING          reduce using rule 23 (value -> NUMBER .)
    BOOLEAN         reduce using rule 23 (value -> NUMBER .)
    $end            reduce using rule 23 (value -> NUMBER .)
    END             reduce using rule 23 (value -> NUMBER .)
    RPAREN          reduce using rule 23 (value -> NUMBER .)
    RBRACKET        reduce using rule 23 (value -> NUMBER .)
    AND             reduce using rule 23 (value -> NUMBER .)
    OR              reduce using rule 23 (value -> NUMBER .)
    DO              reduce using rule 23 (value -> NUMBER .)


state 36

    (24) value -> STRING .

    PLUS            reduce using rule 24 (value -> STRING .)
    MINUS           reduce using rule 24 (value -> STRING .)
    TIMES           reduce using rule 24 (value -> STRING .)
    DIVIDE          reduce using rule 24 (value -> STRING .)
    MOD             reduce using rule 24 (value -> STRING .)
    LESSTHAN        reduce using rule 24 (value -> STRING .)
    GREATERTHAN     reduce using rule 24 (value -> STRING .)
    COMMA           reduce using rule 24 (value -> STRING .)
    INSTANCE_VAR    reduce using rule 24 (value -> STRING .)
    GLOBAL_VAR      reduce using rule 24 (value -> STRING .)
    PRINT           reduce using rule 24 (value -> STRING .)
    PUTS            reduce using rule 24 (value -> STRING .)
    P               reduce using rule 24 (value -> STRING .)
    LPAREN          reduce using rule 24 (value -> STRING .)
    WHILE           reduce using rule 24 (value -> STRING .)
    CASE            reduce using rule 24 (value -> STRING .)
    DEF             reduce using rule 24 (value -> STRING .)
    LBRACKET        reduce using rule 24 (value -> STRING .)
    ID              reduce using rule 24 (value -> STRING .)
    NUMBER          reduce using rule 24 (value -> STRING .)
    STRING          reduce using rule 24 (value -> STRING .)
    BOOLEAN         reduce using rule 24 (value -> STRING .)
    $end            reduce using rule 24 (value -> STRING .)
    END             reduce using rule 24 (value -> STRING .)
    RPAREN          reduce using rule 24 (value -> STRING .)
    RBRACKET        reduce using rule 24 (value -> STRING .)
    AND             reduce using rule 24 (value -> STRING .)
    OR              reduce using rule 24 (value -> STRING .)
    DO              reduce using rule 24 (value -> STRING .)


state 37

    (25) value -> BOOLEAN .

    PLUS            reduce using rule 25 (value -> BOOLEAN .)
    MINUS           reduce using rule 25 (value -> BOOLEAN .)
    TIMES           reduce using rule 25 (value -> BOOLEAN .)
    DIVIDE          reduce using rule 25 (value -> BOOLEAN .)
    MOD             reduce using rule 25 (value -> BOOLEAN .)
    LESSTHAN        reduce using rule 25 (value -> BOOLEAN .)
    GREATERTHAN     reduce using rule 25 (value -> BOOLEAN .)
    COMMA           reduce using rule 25 (value -> BOOLEAN .)
    INSTANCE_VAR    reduce using rule 25 (value -> BOOLEAN .)
    GLOBAL_VAR      reduce using rule 25 (value -> BOOLEAN .)
    PRINT           reduce using rule 25 (value -> BOOLEAN .)
    PUTS            reduce using rule 25 (value -> BOOLEAN .)
    P               reduce using rule 25 (value -> BOOLEAN .)
    LPAREN          reduce using rule 25 (value -> BOOLEAN .)
    WHILE           reduce using rule 25 (value -> BOOLEAN .)
    CASE            reduce using rule 25 (value -> BOOLEAN .)
    DEF             reduce using rule 25 (value -> BOOLEAN .)
    LBRACKET        reduce using rule 25 (value -> BOOLEAN .)
    ID              reduce using rule 25 (value -> BOOLEAN .)
    NUMBER          reduce using rule 25 (value -> BOOLEAN .)
    STRING          reduce using rule 25 (value -> BOOLEAN .)
    BOOLEAN         reduce using rule 25 (value -> BOOLEAN .)
    $end            reduce using rule 25 (value -> BOOLEAN .)
    END             reduce using rule 25 (value -> BOOLEAN .)
    RPAREN          reduce using rule 25 (value -> BOOLEAN .)
    RBRACKET        reduce using rule 25 (value -> BOOLEAN .)
    AND             reduce using rule 25 (value -> BOOLEAN .)
    OR              reduce using rule 25 (value -> BOOLEAN .)
    DO              reduce using rule 25 (value -> BOOLEAN .)


state 38

    (3) statement_list -> statement statement_list .

    $end            reduce using rule 3 (statement_list -> statement statement_list .)
    END             reduce using rule 3 (statement_list -> statement statement_list .)


state 39

    (16) assign -> INSTANCE_VAR ASSIGN . value
    (20) assign -> INSTANCE_VAR ASSIGN . data_structure
    (64) dataIn -> INSTANCE_VAR ASSIGN . GETS
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (39) data_structure -> . array
    (40) data_structure -> . tupla
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (45) condition -> . value operComp value

    GETS            shift and go to state 73
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 76
    LBRACKET        shift and go to state 29

    value                          shift and go to state 71
    data_structure                 shift and go to state 72
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    array                          shift and go to state 74
    tupla                          shift and go to state 75
    condition                      shift and go to state 24

state 40

    (30) aritmeticExpresion -> value operator . value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    value                          shift and go to state 77
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 41

    (45) condition -> value operComp . value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    value                          shift and go to state 78
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 42

    (43) operComp -> LESSTHAN .

    NUMBER          reduce using rule 43 (operComp -> LESSTHAN .)
    STRING          reduce using rule 43 (operComp -> LESSTHAN .)
    BOOLEAN         reduce using rule 43 (operComp -> LESSTHAN .)
    LPAREN          reduce using rule 43 (operComp -> LESSTHAN .)


state 43

    (44) operComp -> GREATERTHAN .

    NUMBER          reduce using rule 44 (operComp -> GREATERTHAN .)
    STRING          reduce using rule 44 (operComp -> GREATERTHAN .)
    BOOLEAN         reduce using rule 44 (operComp -> GREATERTHAN .)
    LPAREN          reduce using rule 44 (operComp -> GREATERTHAN .)


state 44

    (17) assign -> GLOBAL_VAR ASSIGN . value
    (21) assign -> GLOBAL_VAR ASSIGN . data_structure
    (65) dataIn -> GLOBAL_VAR ASSIGN . GETS
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (39) data_structure -> . array
    (40) data_structure -> . tupla
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (45) condition -> . value operComp value

    GETS            shift and go to state 81
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 76
    LBRACKET        shift and go to state 29

    value                          shift and go to state 79
    data_structure                 shift and go to state 80
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    array                          shift and go to state 74
    tupla                          shift and go to state 75
    condition                      shift and go to state 24

state 45

    (18) assign -> VARIABLE ASSIGN . value
    (19) assign -> VARIABLE ASSIGN . data_structure
    (63) dataIn -> VARIABLE ASSIGN . GETS
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (39) data_structure -> . array
    (40) data_structure -> . tupla
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (45) condition -> . value operComp value

    GETS            shift and go to state 84
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 76
    LBRACKET        shift and go to state 29

    value                          shift and go to state 82
    data_structure                 shift and go to state 83
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    array                          shift and go to state 74
    tupla                          shift and go to state 75
    condition                      shift and go to state 24

state 46

    (55) impression -> PRINT LPAREN . values RPAREN
    (31) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (28) values -> . value
    (29) values -> . value COMMA values
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    LPAREN          shift and go to state 51
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    values                         shift and go to state 85
    aritmeticExpresion             shift and go to state 54
    value                          shift and go to state 48
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 47

    (56) impression -> PRINT values .

    INSTANCE_VAR    reduce using rule 56 (impression -> PRINT values .)
    GLOBAL_VAR      reduce using rule 56 (impression -> PRINT values .)
    PRINT           reduce using rule 56 (impression -> PRINT values .)
    PUTS            reduce using rule 56 (impression -> PRINT values .)
    P               reduce using rule 56 (impression -> PRINT values .)
    LPAREN          reduce using rule 56 (impression -> PRINT values .)
    WHILE           reduce using rule 56 (impression -> PRINT values .)
    CASE            reduce using rule 56 (impression -> PRINT values .)
    DEF             reduce using rule 56 (impression -> PRINT values .)
    LBRACKET        reduce using rule 56 (impression -> PRINT values .)
    ID              reduce using rule 56 (impression -> PRINT values .)
    PLUS            reduce using rule 56 (impression -> PRINT values .)
    MINUS           reduce using rule 56 (impression -> PRINT values .)
    TIMES           reduce using rule 56 (impression -> PRINT values .)
    DIVIDE          reduce using rule 56 (impression -> PRINT values .)
    MOD             reduce using rule 56 (impression -> PRINT values .)
    NUMBER          reduce using rule 56 (impression -> PRINT values .)
    STRING          reduce using rule 56 (impression -> PRINT values .)
    BOOLEAN         reduce using rule 56 (impression -> PRINT values .)
    $end            reduce using rule 56 (impression -> PRINT values .)
    END             reduce using rule 56 (impression -> PRINT values .)


state 48

    (28) values -> value .
    (29) values -> value . COMMA values
    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INSTANCE_VAR    reduce using rule 28 (values -> value .)
    GLOBAL_VAR      reduce using rule 28 (values -> value .)
    PRINT           reduce using rule 28 (values -> value .)
    PUTS            reduce using rule 28 (values -> value .)
    P               reduce using rule 28 (values -> value .)
    LPAREN          reduce using rule 28 (values -> value .)
    WHILE           reduce using rule 28 (values -> value .)
    CASE            reduce using rule 28 (values -> value .)
    DEF             reduce using rule 28 (values -> value .)
    LBRACKET        reduce using rule 28 (values -> value .)
    ID              reduce using rule 28 (values -> value .)
    NUMBER          reduce using rule 28 (values -> value .)
    STRING          reduce using rule 28 (values -> value .)
    BOOLEAN         reduce using rule 28 (values -> value .)
    $end            reduce using rule 28 (values -> value .)
    END             reduce using rule 28 (values -> value .)
    RPAREN          reduce using rule 28 (values -> value .)
    RBRACKET        reduce using rule 28 (values -> value .)
    COMMA           shift and go to state 86
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

  ! PLUS            [ reduce using rule 28 (values -> value .) ]
  ! MINUS           [ reduce using rule 28 (values -> value .) ]
  ! TIMES           [ reduce using rule 28 (values -> value .) ]
  ! DIVIDE          [ reduce using rule 28 (values -> value .) ]
  ! MOD             [ reduce using rule 28 (values -> value .) ]

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 49

    (26) value -> aritmeticExpresion .

    COMMA           reduce using rule 26 (value -> aritmeticExpresion .)
    PLUS            reduce using rule 26 (value -> aritmeticExpresion .)
    MINUS           reduce using rule 26 (value -> aritmeticExpresion .)
    TIMES           reduce using rule 26 (value -> aritmeticExpresion .)
    DIVIDE          reduce using rule 26 (value -> aritmeticExpresion .)
    MOD             reduce using rule 26 (value -> aritmeticExpresion .)
    LESSTHAN        reduce using rule 26 (value -> aritmeticExpresion .)
    GREATERTHAN     reduce using rule 26 (value -> aritmeticExpresion .)
    INSTANCE_VAR    reduce using rule 26 (value -> aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 26 (value -> aritmeticExpresion .)
    PRINT           reduce using rule 26 (value -> aritmeticExpresion .)
    PUTS            reduce using rule 26 (value -> aritmeticExpresion .)
    P               reduce using rule 26 (value -> aritmeticExpresion .)
    LPAREN          reduce using rule 26 (value -> aritmeticExpresion .)
    WHILE           reduce using rule 26 (value -> aritmeticExpresion .)
    CASE            reduce using rule 26 (value -> aritmeticExpresion .)
    DEF             reduce using rule 26 (value -> aritmeticExpresion .)
    LBRACKET        reduce using rule 26 (value -> aritmeticExpresion .)
    ID              reduce using rule 26 (value -> aritmeticExpresion .)
    NUMBER          reduce using rule 26 (value -> aritmeticExpresion .)
    STRING          reduce using rule 26 (value -> aritmeticExpresion .)
    BOOLEAN         reduce using rule 26 (value -> aritmeticExpresion .)
    $end            reduce using rule 26 (value -> aritmeticExpresion .)
    END             reduce using rule 26 (value -> aritmeticExpresion .)
    RBRACKET        reduce using rule 26 (value -> aritmeticExpresion .)
    RPAREN          reduce using rule 26 (value -> aritmeticExpresion .)
    AND             reduce using rule 26 (value -> aritmeticExpresion .)
    OR              reduce using rule 26 (value -> aritmeticExpresion .)
    DO              reduce using rule 26 (value -> aritmeticExpresion .)


state 50

    (27) value -> conditions .

    COMMA           reduce using rule 27 (value -> conditions .)
    PLUS            reduce using rule 27 (value -> conditions .)
    MINUS           reduce using rule 27 (value -> conditions .)
    TIMES           reduce using rule 27 (value -> conditions .)
    DIVIDE          reduce using rule 27 (value -> conditions .)
    MOD             reduce using rule 27 (value -> conditions .)
    LESSTHAN        reduce using rule 27 (value -> conditions .)
    GREATERTHAN     reduce using rule 27 (value -> conditions .)
    INSTANCE_VAR    reduce using rule 27 (value -> conditions .)
    GLOBAL_VAR      reduce using rule 27 (value -> conditions .)
    PRINT           reduce using rule 27 (value -> conditions .)
    PUTS            reduce using rule 27 (value -> conditions .)
    P               reduce using rule 27 (value -> conditions .)
    LPAREN          reduce using rule 27 (value -> conditions .)
    WHILE           reduce using rule 27 (value -> conditions .)
    CASE            reduce using rule 27 (value -> conditions .)
    DEF             reduce using rule 27 (value -> conditions .)
    LBRACKET        reduce using rule 27 (value -> conditions .)
    ID              reduce using rule 27 (value -> conditions .)
    NUMBER          reduce using rule 27 (value -> conditions .)
    STRING          reduce using rule 27 (value -> conditions .)
    BOOLEAN         reduce using rule 27 (value -> conditions .)
    $end            reduce using rule 27 (value -> conditions .)
    END             reduce using rule 27 (value -> conditions .)
    RPAREN          reduce using rule 27 (value -> conditions .)
    RBRACKET        reduce using rule 27 (value -> conditions .)
    AND             reduce using rule 27 (value -> conditions .)
    OR              reduce using rule 27 (value -> conditions .)
    DO              reduce using rule 27 (value -> conditions .)


state 51

    (31) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    LPAREN          shift and go to state 51
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    aritmeticExpresion             shift and go to state 54
    value                          shift and go to state 17
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 52

    (67) tupla -> LPAREN values . RPAREN

    RPAREN          shift and go to state 87


state 53

    (68) tupla -> LPAREN RPAREN .

    INSTANCE_VAR    reduce using rule 68 (tupla -> LPAREN RPAREN .)
    GLOBAL_VAR      reduce using rule 68 (tupla -> LPAREN RPAREN .)
    PRINT           reduce using rule 68 (tupla -> LPAREN RPAREN .)
    PUTS            reduce using rule 68 (tupla -> LPAREN RPAREN .)
    P               reduce using rule 68 (tupla -> LPAREN RPAREN .)
    LPAREN          reduce using rule 68 (tupla -> LPAREN RPAREN .)
    WHILE           reduce using rule 68 (tupla -> LPAREN RPAREN .)
    CASE            reduce using rule 68 (tupla -> LPAREN RPAREN .)
    DEF             reduce using rule 68 (tupla -> LPAREN RPAREN .)
    LBRACKET        reduce using rule 68 (tupla -> LPAREN RPAREN .)
    ID              reduce using rule 68 (tupla -> LPAREN RPAREN .)
    PLUS            reduce using rule 68 (tupla -> LPAREN RPAREN .)
    MINUS           reduce using rule 68 (tupla -> LPAREN RPAREN .)
    TIMES           reduce using rule 68 (tupla -> LPAREN RPAREN .)
    DIVIDE          reduce using rule 68 (tupla -> LPAREN RPAREN .)
    MOD             reduce using rule 68 (tupla -> LPAREN RPAREN .)
    NUMBER          reduce using rule 68 (tupla -> LPAREN RPAREN .)
    STRING          reduce using rule 68 (tupla -> LPAREN RPAREN .)
    BOOLEAN         reduce using rule 68 (tupla -> LPAREN RPAREN .)
    $end            reduce using rule 68 (tupla -> LPAREN RPAREN .)
    END             reduce using rule 68 (tupla -> LPAREN RPAREN .)


state 54

    (31) aritmeticExpresion -> LPAREN aritmeticExpresion . RPAREN
    (26) value -> aritmeticExpresion .

  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 88
    COMMA           reduce using rule 26 (value -> aritmeticExpresion .)
    PLUS            reduce using rule 26 (value -> aritmeticExpresion .)
    MINUS           reduce using rule 26 (value -> aritmeticExpresion .)
    TIMES           reduce using rule 26 (value -> aritmeticExpresion .)
    DIVIDE          reduce using rule 26 (value -> aritmeticExpresion .)
    MOD             reduce using rule 26 (value -> aritmeticExpresion .)
    LESSTHAN        reduce using rule 26 (value -> aritmeticExpresion .)
    GREATERTHAN     reduce using rule 26 (value -> aritmeticExpresion .)

  ! RPAREN          [ reduce using rule 26 (value -> aritmeticExpresion .) ]


state 55

    (57) impression -> PUTS values .

    INSTANCE_VAR    reduce using rule 57 (impression -> PUTS values .)
    GLOBAL_VAR      reduce using rule 57 (impression -> PUTS values .)
    PRINT           reduce using rule 57 (impression -> PUTS values .)
    PUTS            reduce using rule 57 (impression -> PUTS values .)
    P               reduce using rule 57 (impression -> PUTS values .)
    LPAREN          reduce using rule 57 (impression -> PUTS values .)
    WHILE           reduce using rule 57 (impression -> PUTS values .)
    CASE            reduce using rule 57 (impression -> PUTS values .)
    DEF             reduce using rule 57 (impression -> PUTS values .)
    LBRACKET        reduce using rule 57 (impression -> PUTS values .)
    ID              reduce using rule 57 (impression -> PUTS values .)
    PLUS            reduce using rule 57 (impression -> PUTS values .)
    MINUS           reduce using rule 57 (impression -> PUTS values .)
    TIMES           reduce using rule 57 (impression -> PUTS values .)
    DIVIDE          reduce using rule 57 (impression -> PUTS values .)
    MOD             reduce using rule 57 (impression -> PUTS values .)
    NUMBER          reduce using rule 57 (impression -> PUTS values .)
    STRING          reduce using rule 57 (impression -> PUTS values .)
    BOOLEAN         reduce using rule 57 (impression -> PUTS values .)
    $end            reduce using rule 57 (impression -> PUTS values .)
    END             reduce using rule 57 (impression -> PUTS values .)


state 56

    (58) impression -> PUTS LPAREN . values RPAREN
    (31) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (28) values -> . value
    (29) values -> . value COMMA values
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    LPAREN          shift and go to state 51
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    values                         shift and go to state 89
    aritmeticExpresion             shift and go to state 54
    value                          shift and go to state 48
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 57

    (59) impression -> P LPAREN . values RPAREN
    (31) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (28) values -> . value
    (29) values -> . value COMMA values
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    LPAREN          shift and go to state 51
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    values                         shift and go to state 90
    aritmeticExpresion             shift and go to state 54
    value                          shift and go to state 48
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 58

    (60) impression -> P values .

    INSTANCE_VAR    reduce using rule 60 (impression -> P values .)
    GLOBAL_VAR      reduce using rule 60 (impression -> P values .)
    PRINT           reduce using rule 60 (impression -> P values .)
    PUTS            reduce using rule 60 (impression -> P values .)
    P               reduce using rule 60 (impression -> P values .)
    LPAREN          reduce using rule 60 (impression -> P values .)
    WHILE           reduce using rule 60 (impression -> P values .)
    CASE            reduce using rule 60 (impression -> P values .)
    DEF             reduce using rule 60 (impression -> P values .)
    LBRACKET        reduce using rule 60 (impression -> P values .)
    ID              reduce using rule 60 (impression -> P values .)
    PLUS            reduce using rule 60 (impression -> P values .)
    MINUS           reduce using rule 60 (impression -> P values .)
    TIMES           reduce using rule 60 (impression -> P values .)
    DIVIDE          reduce using rule 60 (impression -> P values .)
    MOD             reduce using rule 60 (impression -> P values .)
    NUMBER          reduce using rule 60 (impression -> P values .)
    STRING          reduce using rule 60 (impression -> P values .)
    BOOLEAN         reduce using rule 60 (impression -> P values .)
    $end            reduce using rule 60 (impression -> P values .)
    END             reduce using rule 60 (impression -> P values .)


state 59

    (47) conditions -> condition conector . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN

    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    condition                      shift and go to state 24
    conditions                     shift and go to state 91
    value                          shift and go to state 63
    aritmeticExpresion             shift and go to state 49

state 60

    (41) conector -> AND .

    NUMBER          reduce using rule 41 (conector -> AND .)
    STRING          reduce using rule 41 (conector -> AND .)
    BOOLEAN         reduce using rule 41 (conector -> AND .)
    LPAREN          reduce using rule 41 (conector -> AND .)


state 61

    (42) conector -> OR .

    NUMBER          reduce using rule 42 (conector -> OR .)
    STRING          reduce using rule 42 (conector -> OR .)
    BOOLEAN         reduce using rule 42 (conector -> OR .)
    LPAREN          reduce using rule 42 (conector -> OR .)


state 62

    (66) while_loop -> WHILE condition . DO statement_list END
    (46) conditions -> condition .
    (47) conditions -> condition . conector conditions
    (41) conector -> . AND
    (42) conector -> . OR

    DO              shift and go to state 92
    LESSTHAN        reduce using rule 46 (conditions -> condition .)
    GREATERTHAN     reduce using rule 46 (conditions -> condition .)
    PLUS            reduce using rule 46 (conditions -> condition .)
    MINUS           reduce using rule 46 (conditions -> condition .)
    TIMES           reduce using rule 46 (conditions -> condition .)
    DIVIDE          reduce using rule 46 (conditions -> condition .)
    MOD             reduce using rule 46 (conditions -> condition .)
    AND             shift and go to state 60
    OR              shift and go to state 61

    conector                       shift and go to state 59

state 63

    (45) condition -> value . operComp value
    (30) aritmeticExpresion -> value . operator value
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD

    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34

    operComp                       shift and go to state 41
    operator                       shift and go to state 40

state 64

    (51) case -> CASE whens . END
    (50) whens -> whens .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 93

  ! END             [ reduce using rule 50 (whens -> whens .) ]


state 65

    (49) whens -> when .

    END             reduce using rule 49 (whens -> when .)


state 66

    (48) when -> WHEN . conditions statement_list
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN

    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    conditions                     shift and go to state 94
    condition                      shift and go to state 24
    value                          shift and go to state 63
    aritmeticExpresion             shift and go to state 49

state 67

    (52) Sfunction -> DEF ID . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement statement_list
    (4) statement -> . assign
    (5) statement -> . impression
    (6) statement -> . tupla
    (7) statement -> . conditions
    (8) statement -> . while_loop
    (9) statement -> . case
    (10) statement -> . Sfunction
    (11) statement -> . array
    (12) statement -> . p_SfunctionINV
    (13) statement -> . aritmeticExpresion
    (14) statement -> . operator
    (15) statement -> . dataIn
    (16) assign -> . INSTANCE_VAR ASSIGN value
    (17) assign -> . GLOBAL_VAR ASSIGN value
    (18) assign -> . VARIABLE ASSIGN value
    (19) assign -> . VARIABLE ASSIGN data_structure
    (20) assign -> . INSTANCE_VAR ASSIGN data_structure
    (21) assign -> . GLOBAL_VAR ASSIGN data_structure
    (55) impression -> . PRINT LPAREN values RPAREN
    (56) impression -> . PRINT values
    (57) impression -> . PUTS values
    (58) impression -> . PUTS LPAREN values RPAREN
    (59) impression -> . P LPAREN values RPAREN
    (60) impression -> . P values
    (61) impression -> . PRINT
    (62) impression -> . PUTS
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (66) while_loop -> . WHILE condition DO statement_list END
    (51) case -> . CASE whens END
    (52) Sfunction -> . DEF ID statement_list END
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (53) p_SfunctionINV -> . ID
    (54) p_SfunctionINV -> . ID LPAREN RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (63) dataIn -> . VARIABLE ASSIGN GETS
    (64) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (65) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (22) VARIABLE -> . ID
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions

    INSTANCE_VAR    shift and go to state 16
    GLOBAL_VAR      shift and go to state 18
    PRINT           shift and go to state 20
    PUTS            shift and go to state 22
    P               shift and go to state 23
    LPAREN          shift and go to state 21
    WHILE           shift and go to state 25
    CASE            shift and go to state 26
    DEF             shift and go to state 27
    LBRACKET        shift and go to state 29
    ID              shift and go to state 28
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    statement_list                 shift and go to state 95
    statement                      shift and go to state 3
    assign                         shift and go to state 4
    impression                     shift and go to state 5
    tupla                          shift and go to state 6
    conditions                     shift and go to state 7
    while_loop                     shift and go to state 8
    case                           shift and go to state 9
    Sfunction                      shift and go to state 10
    array                          shift and go to state 11
    p_SfunctionINV                 shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    value                          shift and go to state 17
    VARIABLE                       shift and go to state 19
    condition                      shift and go to state 24

state 68

    (54) p_SfunctionINV -> ID LPAREN . RPAREN

    RPAREN          shift and go to state 96


state 69

    (37) array -> LBRACKET RBRACKET .

    INSTANCE_VAR    reduce using rule 37 (array -> LBRACKET RBRACKET .)
    GLOBAL_VAR      reduce using rule 37 (array -> LBRACKET RBRACKET .)
    PRINT           reduce using rule 37 (array -> LBRACKET RBRACKET .)
    PUTS            reduce using rule 37 (array -> LBRACKET RBRACKET .)
    P               reduce using rule 37 (array -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 37 (array -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 37 (array -> LBRACKET RBRACKET .)
    CASE            reduce using rule 37 (array -> LBRACKET RBRACKET .)
    DEF             reduce using rule 37 (array -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 37 (array -> LBRACKET RBRACKET .)
    ID              reduce using rule 37 (array -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 37 (array -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 37 (array -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 37 (array -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 37 (array -> LBRACKET RBRACKET .)
    MOD             reduce using rule 37 (array -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 37 (array -> LBRACKET RBRACKET .)
    STRING          reduce using rule 37 (array -> LBRACKET RBRACKET .)
    BOOLEAN         reduce using rule 37 (array -> LBRACKET RBRACKET .)
    $end            reduce using rule 37 (array -> LBRACKET RBRACKET .)
    END             reduce using rule 37 (array -> LBRACKET RBRACKET .)


state 70

    (38) array -> LBRACKET values . RBRACKET

    RBRACKET        shift and go to state 97


state 71

    (16) assign -> INSTANCE_VAR ASSIGN value .
    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INSTANCE_VAR    reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    PRINT           reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    PUTS            reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    P               reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    LPAREN          reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    WHILE           reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    CASE            reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    DEF             reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACKET        reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    ID              reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    NUMBER          reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    STRING          reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    BOOLEAN         reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    $end            reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    END             reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

  ! PLUS            [ reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .) ]
  ! MINUS           [ reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .) ]
  ! TIMES           [ reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .) ]
  ! DIVIDE          [ reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .) ]
  ! MOD             [ reduce using rule 16 (assign -> INSTANCE_VAR ASSIGN value .) ]

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 72

    (20) assign -> INSTANCE_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    P               reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    CASE            reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DEF             reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ID              reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PLUS            reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    MINUS           reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    TIMES           reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DIVIDE          reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    MOD             reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    STRING          reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    BOOLEAN         reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    $end            reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    END             reduce using rule 20 (assign -> INSTANCE_VAR ASSIGN data_structure .)


state 73

    (64) dataIn -> INSTANCE_VAR ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PRINT           reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PUTS            reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    P               reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LPAREN          reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    WHILE           reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    CASE            reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    DEF             reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LBRACKET        reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ID              reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PLUS            reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    MINUS           reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    TIMES           reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    DIVIDE          reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    MOD             reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    NUMBER          reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    STRING          reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    BOOLEAN         reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    $end            reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    END             reduce using rule 64 (dataIn -> INSTANCE_VAR ASSIGN GETS .)


state 74

    (39) data_structure -> array .

    INSTANCE_VAR    reduce using rule 39 (data_structure -> array .)
    GLOBAL_VAR      reduce using rule 39 (data_structure -> array .)
    PRINT           reduce using rule 39 (data_structure -> array .)
    PUTS            reduce using rule 39 (data_structure -> array .)
    P               reduce using rule 39 (data_structure -> array .)
    LPAREN          reduce using rule 39 (data_structure -> array .)
    WHILE           reduce using rule 39 (data_structure -> array .)
    CASE            reduce using rule 39 (data_structure -> array .)
    DEF             reduce using rule 39 (data_structure -> array .)
    LBRACKET        reduce using rule 39 (data_structure -> array .)
    ID              reduce using rule 39 (data_structure -> array .)
    PLUS            reduce using rule 39 (data_structure -> array .)
    MINUS           reduce using rule 39 (data_structure -> array .)
    TIMES           reduce using rule 39 (data_structure -> array .)
    DIVIDE          reduce using rule 39 (data_structure -> array .)
    MOD             reduce using rule 39 (data_structure -> array .)
    NUMBER          reduce using rule 39 (data_structure -> array .)
    STRING          reduce using rule 39 (data_structure -> array .)
    BOOLEAN         reduce using rule 39 (data_structure -> array .)
    $end            reduce using rule 39 (data_structure -> array .)
    END             reduce using rule 39 (data_structure -> array .)


state 75

    (40) data_structure -> tupla .

    INSTANCE_VAR    reduce using rule 40 (data_structure -> tupla .)
    GLOBAL_VAR      reduce using rule 40 (data_structure -> tupla .)
    PRINT           reduce using rule 40 (data_structure -> tupla .)
    PUTS            reduce using rule 40 (data_structure -> tupla .)
    P               reduce using rule 40 (data_structure -> tupla .)
    LPAREN          reduce using rule 40 (data_structure -> tupla .)
    WHILE           reduce using rule 40 (data_structure -> tupla .)
    CASE            reduce using rule 40 (data_structure -> tupla .)
    DEF             reduce using rule 40 (data_structure -> tupla .)
    LBRACKET        reduce using rule 40 (data_structure -> tupla .)
    ID              reduce using rule 40 (data_structure -> tupla .)
    PLUS            reduce using rule 40 (data_structure -> tupla .)
    MINUS           reduce using rule 40 (data_structure -> tupla .)
    TIMES           reduce using rule 40 (data_structure -> tupla .)
    DIVIDE          reduce using rule 40 (data_structure -> tupla .)
    MOD             reduce using rule 40 (data_structure -> tupla .)
    NUMBER          reduce using rule 40 (data_structure -> tupla .)
    STRING          reduce using rule 40 (data_structure -> tupla .)
    BOOLEAN         reduce using rule 40 (data_structure -> tupla .)
    $end            reduce using rule 40 (data_structure -> tupla .)
    END             reduce using rule 40 (data_structure -> tupla .)


state 76

    (31) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (67) tupla -> LPAREN . values RPAREN
    (68) tupla -> LPAREN . RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (28) values -> . value
    (29) values -> . value COMMA values
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    RPAREN          shift and go to state 53
    LPAREN          shift and go to state 51
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    aritmeticExpresion             shift and go to state 54
    values                         shift and go to state 52
    value                          shift and go to state 98
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 77

    (30) aritmeticExpresion -> value operator value .
    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
    INSTANCE_VAR    reduce using rule 30 (aritmeticExpresion -> value operator value .)
    GLOBAL_VAR      reduce using rule 30 (aritmeticExpresion -> value operator value .)
    PRINT           reduce using rule 30 (aritmeticExpresion -> value operator value .)
    PUTS            reduce using rule 30 (aritmeticExpresion -> value operator value .)
    P               reduce using rule 30 (aritmeticExpresion -> value operator value .)
    LPAREN          reduce using rule 30 (aritmeticExpresion -> value operator value .)
    WHILE           reduce using rule 30 (aritmeticExpresion -> value operator value .)
    CASE            reduce using rule 30 (aritmeticExpresion -> value operator value .)
    DEF             reduce using rule 30 (aritmeticExpresion -> value operator value .)
    LBRACKET        reduce using rule 30 (aritmeticExpresion -> value operator value .)
    ID              reduce using rule 30 (aritmeticExpresion -> value operator value .)
    NUMBER          reduce using rule 30 (aritmeticExpresion -> value operator value .)
    STRING          reduce using rule 30 (aritmeticExpresion -> value operator value .)
    BOOLEAN         reduce using rule 30 (aritmeticExpresion -> value operator value .)
    $end            reduce using rule 30 (aritmeticExpresion -> value operator value .)
    END             reduce using rule 30 (aritmeticExpresion -> value operator value .)
    COMMA           reduce using rule 30 (aritmeticExpresion -> value operator value .)
    RPAREN          reduce using rule 30 (aritmeticExpresion -> value operator value .)
    RBRACKET        reduce using rule 30 (aritmeticExpresion -> value operator value .)
    AND             reduce using rule 30 (aritmeticExpresion -> value operator value .)
    OR              reduce using rule 30 (aritmeticExpresion -> value operator value .)
    DO              reduce using rule 30 (aritmeticExpresion -> value operator value .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

  ! PLUS            [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]
  ! MINUS           [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]
  ! TIMES           [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]
  ! DIVIDE          [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]
  ! MOD             [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]
  ! LESSTHAN        [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]
  ! GREATERTHAN     [ reduce using rule 30 (aritmeticExpresion -> value operator value .) ]

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 78

    (45) condition -> value operComp value .
    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LESSTHAN resolved as shift
  ! shift/reduce conflict for GREATERTHAN resolved as shift
    AND             reduce using rule 45 (condition -> value operComp value .)
    OR              reduce using rule 45 (condition -> value operComp value .)
    INSTANCE_VAR    reduce using rule 45 (condition -> value operComp value .)
    GLOBAL_VAR      reduce using rule 45 (condition -> value operComp value .)
    PRINT           reduce using rule 45 (condition -> value operComp value .)
    PUTS            reduce using rule 45 (condition -> value operComp value .)
    P               reduce using rule 45 (condition -> value operComp value .)
    LPAREN          reduce using rule 45 (condition -> value operComp value .)
    WHILE           reduce using rule 45 (condition -> value operComp value .)
    CASE            reduce using rule 45 (condition -> value operComp value .)
    DEF             reduce using rule 45 (condition -> value operComp value .)
    LBRACKET        reduce using rule 45 (condition -> value operComp value .)
    ID              reduce using rule 45 (condition -> value operComp value .)
    NUMBER          reduce using rule 45 (condition -> value operComp value .)
    STRING          reduce using rule 45 (condition -> value operComp value .)
    BOOLEAN         reduce using rule 45 (condition -> value operComp value .)
    $end            reduce using rule 45 (condition -> value operComp value .)
    END             reduce using rule 45 (condition -> value operComp value .)
    COMMA           reduce using rule 45 (condition -> value operComp value .)
    RPAREN          reduce using rule 45 (condition -> value operComp value .)
    DO              reduce using rule 45 (condition -> value operComp value .)
    RBRACKET        reduce using rule 45 (condition -> value operComp value .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

  ! PLUS            [ reduce using rule 45 (condition -> value operComp value .) ]
  ! MINUS           [ reduce using rule 45 (condition -> value operComp value .) ]
  ! TIMES           [ reduce using rule 45 (condition -> value operComp value .) ]
  ! DIVIDE          [ reduce using rule 45 (condition -> value operComp value .) ]
  ! MOD             [ reduce using rule 45 (condition -> value operComp value .) ]
  ! LESSTHAN        [ reduce using rule 45 (condition -> value operComp value .) ]
  ! GREATERTHAN     [ reduce using rule 45 (condition -> value operComp value .) ]

    operComp                       shift and go to state 41
    operator                       shift and go to state 40

state 79

    (17) assign -> GLOBAL_VAR ASSIGN value .
    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INSTANCE_VAR    reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    PRINT           reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    PUTS            reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    P               reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    LPAREN          reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    WHILE           reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    CASE            reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    DEF             reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACKET        reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    ID              reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    NUMBER          reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    STRING          reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    BOOLEAN         reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    $end            reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    END             reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

  ! PLUS            [ reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .) ]
  ! MINUS           [ reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .) ]
  ! TIMES           [ reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .) ]
  ! DIVIDE          [ reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .) ]
  ! MOD             [ reduce using rule 17 (assign -> GLOBAL_VAR ASSIGN value .) ]

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 80

    (21) assign -> GLOBAL_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    P               reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    CASE            reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DEF             reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ID              reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PLUS            reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    MINUS           reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    TIMES           reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DIVIDE          reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    MOD             reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    STRING          reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    BOOLEAN         reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    $end            reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    END             reduce using rule 21 (assign -> GLOBAL_VAR ASSIGN data_structure .)


state 81

    (65) dataIn -> GLOBAL_VAR ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PRINT           reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PUTS            reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    P               reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LPAREN          reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    WHILE           reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    CASE            reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    DEF             reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LBRACKET        reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ID              reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PLUS            reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    MINUS           reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    TIMES           reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    DIVIDE          reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    MOD             reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    NUMBER          reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    STRING          reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    BOOLEAN         reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    $end            reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    END             reduce using rule 65 (dataIn -> GLOBAL_VAR ASSIGN GETS .)


state 82

    (18) assign -> VARIABLE ASSIGN value .
    (30) aritmeticExpresion -> value . operator value
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INSTANCE_VAR    reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    GLOBAL_VAR      reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    PRINT           reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    PUTS            reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    P               reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    LPAREN          reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    WHILE           reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    CASE            reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    DEF             reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    LBRACKET        reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    ID              reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    NUMBER          reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    STRING          reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    BOOLEAN         reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    $end            reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    END             reduce using rule 18 (assign -> VARIABLE ASSIGN value .)
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

  ! PLUS            [ reduce using rule 18 (assign -> VARIABLE ASSIGN value .) ]
  ! MINUS           [ reduce using rule 18 (assign -> VARIABLE ASSIGN value .) ]
  ! TIMES           [ reduce using rule 18 (assign -> VARIABLE ASSIGN value .) ]
  ! DIVIDE          [ reduce using rule 18 (assign -> VARIABLE ASSIGN value .) ]
  ! MOD             [ reduce using rule 18 (assign -> VARIABLE ASSIGN value .) ]

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 83

    (19) assign -> VARIABLE ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    PRINT           reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    PUTS            reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    P               reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    LPAREN          reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    WHILE           reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    CASE            reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    DEF             reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    LBRACKET        reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    ID              reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    PLUS            reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    MINUS           reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    TIMES           reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    DIVIDE          reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    MOD             reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    NUMBER          reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    STRING          reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    BOOLEAN         reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    $end            reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)
    END             reduce using rule 19 (assign -> VARIABLE ASSIGN data_structure .)


state 84

    (63) dataIn -> VARIABLE ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    PRINT           reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    PUTS            reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    P               reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    LPAREN          reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    WHILE           reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    CASE            reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    DEF             reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    LBRACKET        reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    ID              reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    PLUS            reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    MINUS           reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    TIMES           reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    DIVIDE          reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    MOD             reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    NUMBER          reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    STRING          reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    BOOLEAN         reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    $end            reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)
    END             reduce using rule 63 (dataIn -> VARIABLE ASSIGN GETS .)


state 85

    (55) impression -> PRINT LPAREN values . RPAREN

    RPAREN          shift and go to state 99


state 86

    (29) values -> value COMMA . values
    (28) values -> . value
    (29) values -> . value COMMA values
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (45) condition -> . value operComp value

    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37
    LPAREN          shift and go to state 51

    value                          shift and go to state 48
    values                         shift and go to state 100
    aritmeticExpresion             shift and go to state 49
    conditions                     shift and go to state 50
    condition                      shift and go to state 24

state 87

    (67) tupla -> LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    PRINT           reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    PUTS            reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    P               reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    LPAREN          reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    WHILE           reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    CASE            reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    DEF             reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    LBRACKET        reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    ID              reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    PLUS            reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    MINUS           reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    TIMES           reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    DIVIDE          reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    MOD             reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    NUMBER          reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    STRING          reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    $end            reduce using rule 67 (tupla -> LPAREN values RPAREN .)
    END             reduce using rule 67 (tupla -> LPAREN values RPAREN .)


state 88

    (31) aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .

    INSTANCE_VAR    reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    GLOBAL_VAR      reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    PRINT           reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    PUTS            reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    P               reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    LPAREN          reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    WHILE           reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    CASE            reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    DEF             reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    LBRACKET        reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    ID              reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    PLUS            reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    MINUS           reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    TIMES           reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    DIVIDE          reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    MOD             reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    NUMBER          reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    STRING          reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    BOOLEAN         reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    $end            reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    LESSTHAN        reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    GREATERTHAN     reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    END             reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    COMMA           reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    RPAREN          reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    RBRACKET        reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    AND             reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    OR              reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    DO              reduce using rule 31 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)


state 89

    (58) impression -> PUTS LPAREN values . RPAREN

    RPAREN          shift and go to state 101


state 90

    (59) impression -> P LPAREN values . RPAREN

    RPAREN          shift and go to state 102


state 91

    (47) conditions -> condition conector conditions .
    (27) value -> conditions .

  ! reduce/reduce conflict for LESSTHAN resolved using rule 27 (value -> conditions .)
  ! reduce/reduce conflict for GREATERTHAN resolved using rule 27 (value -> conditions .)
  ! reduce/reduce conflict for PLUS resolved using rule 27 (value -> conditions .)
  ! reduce/reduce conflict for MINUS resolved using rule 27 (value -> conditions .)
  ! reduce/reduce conflict for TIMES resolved using rule 27 (value -> conditions .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 27 (value -> conditions .)
  ! reduce/reduce conflict for MOD resolved using rule 27 (value -> conditions .)
    INSTANCE_VAR    reduce using rule 47 (conditions -> condition conector conditions .)
    GLOBAL_VAR      reduce using rule 47 (conditions -> condition conector conditions .)
    PRINT           reduce using rule 47 (conditions -> condition conector conditions .)
    PUTS            reduce using rule 47 (conditions -> condition conector conditions .)
    P               reduce using rule 47 (conditions -> condition conector conditions .)
    LPAREN          reduce using rule 47 (conditions -> condition conector conditions .)
    WHILE           reduce using rule 47 (conditions -> condition conector conditions .)
    CASE            reduce using rule 47 (conditions -> condition conector conditions .)
    DEF             reduce using rule 47 (conditions -> condition conector conditions .)
    LBRACKET        reduce using rule 47 (conditions -> condition conector conditions .)
    ID              reduce using rule 47 (conditions -> condition conector conditions .)
    NUMBER          reduce using rule 47 (conditions -> condition conector conditions .)
    STRING          reduce using rule 47 (conditions -> condition conector conditions .)
    BOOLEAN         reduce using rule 47 (conditions -> condition conector conditions .)
    $end            reduce using rule 47 (conditions -> condition conector conditions .)
    END             reduce using rule 47 (conditions -> condition conector conditions .)
    COMMA           reduce using rule 47 (conditions -> condition conector conditions .)
    RPAREN          reduce using rule 47 (conditions -> condition conector conditions .)
    RBRACKET        reduce using rule 47 (conditions -> condition conector conditions .)
    AND             reduce using rule 47 (conditions -> condition conector conditions .)
    OR              reduce using rule 47 (conditions -> condition conector conditions .)
    DO              reduce using rule 47 (conditions -> condition conector conditions .)
    LESSTHAN        reduce using rule 27 (value -> conditions .)
    GREATERTHAN     reduce using rule 27 (value -> conditions .)
    PLUS            reduce using rule 27 (value -> conditions .)
    MINUS           reduce using rule 27 (value -> conditions .)
    TIMES           reduce using rule 27 (value -> conditions .)
    DIVIDE          reduce using rule 27 (value -> conditions .)
    MOD             reduce using rule 27 (value -> conditions .)

  ! PLUS            [ reduce using rule 47 (conditions -> condition conector conditions .) ]
  ! MINUS           [ reduce using rule 47 (conditions -> condition conector conditions .) ]
  ! TIMES           [ reduce using rule 47 (conditions -> condition conector conditions .) ]
  ! DIVIDE          [ reduce using rule 47 (conditions -> condition conector conditions .) ]
  ! MOD             [ reduce using rule 47 (conditions -> condition conector conditions .) ]
  ! LESSTHAN        [ reduce using rule 47 (conditions -> condition conector conditions .) ]
  ! GREATERTHAN     [ reduce using rule 47 (conditions -> condition conector conditions .) ]


state 92

    (66) while_loop -> WHILE condition DO . statement_list END
    (2) statement_list -> . statement
    (3) statement_list -> . statement statement_list
    (4) statement -> . assign
    (5) statement -> . impression
    (6) statement -> . tupla
    (7) statement -> . conditions
    (8) statement -> . while_loop
    (9) statement -> . case
    (10) statement -> . Sfunction
    (11) statement -> . array
    (12) statement -> . p_SfunctionINV
    (13) statement -> . aritmeticExpresion
    (14) statement -> . operator
    (15) statement -> . dataIn
    (16) assign -> . INSTANCE_VAR ASSIGN value
    (17) assign -> . GLOBAL_VAR ASSIGN value
    (18) assign -> . VARIABLE ASSIGN value
    (19) assign -> . VARIABLE ASSIGN data_structure
    (20) assign -> . INSTANCE_VAR ASSIGN data_structure
    (21) assign -> . GLOBAL_VAR ASSIGN data_structure
    (55) impression -> . PRINT LPAREN values RPAREN
    (56) impression -> . PRINT values
    (57) impression -> . PUTS values
    (58) impression -> . PUTS LPAREN values RPAREN
    (59) impression -> . P LPAREN values RPAREN
    (60) impression -> . P values
    (61) impression -> . PRINT
    (62) impression -> . PUTS
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (66) while_loop -> . WHILE condition DO statement_list END
    (51) case -> . CASE whens END
    (52) Sfunction -> . DEF ID statement_list END
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (53) p_SfunctionINV -> . ID
    (54) p_SfunctionINV -> . ID LPAREN RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (63) dataIn -> . VARIABLE ASSIGN GETS
    (64) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (65) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (22) VARIABLE -> . ID
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions

    INSTANCE_VAR    shift and go to state 16
    GLOBAL_VAR      shift and go to state 18
    PRINT           shift and go to state 20
    PUTS            shift and go to state 22
    P               shift and go to state 23
    LPAREN          shift and go to state 21
    WHILE           shift and go to state 25
    CASE            shift and go to state 26
    DEF             shift and go to state 27
    LBRACKET        shift and go to state 29
    ID              shift and go to state 28
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

    condition                      shift and go to state 24
    statement_list                 shift and go to state 103
    statement                      shift and go to state 3
    assign                         shift and go to state 4
    impression                     shift and go to state 5
    tupla                          shift and go to state 6
    conditions                     shift and go to state 7
    while_loop                     shift and go to state 8
    case                           shift and go to state 9
    Sfunction                      shift and go to state 10
    array                          shift and go to state 11
    p_SfunctionINV                 shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    value                          shift and go to state 17
    VARIABLE                       shift and go to state 19

state 93

    (51) case -> CASE whens END .

    INSTANCE_VAR    reduce using rule 51 (case -> CASE whens END .)
    GLOBAL_VAR      reduce using rule 51 (case -> CASE whens END .)
    PRINT           reduce using rule 51 (case -> CASE whens END .)
    PUTS            reduce using rule 51 (case -> CASE whens END .)
    P               reduce using rule 51 (case -> CASE whens END .)
    LPAREN          reduce using rule 51 (case -> CASE whens END .)
    WHILE           reduce using rule 51 (case -> CASE whens END .)
    CASE            reduce using rule 51 (case -> CASE whens END .)
    DEF             reduce using rule 51 (case -> CASE whens END .)
    LBRACKET        reduce using rule 51 (case -> CASE whens END .)
    ID              reduce using rule 51 (case -> CASE whens END .)
    PLUS            reduce using rule 51 (case -> CASE whens END .)
    MINUS           reduce using rule 51 (case -> CASE whens END .)
    TIMES           reduce using rule 51 (case -> CASE whens END .)
    DIVIDE          reduce using rule 51 (case -> CASE whens END .)
    MOD             reduce using rule 51 (case -> CASE whens END .)
    NUMBER          reduce using rule 51 (case -> CASE whens END .)
    STRING          reduce using rule 51 (case -> CASE whens END .)
    BOOLEAN         reduce using rule 51 (case -> CASE whens END .)
    $end            reduce using rule 51 (case -> CASE whens END .)
    END             reduce using rule 51 (case -> CASE whens END .)


state 94

    (48) when -> WHEN conditions . statement_list
    (27) value -> conditions .
    (2) statement_list -> . statement
    (3) statement_list -> . statement statement_list
    (4) statement -> . assign
    (5) statement -> . impression
    (6) statement -> . tupla
    (7) statement -> . conditions
    (8) statement -> . while_loop
    (9) statement -> . case
    (10) statement -> . Sfunction
    (11) statement -> . array
    (12) statement -> . p_SfunctionINV
    (13) statement -> . aritmeticExpresion
    (14) statement -> . operator
    (15) statement -> . dataIn
    (16) assign -> . INSTANCE_VAR ASSIGN value
    (17) assign -> . GLOBAL_VAR ASSIGN value
    (18) assign -> . VARIABLE ASSIGN value
    (19) assign -> . VARIABLE ASSIGN data_structure
    (20) assign -> . INSTANCE_VAR ASSIGN data_structure
    (21) assign -> . GLOBAL_VAR ASSIGN data_structure
    (55) impression -> . PRINT LPAREN values RPAREN
    (56) impression -> . PRINT values
    (57) impression -> . PUTS values
    (58) impression -> . PUTS LPAREN values RPAREN
    (59) impression -> . P LPAREN values RPAREN
    (60) impression -> . P values
    (61) impression -> . PRINT
    (62) impression -> . PUTS
    (67) tupla -> . LPAREN values RPAREN
    (68) tupla -> . LPAREN RPAREN
    (46) conditions -> . condition
    (47) conditions -> . condition conector conditions
    (66) while_loop -> . WHILE condition DO statement_list END
    (51) case -> . CASE whens END
    (52) Sfunction -> . DEF ID statement_list END
    (37) array -> . LBRACKET RBRACKET
    (38) array -> . LBRACKET values RBRACKET
    (53) p_SfunctionINV -> . ID
    (54) p_SfunctionINV -> . ID LPAREN RPAREN
    (30) aritmeticExpresion -> . value operator value
    (31) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (63) dataIn -> . VARIABLE ASSIGN GETS
    (64) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (65) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (22) VARIABLE -> . ID
    (45) condition -> . value operComp value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . BOOLEAN
    (26) value -> . aritmeticExpresion
    (27) value -> . conditions

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LESSTHAN        reduce using rule 27 (value -> conditions .)
    GREATERTHAN     reduce using rule 27 (value -> conditions .)
    INSTANCE_VAR    shift and go to state 16
    GLOBAL_VAR      shift and go to state 18
    PRINT           shift and go to state 20
    PUTS            shift and go to state 22
    P               shift and go to state 23
    LPAREN          shift and go to state 21
    WHILE           shift and go to state 25
    CASE            shift and go to state 26
    DEF             shift and go to state 27
    LBRACKET        shift and go to state 29
    ID              shift and go to state 28
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    NUMBER          shift and go to state 35
    STRING          shift and go to state 36
    BOOLEAN         shift and go to state 37

  ! PLUS            [ reduce using rule 27 (value -> conditions .) ]
  ! MINUS           [ reduce using rule 27 (value -> conditions .) ]
  ! TIMES           [ reduce using rule 27 (value -> conditions .) ]
  ! DIVIDE          [ reduce using rule 27 (value -> conditions .) ]
  ! MOD             [ reduce using rule 27 (value -> conditions .) ]

    conditions                     shift and go to state 7
    statement_list                 shift and go to state 104
    statement                      shift and go to state 3
    assign                         shift and go to state 4
    impression                     shift and go to state 5
    tupla                          shift and go to state 6
    while_loop                     shift and go to state 8
    case                           shift and go to state 9
    Sfunction                      shift and go to state 10
    array                          shift and go to state 11
    p_SfunctionINV                 shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    value                          shift and go to state 17
    VARIABLE                       shift and go to state 19
    condition                      shift and go to state 24

state 95

    (52) Sfunction -> DEF ID statement_list . END

    END             shift and go to state 105


state 96

    (54) p_SfunctionINV -> ID LPAREN RPAREN .

    INSTANCE_VAR    reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    GLOBAL_VAR      reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    P               reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    CASE            reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    DEF             reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    ID              reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    MOD             reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    STRING          reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    BOOLEAN         reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    $end            reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)
    END             reduce using rule 54 (p_SfunctionINV -> ID LPAREN RPAREN .)


state 97

    (38) array -> LBRACKET values RBRACKET .

    INSTANCE_VAR    reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    GLOBAL_VAR      reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    PRINT           reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    PUTS            reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    P               reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    LPAREN          reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    WHILE           reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    CASE            reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    DEF             reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    LBRACKET        reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    ID              reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    PLUS            reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    MINUS           reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    TIMES           reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    DIVIDE          reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    MOD             reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    NUMBER          reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    STRING          reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    BOOLEAN         reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    $end            reduce using rule 38 (array -> LBRACKET values RBRACKET .)
    END             reduce using rule 38 (array -> LBRACKET values RBRACKET .)


state 98

    (30) aritmeticExpresion -> value . operator value
    (28) values -> value .
    (29) values -> value . COMMA values
    (45) condition -> value . operComp value
    (32) operator -> . PLUS
    (33) operator -> . MINUS
    (34) operator -> . TIMES
    (35) operator -> . DIVIDE
    (36) operator -> . MOD
    (43) operComp -> . LESSTHAN
    (44) operComp -> . GREATERTHAN

    RPAREN          reduce using rule 28 (values -> value .)
    COMMA           shift and go to state 86
    PLUS            shift and go to state 30
    MINUS           shift and go to state 31
    TIMES           shift and go to state 32
    DIVIDE          shift and go to state 33
    MOD             shift and go to state 34
    LESSTHAN        shift and go to state 42
    GREATERTHAN     shift and go to state 43

    operator                       shift and go to state 40
    operComp                       shift and go to state 41

state 99

    (55) impression -> PRINT LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    PRINT           reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    PUTS            reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    P               reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    LPAREN          reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    WHILE           reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    CASE            reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    DEF             reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    LBRACKET        reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    ID              reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    PLUS            reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    MINUS           reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    TIMES           reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    DIVIDE          reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    MOD             reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    NUMBER          reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    STRING          reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    $end            reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)
    END             reduce using rule 55 (impression -> PRINT LPAREN values RPAREN .)


state 100

    (29) values -> value COMMA values .

    INSTANCE_VAR    reduce using rule 29 (values -> value COMMA values .)
    GLOBAL_VAR      reduce using rule 29 (values -> value COMMA values .)
    PRINT           reduce using rule 29 (values -> value COMMA values .)
    PUTS            reduce using rule 29 (values -> value COMMA values .)
    P               reduce using rule 29 (values -> value COMMA values .)
    LPAREN          reduce using rule 29 (values -> value COMMA values .)
    WHILE           reduce using rule 29 (values -> value COMMA values .)
    CASE            reduce using rule 29 (values -> value COMMA values .)
    DEF             reduce using rule 29 (values -> value COMMA values .)
    LBRACKET        reduce using rule 29 (values -> value COMMA values .)
    ID              reduce using rule 29 (values -> value COMMA values .)
    PLUS            reduce using rule 29 (values -> value COMMA values .)
    MINUS           reduce using rule 29 (values -> value COMMA values .)
    TIMES           reduce using rule 29 (values -> value COMMA values .)
    DIVIDE          reduce using rule 29 (values -> value COMMA values .)
    MOD             reduce using rule 29 (values -> value COMMA values .)
    NUMBER          reduce using rule 29 (values -> value COMMA values .)
    STRING          reduce using rule 29 (values -> value COMMA values .)
    BOOLEAN         reduce using rule 29 (values -> value COMMA values .)
    $end            reduce using rule 29 (values -> value COMMA values .)
    END             reduce using rule 29 (values -> value COMMA values .)
    RPAREN          reduce using rule 29 (values -> value COMMA values .)
    RBRACKET        reduce using rule 29 (values -> value COMMA values .)


state 101

    (58) impression -> PUTS LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    PRINT           reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    PUTS            reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    P               reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    LPAREN          reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    WHILE           reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    CASE            reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    DEF             reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    LBRACKET        reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    ID              reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    PLUS            reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    MINUS           reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    TIMES           reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    DIVIDE          reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    MOD             reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    NUMBER          reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    STRING          reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    $end            reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)
    END             reduce using rule 58 (impression -> PUTS LPAREN values RPAREN .)


state 102

    (59) impression -> P LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    PRINT           reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    PUTS            reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    P               reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    LPAREN          reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    WHILE           reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    CASE            reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    DEF             reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    LBRACKET        reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    ID              reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    PLUS            reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    MINUS           reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    TIMES           reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    DIVIDE          reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    MOD             reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    NUMBER          reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    STRING          reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    BOOLEAN         reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    $end            reduce using rule 59 (impression -> P LPAREN values RPAREN .)
    END             reduce using rule 59 (impression -> P LPAREN values RPAREN .)


state 103

    (66) while_loop -> WHILE condition DO statement_list . END

    END             shift and go to state 106


state 104

    (48) when -> WHEN conditions statement_list .

    END             reduce using rule 48 (when -> WHEN conditions statement_list .)


state 105

    (52) Sfunction -> DEF ID statement_list END .

    INSTANCE_VAR    reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    GLOBAL_VAR      reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    PRINT           reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    PUTS            reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    P               reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    LPAREN          reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    WHILE           reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    CASE            reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    DEF             reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    LBRACKET        reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    ID              reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    PLUS            reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    MINUS           reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    TIMES           reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    DIVIDE          reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    MOD             reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    NUMBER          reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    STRING          reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    BOOLEAN         reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    $end            reduce using rule 52 (Sfunction -> DEF ID statement_list END .)
    END             reduce using rule 52 (Sfunction -> DEF ID statement_list END .)


state 106

    (66) while_loop -> WHILE condition DO statement_list END .

    INSTANCE_VAR    reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    GLOBAL_VAR      reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    PRINT           reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    PUTS            reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    P               reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    LPAREN          reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    WHILE           reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    CASE            reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    DEF             reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    LBRACKET        reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    ID              reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    PLUS            reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    MINUS           reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    TIMES           reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    DIVIDE          reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    MOD             reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    NUMBER          reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    STRING          reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    BOOLEAN         reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    $end            reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)
    END             reduce using rule 66 (while_loop -> WHILE condition DO statement_list END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LPAREN in state 20 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 20 resolved as shift
WARNING: shift/reduce conflict for STRING in state 20 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 20 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 22 resolved as shift
WARNING: shift/reduce conflict for STRING in state 22 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 22 resolved as shift
WARNING: shift/reduce conflict for AND in state 24 resolved as shift
WARNING: shift/reduce conflict for OR in state 24 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 28 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 48 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 48 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 48 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 48 resolved as shift
WARNING: shift/reduce conflict for MOD in state 48 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for END in state 64 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 71 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 71 resolved as shift
WARNING: shift/reduce conflict for MOD in state 71 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 77 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 77 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 77 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 77 resolved as shift
WARNING: shift/reduce conflict for MOD in state 77 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 77 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 77 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 78 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 78 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 78 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 78 resolved as shift
WARNING: shift/reduce conflict for MOD in state 78 resolved as shift
WARNING: shift/reduce conflict for LESSTHAN in state 78 resolved as shift
WARNING: shift/reduce conflict for GREATERTHAN in state 78 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 79 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 79 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 79 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 79 resolved as shift
WARNING: shift/reduce conflict for MOD in state 79 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 82 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 82 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 82 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 82 resolved as shift
WARNING: shift/reduce conflict for MOD in state 82 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 94 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 94 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 94 resolved as shift
WARNING: shift/reduce conflict for MOD in state 94 resolved as shift
WARNING: reduce/reduce conflict in state 7 resolved using rule (statement -> conditions)
WARNING: rejected rule (value -> conditions) in state 7
WARNING: reduce/reduce conflict in state 13 resolved using rule (statement -> aritmeticExpresion)
WARNING: rejected rule (value -> aritmeticExpresion) in state 13
WARNING: reduce/reduce conflict in state 91 resolved using rule (value -> conditions)
WARNING: rejected rule (conditions -> condition conector conditions) in state 91
