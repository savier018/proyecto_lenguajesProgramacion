Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    BREAK
    CLASS
    CONST
    DAPOSTROPHE
    DOT
    FALSE
    FOR
    IN
    NIL
    NONE
    NOT
    RETURN
    SEMICOLON
    TRUE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> assign
Rule 2     codigo -> impression
Rule 3     codigo -> tupla
Rule 4     codigo -> conditions
Rule 5     codigo -> while_loop
Rule 6     codigo -> case
Rule 7     codigo -> Sfunction
Rule 8     codigo -> array
Rule 9     codigo -> p_SfunctionINV
Rule 10    codigo -> p_function_one_parameter
Rule 11    codigo -> p_function_two_parameter
Rule 12    codigo -> aritmeticExpresion
Rule 13    codigo -> operator
Rule 14    codigo -> dataIn
Rule 15    codigo -> control_structures
Rule 16    codigo -> hash
Rule 17    value -> NUMBER
Rule 18    value -> STRING
Rule 19    value -> BOOLEAN
Rule 20    value -> INSTANCE_VAR
Rule 21    value -> GLOBAL_VAR
Rule 22    value -> ID
Rule 23    values -> value
Rule 24    values -> value COMMA values
Rule 25    assign -> INSTANCE_VAR ASSIGN value
Rule 26    assign -> GLOBAL_VAR ASSIGN value
Rule 27    assign -> ID ASSIGN value
Rule 28    assign -> INSTANCE_VAR ASSIGN data_structure
Rule 29    assign -> GLOBAL_VAR ASSIGN data_structure
Rule 30    assign -> ID ASSIGN data_structure
Rule 31    aritmeticExpresion -> value operator value
Rule 32    aritmeticExpresion -> aritmeticExpresion operator value
Rule 33    operator -> PLUS
Rule 34    operator -> MINUS
Rule 35    operator -> TIMES
Rule 36    operator -> DIVIDE
Rule 37    operator -> MOD
Rule 38    data_structure -> array
Rule 39    data_structure -> tupla
Rule 40    data_structure -> hash
Rule 41    array -> LBRACKET RBRACKET
Rule 42    array -> LBRACKET values RBRACKET
Rule 43    hash -> LBRACE RBRACE
Rule 44    hash -> LBRACE hash_contents RBRACE
Rule 45    hash_contents -> hash_pair
Rule 46    hash_contents -> hash_contents COMMA hash_pair
Rule 47    hash_pair -> value COLON value
Rule 48    conditions -> condition
Rule 49    conditions -> condition conector conditions
Rule 50    condition -> value operComp value
Rule 51    conector -> AND
Rule 52    conector -> OR
Rule 53    operComp -> LESSTHAN
Rule 54    operComp -> GREATERTHAN
Rule 55    operComp -> GREATEROREQUAL
Rule 56    operComp -> LESSOREQUAL
Rule 57    operComp -> EQUAL
Rule 58    operComp -> NOTEQUAL
Rule 59    control_structures -> if_block
Rule 60    control_structures -> if_block elsif_blocks
Rule 61    control_structures -> if_block elsif_blocks else_block
Rule 62    control_structures -> if_block else_block
Rule 63    if_block -> IF condition codigo END
Rule 64    elsif_blocks -> elsif_block
Rule 65    elsif_blocks -> elsif_blocks elsif_block
Rule 66    elsif_block -> ELSIF condition codigo
Rule 67    else_block -> ELSE codigo
Rule 68    when -> WHEN conditions codigo
Rule 69    whens -> when
Rule 70    whens -> whens
Rule 71    case -> CASE whens END
Rule 72    Sfunction -> DEF ID codigo END
Rule 73    p_SfunctionINV -> ID
Rule 74    p_SfunctionINV -> ID LPAREN RPAREN
Rule 75    p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END
Rule 76    p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END
Rule 77    impression -> PRINT LPAREN values RPAREN
Rule 78    impression -> PRINT values
Rule 79    impression -> PUTS values
Rule 80    impression -> PUTS LPAREN values RPAREN
Rule 81    impression -> P LPAREN values RPAREN
Rule 82    impression -> P values
Rule 83    impression -> PRINT
Rule 84    impression -> PUTS
Rule 85    dataIn -> ID ASSIGN GETS
Rule 86    dataIn -> INSTANCE_VAR ASSIGN GETS
Rule 87    dataIn -> GLOBAL_VAR ASSIGN GETS
Rule 88    while_loop -> WHILE condition DO codigo END
Rule 89    tupla -> LPAREN values RPAREN

Terminals, with rules where they appear

AND                  : 51
APOSTROPHE           : 
ASSIGN               : 25 26 27 28 29 30 85 86 87
BOOLEAN              : 19
BREAK                : 
CASE                 : 71
CLASS                : 
COLON                : 47
COMMA                : 24 46 76
CONST                : 
DAPOSTROPHE          : 
DEF                  : 72 75 76
DIVIDE               : 36
DO                   : 88
DOT                  : 
ELSE                 : 67
ELSIF                : 66
END                  : 63 71 72 75 76 88
EQUAL                : 57
FALSE                : 
FOR                  : 
GETS                 : 85 86 87
GLOBAL_VAR           : 21 26 29 87
GREATEROREQUAL       : 55
GREATERTHAN          : 54
ID                   : 22 27 30 72 73 74 75 75 76 76 76 85
IF                   : 63
IN                   : 
INSTANCE_VAR         : 20 25 28 86
LBRACE               : 43 44
LBRACKET             : 41 42
LESSOREQUAL          : 56
LESSTHAN             : 53
LPAREN               : 74 75 76 77 80 81 89
MINUS                : 34
MOD                  : 37
NIL                  : 
NONE                 : 
NOT                  : 
NOTEQUAL             : 58
NUMBER               : 17
OR                   : 52
P                    : 81 82
PLUS                 : 33
PRINT                : 77 78 83
PUTS                 : 79 80 84
RBRACE               : 43 44
RBRACKET             : 41 42
RETURN               : 
RPAREN               : 74 75 76 77 80 81 89
SEMICOLON            : 
STRING               : 18
TIMES                : 35
TRUE                 : 
WHEN                 : 68
WHILE                : 88
error                : 

Nonterminals, with rules where they appear

Sfunction            : 7
aritmeticExpresion   : 12 32
array                : 8 38
assign               : 1
case                 : 6
codigo               : 63 66 67 68 72 75 76 88 0
condition            : 48 49 63 66 88
conditions           : 4 49 68
conector             : 49
control_structures   : 15
dataIn               : 14
data_structure       : 28 29 30
else_block           : 61 62
elsif_block          : 64 65
elsif_blocks         : 60 61 65
hash                 : 16 40
hash_contents        : 44 46
hash_pair            : 45 46
if_block             : 59 60 61 62
impression           : 2
operComp             : 50
operator             : 13 31 32
p_SfunctionINV       : 9
p_function_one_parameter : 10
p_function_two_parameter : 11
tupla                : 3 39
value                : 23 24 25 26 27 31 31 32 47 47 50 50
values               : 24 42 77 78 79 80 81 82 89
when                 : 69
whens                : 70 71
while_loop           : 5

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 1
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    condition                      shift and go to state 26
    if_block                       shift and go to state 36

state 1

    (0) S' -> codigo .



state 2

    (1) codigo -> assign .

    $end            reduce using rule 1 (codigo -> assign .)
    END             reduce using rule 1 (codigo -> assign .)
    ELSE            reduce using rule 1 (codigo -> assign .)
    ELSIF           reduce using rule 1 (codigo -> assign .)


state 3

    (2) codigo -> impression .

    $end            reduce using rule 2 (codigo -> impression .)
    END             reduce using rule 2 (codigo -> impression .)
    ELSE            reduce using rule 2 (codigo -> impression .)
    ELSIF           reduce using rule 2 (codigo -> impression .)


state 4

    (3) codigo -> tupla .

    $end            reduce using rule 3 (codigo -> tupla .)
    END             reduce using rule 3 (codigo -> tupla .)
    ELSE            reduce using rule 3 (codigo -> tupla .)
    ELSIF           reduce using rule 3 (codigo -> tupla .)


state 5

    (4) codigo -> conditions .

    $end            reduce using rule 4 (codigo -> conditions .)
    END             reduce using rule 4 (codigo -> conditions .)
    ELSE            reduce using rule 4 (codigo -> conditions .)
    ELSIF           reduce using rule 4 (codigo -> conditions .)


state 6

    (5) codigo -> while_loop .

    $end            reduce using rule 5 (codigo -> while_loop .)
    END             reduce using rule 5 (codigo -> while_loop .)
    ELSE            reduce using rule 5 (codigo -> while_loop .)
    ELSIF           reduce using rule 5 (codigo -> while_loop .)


state 7

    (6) codigo -> case .

    $end            reduce using rule 6 (codigo -> case .)
    END             reduce using rule 6 (codigo -> case .)
    ELSE            reduce using rule 6 (codigo -> case .)
    ELSIF           reduce using rule 6 (codigo -> case .)


state 8

    (7) codigo -> Sfunction .

    $end            reduce using rule 7 (codigo -> Sfunction .)
    END             reduce using rule 7 (codigo -> Sfunction .)
    ELSE            reduce using rule 7 (codigo -> Sfunction .)
    ELSIF           reduce using rule 7 (codigo -> Sfunction .)


state 9

    (8) codigo -> array .

    $end            reduce using rule 8 (codigo -> array .)
    END             reduce using rule 8 (codigo -> array .)
    ELSE            reduce using rule 8 (codigo -> array .)
    ELSIF           reduce using rule 8 (codigo -> array .)


state 10

    (9) codigo -> p_SfunctionINV .

    $end            reduce using rule 9 (codigo -> p_SfunctionINV .)
    END             reduce using rule 9 (codigo -> p_SfunctionINV .)
    ELSE            reduce using rule 9 (codigo -> p_SfunctionINV .)
    ELSIF           reduce using rule 9 (codigo -> p_SfunctionINV .)


state 11

    (10) codigo -> p_function_one_parameter .

    $end            reduce using rule 10 (codigo -> p_function_one_parameter .)
    END             reduce using rule 10 (codigo -> p_function_one_parameter .)
    ELSE            reduce using rule 10 (codigo -> p_function_one_parameter .)
    ELSIF           reduce using rule 10 (codigo -> p_function_one_parameter .)


state 12

    (11) codigo -> p_function_two_parameter .

    $end            reduce using rule 11 (codigo -> p_function_two_parameter .)
    END             reduce using rule 11 (codigo -> p_function_two_parameter .)
    ELSE            reduce using rule 11 (codigo -> p_function_two_parameter .)
    ELSIF           reduce using rule 11 (codigo -> p_function_two_parameter .)


state 13

    (12) codigo -> aritmeticExpresion .
    (32) aritmeticExpresion -> aritmeticExpresion . operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD

    $end            reduce using rule 12 (codigo -> aritmeticExpresion .)
    END             reduce using rule 12 (codigo -> aritmeticExpresion .)
    ELSE            reduce using rule 12 (codigo -> aritmeticExpresion .)
    ELSIF           reduce using rule 12 (codigo -> aritmeticExpresion .)
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35

    operator                       shift and go to state 42

state 14

    (13) codigo -> operator .

    $end            reduce using rule 13 (codigo -> operator .)
    END             reduce using rule 13 (codigo -> operator .)
    ELSE            reduce using rule 13 (codigo -> operator .)
    ELSIF           reduce using rule 13 (codigo -> operator .)


state 15

    (14) codigo -> dataIn .

    $end            reduce using rule 14 (codigo -> dataIn .)
    END             reduce using rule 14 (codigo -> dataIn .)
    ELSE            reduce using rule 14 (codigo -> dataIn .)
    ELSIF           reduce using rule 14 (codigo -> dataIn .)


state 16

    (15) codigo -> control_structures .

    $end            reduce using rule 15 (codigo -> control_structures .)
    END             reduce using rule 15 (codigo -> control_structures .)
    ELSE            reduce using rule 15 (codigo -> control_structures .)
    ELSIF           reduce using rule 15 (codigo -> control_structures .)


state 17

    (16) codigo -> hash .

    $end            reduce using rule 16 (codigo -> hash .)
    END             reduce using rule 16 (codigo -> hash .)
    ELSE            reduce using rule 16 (codigo -> hash .)
    ELSIF           reduce using rule 16 (codigo -> hash .)


state 18

    (25) assign -> INSTANCE_VAR . ASSIGN value
    (28) assign -> INSTANCE_VAR . ASSIGN data_structure
    (86) dataIn -> INSTANCE_VAR . ASSIGN GETS
    (20) value -> INSTANCE_VAR .

    ASSIGN          shift and go to state 43
    PLUS            reduce using rule 20 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 20 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 20 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 20 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 20 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 20 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 20 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 20 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 20 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 20 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 20 (value -> INSTANCE_VAR .)


state 19

    (31) aritmeticExpresion -> value . operator value
    (50) condition -> value . operComp value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (53) operComp -> . LESSTHAN
    (54) operComp -> . GREATERTHAN
    (55) operComp -> . GREATEROREQUAL
    (56) operComp -> . LESSOREQUAL
    (57) operComp -> . EQUAL
    (58) operComp -> . NOTEQUAL

    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    GREATEROREQUAL  shift and go to state 48
    LESSOREQUAL     shift and go to state 49
    EQUAL           shift and go to state 50
    NOTEQUAL        shift and go to state 51

    operator                       shift and go to state 44
    operComp                       shift and go to state 45

state 20

    (26) assign -> GLOBAL_VAR . ASSIGN value
    (29) assign -> GLOBAL_VAR . ASSIGN data_structure
    (87) dataIn -> GLOBAL_VAR . ASSIGN GETS
    (21) value -> GLOBAL_VAR .

    ASSIGN          shift and go to state 52
    PLUS            reduce using rule 21 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 21 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 21 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 21 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 21 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 21 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 21 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 21 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 21 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 21 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 21 (value -> GLOBAL_VAR .)


state 21

    (27) assign -> ID . ASSIGN value
    (30) assign -> ID . ASSIGN data_structure
    (73) p_SfunctionINV -> ID .
    (74) p_SfunctionINV -> ID . LPAREN RPAREN
    (85) dataIn -> ID . ASSIGN GETS
    (22) value -> ID .

    ASSIGN          shift and go to state 53
    $end            reduce using rule 73 (p_SfunctionINV -> ID .)
    END             reduce using rule 73 (p_SfunctionINV -> ID .)
    ELSE            reduce using rule 73 (p_SfunctionINV -> ID .)
    ELSIF           reduce using rule 73 (p_SfunctionINV -> ID .)
    LPAREN          shift and go to state 54
    PLUS            reduce using rule 22 (value -> ID .)
    MINUS           reduce using rule 22 (value -> ID .)
    TIMES           reduce using rule 22 (value -> ID .)
    DIVIDE          reduce using rule 22 (value -> ID .)
    MOD             reduce using rule 22 (value -> ID .)
    LESSTHAN        reduce using rule 22 (value -> ID .)
    GREATERTHAN     reduce using rule 22 (value -> ID .)
    GREATEROREQUAL  reduce using rule 22 (value -> ID .)
    LESSOREQUAL     reduce using rule 22 (value -> ID .)
    EQUAL           reduce using rule 22 (value -> ID .)
    NOTEQUAL        reduce using rule 22 (value -> ID .)


state 22

    (77) impression -> PRINT . LPAREN values RPAREN
    (78) impression -> PRINT . values
    (83) impression -> PRINT .
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    LPAREN          shift and go to state 55
    $end            reduce using rule 83 (impression -> PRINT .)
    END             reduce using rule 83 (impression -> PRINT .)
    ELSE            reduce using rule 83 (impression -> PRINT .)
    ELSIF           reduce using rule 83 (impression -> PRINT .)
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 56
    value                          shift and go to state 57

state 23

    (89) tupla -> LPAREN . values RPAREN
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 61
    value                          shift and go to state 57

state 24

    (79) impression -> PUTS . values
    (80) impression -> PUTS . LPAREN values RPAREN
    (84) impression -> PUTS .
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    LPAREN          shift and go to state 63
    $end            reduce using rule 84 (impression -> PUTS .)
    END             reduce using rule 84 (impression -> PUTS .)
    ELSE            reduce using rule 84 (impression -> PUTS .)
    ELSIF           reduce using rule 84 (impression -> PUTS .)
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 62
    value                          shift and go to state 57

state 25

    (81) impression -> P . LPAREN values RPAREN
    (82) impression -> P . values
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    LPAREN          shift and go to state 64
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 65
    value                          shift and go to state 57

state 26

    (48) conditions -> condition .
    (49) conditions -> condition . conector conditions
    (51) conector -> . AND
    (52) conector -> . OR

    $end            reduce using rule 48 (conditions -> condition .)
    INSTANCE_VAR    reduce using rule 48 (conditions -> condition .)
    GLOBAL_VAR      reduce using rule 48 (conditions -> condition .)
    ID              reduce using rule 48 (conditions -> condition .)
    PRINT           reduce using rule 48 (conditions -> condition .)
    PUTS            reduce using rule 48 (conditions -> condition .)
    P               reduce using rule 48 (conditions -> condition .)
    LPAREN          reduce using rule 48 (conditions -> condition .)
    WHILE           reduce using rule 48 (conditions -> condition .)
    CASE            reduce using rule 48 (conditions -> condition .)
    DEF             reduce using rule 48 (conditions -> condition .)
    LBRACKET        reduce using rule 48 (conditions -> condition .)
    PLUS            reduce using rule 48 (conditions -> condition .)
    MINUS           reduce using rule 48 (conditions -> condition .)
    TIMES           reduce using rule 48 (conditions -> condition .)
    DIVIDE          reduce using rule 48 (conditions -> condition .)
    MOD             reduce using rule 48 (conditions -> condition .)
    LBRACE          reduce using rule 48 (conditions -> condition .)
    NUMBER          reduce using rule 48 (conditions -> condition .)
    STRING          reduce using rule 48 (conditions -> condition .)
    BOOLEAN         reduce using rule 48 (conditions -> condition .)
    IF              reduce using rule 48 (conditions -> condition .)
    END             reduce using rule 48 (conditions -> condition .)
    ELSE            reduce using rule 48 (conditions -> condition .)
    ELSIF           reduce using rule 48 (conditions -> condition .)
    AND             shift and go to state 67
    OR              shift and go to state 68

    conector                       shift and go to state 66

state 27

    (88) while_loop -> WHILE . condition DO codigo END
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    condition                      shift and go to state 69
    value                          shift and go to state 70

state 28

    (71) case -> CASE . whens END
    (69) whens -> . when
    (70) whens -> . whens
    (68) when -> . WHEN conditions codigo

    WHEN            shift and go to state 73

    whens                          shift and go to state 71
    when                           shift and go to state 72

state 29

    (72) Sfunction -> DEF . ID codigo END
    (75) p_function_one_parameter -> DEF . ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> DEF . ID LPAREN ID COMMA ID RPAREN codigo END

    ID              shift and go to state 74


state 30

    (41) array -> LBRACKET . RBRACKET
    (42) array -> LBRACKET . values RBRACKET
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    RBRACKET        shift and go to state 75
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 76
    value                          shift and go to state 57

state 31

    (33) operator -> PLUS .

    $end            reduce using rule 33 (operator -> PLUS .)
    NUMBER          reduce using rule 33 (operator -> PLUS .)
    STRING          reduce using rule 33 (operator -> PLUS .)
    BOOLEAN         reduce using rule 33 (operator -> PLUS .)
    INSTANCE_VAR    reduce using rule 33 (operator -> PLUS .)
    GLOBAL_VAR      reduce using rule 33 (operator -> PLUS .)
    ID              reduce using rule 33 (operator -> PLUS .)
    END             reduce using rule 33 (operator -> PLUS .)
    ELSE            reduce using rule 33 (operator -> PLUS .)
    ELSIF           reduce using rule 33 (operator -> PLUS .)


state 32

    (34) operator -> MINUS .

    $end            reduce using rule 34 (operator -> MINUS .)
    NUMBER          reduce using rule 34 (operator -> MINUS .)
    STRING          reduce using rule 34 (operator -> MINUS .)
    BOOLEAN         reduce using rule 34 (operator -> MINUS .)
    INSTANCE_VAR    reduce using rule 34 (operator -> MINUS .)
    GLOBAL_VAR      reduce using rule 34 (operator -> MINUS .)
    ID              reduce using rule 34 (operator -> MINUS .)
    END             reduce using rule 34 (operator -> MINUS .)
    ELSE            reduce using rule 34 (operator -> MINUS .)
    ELSIF           reduce using rule 34 (operator -> MINUS .)


state 33

    (35) operator -> TIMES .

    $end            reduce using rule 35 (operator -> TIMES .)
    NUMBER          reduce using rule 35 (operator -> TIMES .)
    STRING          reduce using rule 35 (operator -> TIMES .)
    BOOLEAN         reduce using rule 35 (operator -> TIMES .)
    INSTANCE_VAR    reduce using rule 35 (operator -> TIMES .)
    GLOBAL_VAR      reduce using rule 35 (operator -> TIMES .)
    ID              reduce using rule 35 (operator -> TIMES .)
    END             reduce using rule 35 (operator -> TIMES .)
    ELSE            reduce using rule 35 (operator -> TIMES .)
    ELSIF           reduce using rule 35 (operator -> TIMES .)


state 34

    (36) operator -> DIVIDE .

    $end            reduce using rule 36 (operator -> DIVIDE .)
    NUMBER          reduce using rule 36 (operator -> DIVIDE .)
    STRING          reduce using rule 36 (operator -> DIVIDE .)
    BOOLEAN         reduce using rule 36 (operator -> DIVIDE .)
    INSTANCE_VAR    reduce using rule 36 (operator -> DIVIDE .)
    GLOBAL_VAR      reduce using rule 36 (operator -> DIVIDE .)
    ID              reduce using rule 36 (operator -> DIVIDE .)
    END             reduce using rule 36 (operator -> DIVIDE .)
    ELSE            reduce using rule 36 (operator -> DIVIDE .)
    ELSIF           reduce using rule 36 (operator -> DIVIDE .)


state 35

    (37) operator -> MOD .

    $end            reduce using rule 37 (operator -> MOD .)
    NUMBER          reduce using rule 37 (operator -> MOD .)
    STRING          reduce using rule 37 (operator -> MOD .)
    BOOLEAN         reduce using rule 37 (operator -> MOD .)
    INSTANCE_VAR    reduce using rule 37 (operator -> MOD .)
    GLOBAL_VAR      reduce using rule 37 (operator -> MOD .)
    ID              reduce using rule 37 (operator -> MOD .)
    END             reduce using rule 37 (operator -> MOD .)
    ELSE            reduce using rule 37 (operator -> MOD .)
    ELSIF           reduce using rule 37 (operator -> MOD .)


state 36

    (59) control_structures -> if_block .
    (60) control_structures -> if_block . elsif_blocks
    (61) control_structures -> if_block . elsif_blocks else_block
    (62) control_structures -> if_block . else_block
    (64) elsif_blocks -> . elsif_block
    (65) elsif_blocks -> . elsif_blocks elsif_block
    (67) else_block -> . ELSE codigo
    (66) elsif_block -> . ELSIF condition codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    $end            reduce using rule 59 (control_structures -> if_block .)
    END             reduce using rule 59 (control_structures -> if_block .)
    ELSE            shift and go to state 80
    ELSIF           shift and go to state 81

  ! ELSE            [ reduce using rule 59 (control_structures -> if_block .) ]
  ! ELSIF           [ reduce using rule 59 (control_structures -> if_block .) ]

    elsif_blocks                   shift and go to state 77
    else_block                     shift and go to state 78
    elsif_block                    shift and go to state 79

state 37

    (43) hash -> LBRACE . RBRACE
    (44) hash -> LBRACE . hash_contents RBRACE
    (45) hash_contents -> . hash_pair
    (46) hash_contents -> . hash_contents COMMA hash_pair
    (47) hash_pair -> . value COLON value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    RBRACE          shift and go to state 82
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    hash_contents                  shift and go to state 83
    hash_pair                      shift and go to state 84
    value                          shift and go to state 85

state 38

    (17) value -> NUMBER .

    PLUS            reduce using rule 17 (value -> NUMBER .)
    MINUS           reduce using rule 17 (value -> NUMBER .)
    TIMES           reduce using rule 17 (value -> NUMBER .)
    DIVIDE          reduce using rule 17 (value -> NUMBER .)
    MOD             reduce using rule 17 (value -> NUMBER .)
    LESSTHAN        reduce using rule 17 (value -> NUMBER .)
    GREATERTHAN     reduce using rule 17 (value -> NUMBER .)
    GREATEROREQUAL  reduce using rule 17 (value -> NUMBER .)
    LESSOREQUAL     reduce using rule 17 (value -> NUMBER .)
    EQUAL           reduce using rule 17 (value -> NUMBER .)
    NOTEQUAL        reduce using rule 17 (value -> NUMBER .)
    COMMA           reduce using rule 17 (value -> NUMBER .)
    $end            reduce using rule 17 (value -> NUMBER .)
    END             reduce using rule 17 (value -> NUMBER .)
    ELSE            reduce using rule 17 (value -> NUMBER .)
    ELSIF           reduce using rule 17 (value -> NUMBER .)
    RPAREN          reduce using rule 17 (value -> NUMBER .)
    RBRACKET        reduce using rule 17 (value -> NUMBER .)
    COLON           reduce using rule 17 (value -> NUMBER .)
    AND             reduce using rule 17 (value -> NUMBER .)
    OR              reduce using rule 17 (value -> NUMBER .)
    DO              reduce using rule 17 (value -> NUMBER .)
    INSTANCE_VAR    reduce using rule 17 (value -> NUMBER .)
    GLOBAL_VAR      reduce using rule 17 (value -> NUMBER .)
    ID              reduce using rule 17 (value -> NUMBER .)
    PRINT           reduce using rule 17 (value -> NUMBER .)
    PUTS            reduce using rule 17 (value -> NUMBER .)
    P               reduce using rule 17 (value -> NUMBER .)
    LPAREN          reduce using rule 17 (value -> NUMBER .)
    WHILE           reduce using rule 17 (value -> NUMBER .)
    CASE            reduce using rule 17 (value -> NUMBER .)
    DEF             reduce using rule 17 (value -> NUMBER .)
    LBRACKET        reduce using rule 17 (value -> NUMBER .)
    LBRACE          reduce using rule 17 (value -> NUMBER .)
    NUMBER          reduce using rule 17 (value -> NUMBER .)
    STRING          reduce using rule 17 (value -> NUMBER .)
    BOOLEAN         reduce using rule 17 (value -> NUMBER .)
    IF              reduce using rule 17 (value -> NUMBER .)
    RBRACE          reduce using rule 17 (value -> NUMBER .)


state 39

    (18) value -> STRING .

    PLUS            reduce using rule 18 (value -> STRING .)
    MINUS           reduce using rule 18 (value -> STRING .)
    TIMES           reduce using rule 18 (value -> STRING .)
    DIVIDE          reduce using rule 18 (value -> STRING .)
    MOD             reduce using rule 18 (value -> STRING .)
    LESSTHAN        reduce using rule 18 (value -> STRING .)
    GREATERTHAN     reduce using rule 18 (value -> STRING .)
    GREATEROREQUAL  reduce using rule 18 (value -> STRING .)
    LESSOREQUAL     reduce using rule 18 (value -> STRING .)
    EQUAL           reduce using rule 18 (value -> STRING .)
    NOTEQUAL        reduce using rule 18 (value -> STRING .)
    COMMA           reduce using rule 18 (value -> STRING .)
    $end            reduce using rule 18 (value -> STRING .)
    END             reduce using rule 18 (value -> STRING .)
    ELSE            reduce using rule 18 (value -> STRING .)
    ELSIF           reduce using rule 18 (value -> STRING .)
    RPAREN          reduce using rule 18 (value -> STRING .)
    RBRACKET        reduce using rule 18 (value -> STRING .)
    COLON           reduce using rule 18 (value -> STRING .)
    AND             reduce using rule 18 (value -> STRING .)
    OR              reduce using rule 18 (value -> STRING .)
    DO              reduce using rule 18 (value -> STRING .)
    INSTANCE_VAR    reduce using rule 18 (value -> STRING .)
    GLOBAL_VAR      reduce using rule 18 (value -> STRING .)
    ID              reduce using rule 18 (value -> STRING .)
    PRINT           reduce using rule 18 (value -> STRING .)
    PUTS            reduce using rule 18 (value -> STRING .)
    P               reduce using rule 18 (value -> STRING .)
    LPAREN          reduce using rule 18 (value -> STRING .)
    WHILE           reduce using rule 18 (value -> STRING .)
    CASE            reduce using rule 18 (value -> STRING .)
    DEF             reduce using rule 18 (value -> STRING .)
    LBRACKET        reduce using rule 18 (value -> STRING .)
    LBRACE          reduce using rule 18 (value -> STRING .)
    NUMBER          reduce using rule 18 (value -> STRING .)
    STRING          reduce using rule 18 (value -> STRING .)
    BOOLEAN         reduce using rule 18 (value -> STRING .)
    IF              reduce using rule 18 (value -> STRING .)
    RBRACE          reduce using rule 18 (value -> STRING .)


state 40

    (19) value -> BOOLEAN .

    PLUS            reduce using rule 19 (value -> BOOLEAN .)
    MINUS           reduce using rule 19 (value -> BOOLEAN .)
    TIMES           reduce using rule 19 (value -> BOOLEAN .)
    DIVIDE          reduce using rule 19 (value -> BOOLEAN .)
    MOD             reduce using rule 19 (value -> BOOLEAN .)
    LESSTHAN        reduce using rule 19 (value -> BOOLEAN .)
    GREATERTHAN     reduce using rule 19 (value -> BOOLEAN .)
    GREATEROREQUAL  reduce using rule 19 (value -> BOOLEAN .)
    LESSOREQUAL     reduce using rule 19 (value -> BOOLEAN .)
    EQUAL           reduce using rule 19 (value -> BOOLEAN .)
    NOTEQUAL        reduce using rule 19 (value -> BOOLEAN .)
    COMMA           reduce using rule 19 (value -> BOOLEAN .)
    $end            reduce using rule 19 (value -> BOOLEAN .)
    END             reduce using rule 19 (value -> BOOLEAN .)
    ELSE            reduce using rule 19 (value -> BOOLEAN .)
    ELSIF           reduce using rule 19 (value -> BOOLEAN .)
    RPAREN          reduce using rule 19 (value -> BOOLEAN .)
    RBRACKET        reduce using rule 19 (value -> BOOLEAN .)
    COLON           reduce using rule 19 (value -> BOOLEAN .)
    AND             reduce using rule 19 (value -> BOOLEAN .)
    OR              reduce using rule 19 (value -> BOOLEAN .)
    DO              reduce using rule 19 (value -> BOOLEAN .)
    INSTANCE_VAR    reduce using rule 19 (value -> BOOLEAN .)
    GLOBAL_VAR      reduce using rule 19 (value -> BOOLEAN .)
    ID              reduce using rule 19 (value -> BOOLEAN .)
    PRINT           reduce using rule 19 (value -> BOOLEAN .)
    PUTS            reduce using rule 19 (value -> BOOLEAN .)
    P               reduce using rule 19 (value -> BOOLEAN .)
    LPAREN          reduce using rule 19 (value -> BOOLEAN .)
    WHILE           reduce using rule 19 (value -> BOOLEAN .)
    CASE            reduce using rule 19 (value -> BOOLEAN .)
    DEF             reduce using rule 19 (value -> BOOLEAN .)
    LBRACKET        reduce using rule 19 (value -> BOOLEAN .)
    LBRACE          reduce using rule 19 (value -> BOOLEAN .)
    NUMBER          reduce using rule 19 (value -> BOOLEAN .)
    STRING          reduce using rule 19 (value -> BOOLEAN .)
    BOOLEAN         reduce using rule 19 (value -> BOOLEAN .)
    IF              reduce using rule 19 (value -> BOOLEAN .)
    RBRACE          reduce using rule 19 (value -> BOOLEAN .)


state 41

    (63) if_block -> IF . condition codigo END
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    condition                      shift and go to state 86
    value                          shift and go to state 70

state 42

    (32) aritmeticExpresion -> aritmeticExpresion operator . value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    value                          shift and go to state 87

state 43

    (25) assign -> INSTANCE_VAR ASSIGN . value
    (28) assign -> INSTANCE_VAR ASSIGN . data_structure
    (86) dataIn -> INSTANCE_VAR ASSIGN . GETS
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (38) data_structure -> . array
    (39) data_structure -> . tupla
    (40) data_structure -> . hash
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (89) tupla -> . LPAREN values RPAREN
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 90
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60
    LBRACKET        shift and go to state 30
    LPAREN          shift and go to state 23
    LBRACE          shift and go to state 37

    value                          shift and go to state 88
    data_structure                 shift and go to state 89
    array                          shift and go to state 91
    tupla                          shift and go to state 92
    hash                           shift and go to state 93

state 44

    (31) aritmeticExpresion -> value operator . value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    value                          shift and go to state 94

state 45

    (50) condition -> value operComp . value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    value                          shift and go to state 95

state 46

    (53) operComp -> LESSTHAN .

    NUMBER          reduce using rule 53 (operComp -> LESSTHAN .)
    STRING          reduce using rule 53 (operComp -> LESSTHAN .)
    BOOLEAN         reduce using rule 53 (operComp -> LESSTHAN .)
    INSTANCE_VAR    reduce using rule 53 (operComp -> LESSTHAN .)
    GLOBAL_VAR      reduce using rule 53 (operComp -> LESSTHAN .)
    ID              reduce using rule 53 (operComp -> LESSTHAN .)


state 47

    (54) operComp -> GREATERTHAN .

    NUMBER          reduce using rule 54 (operComp -> GREATERTHAN .)
    STRING          reduce using rule 54 (operComp -> GREATERTHAN .)
    BOOLEAN         reduce using rule 54 (operComp -> GREATERTHAN .)
    INSTANCE_VAR    reduce using rule 54 (operComp -> GREATERTHAN .)
    GLOBAL_VAR      reduce using rule 54 (operComp -> GREATERTHAN .)
    ID              reduce using rule 54 (operComp -> GREATERTHAN .)


state 48

    (55) operComp -> GREATEROREQUAL .

    NUMBER          reduce using rule 55 (operComp -> GREATEROREQUAL .)
    STRING          reduce using rule 55 (operComp -> GREATEROREQUAL .)
    BOOLEAN         reduce using rule 55 (operComp -> GREATEROREQUAL .)
    INSTANCE_VAR    reduce using rule 55 (operComp -> GREATEROREQUAL .)
    GLOBAL_VAR      reduce using rule 55 (operComp -> GREATEROREQUAL .)
    ID              reduce using rule 55 (operComp -> GREATEROREQUAL .)


state 49

    (56) operComp -> LESSOREQUAL .

    NUMBER          reduce using rule 56 (operComp -> LESSOREQUAL .)
    STRING          reduce using rule 56 (operComp -> LESSOREQUAL .)
    BOOLEAN         reduce using rule 56 (operComp -> LESSOREQUAL .)
    INSTANCE_VAR    reduce using rule 56 (operComp -> LESSOREQUAL .)
    GLOBAL_VAR      reduce using rule 56 (operComp -> LESSOREQUAL .)
    ID              reduce using rule 56 (operComp -> LESSOREQUAL .)


state 50

    (57) operComp -> EQUAL .

    NUMBER          reduce using rule 57 (operComp -> EQUAL .)
    STRING          reduce using rule 57 (operComp -> EQUAL .)
    BOOLEAN         reduce using rule 57 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 57 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 57 (operComp -> EQUAL .)
    ID              reduce using rule 57 (operComp -> EQUAL .)


state 51

    (58) operComp -> NOTEQUAL .

    NUMBER          reduce using rule 58 (operComp -> NOTEQUAL .)
    STRING          reduce using rule 58 (operComp -> NOTEQUAL .)
    BOOLEAN         reduce using rule 58 (operComp -> NOTEQUAL .)
    INSTANCE_VAR    reduce using rule 58 (operComp -> NOTEQUAL .)
    GLOBAL_VAR      reduce using rule 58 (operComp -> NOTEQUAL .)
    ID              reduce using rule 58 (operComp -> NOTEQUAL .)


state 52

    (26) assign -> GLOBAL_VAR ASSIGN . value
    (29) assign -> GLOBAL_VAR ASSIGN . data_structure
    (87) dataIn -> GLOBAL_VAR ASSIGN . GETS
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (38) data_structure -> . array
    (39) data_structure -> . tupla
    (40) data_structure -> . hash
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (89) tupla -> . LPAREN values RPAREN
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 98
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60
    LBRACKET        shift and go to state 30
    LPAREN          shift and go to state 23
    LBRACE          shift and go to state 37

    value                          shift and go to state 96
    data_structure                 shift and go to state 97
    array                          shift and go to state 91
    tupla                          shift and go to state 92
    hash                           shift and go to state 93

state 53

    (27) assign -> ID ASSIGN . value
    (30) assign -> ID ASSIGN . data_structure
    (85) dataIn -> ID ASSIGN . GETS
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (38) data_structure -> . array
    (39) data_structure -> . tupla
    (40) data_structure -> . hash
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (89) tupla -> . LPAREN values RPAREN
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 101
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60
    LBRACKET        shift and go to state 30
    LPAREN          shift and go to state 23
    LBRACE          shift and go to state 37

    value                          shift and go to state 99
    data_structure                 shift and go to state 100
    array                          shift and go to state 91
    tupla                          shift and go to state 92
    hash                           shift and go to state 93

state 54

    (74) p_SfunctionINV -> ID LPAREN . RPAREN

    RPAREN          shift and go to state 102


state 55

    (77) impression -> PRINT LPAREN . values RPAREN
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 103
    value                          shift and go to state 57

state 56

    (78) impression -> PRINT values .

    $end            reduce using rule 78 (impression -> PRINT values .)
    END             reduce using rule 78 (impression -> PRINT values .)
    ELSE            reduce using rule 78 (impression -> PRINT values .)
    ELSIF           reduce using rule 78 (impression -> PRINT values .)


state 57

    (23) values -> value .
    (24) values -> value . COMMA values

    $end            reduce using rule 23 (values -> value .)
    END             reduce using rule 23 (values -> value .)
    ELSE            reduce using rule 23 (values -> value .)
    ELSIF           reduce using rule 23 (values -> value .)
    RPAREN          reduce using rule 23 (values -> value .)
    RBRACKET        reduce using rule 23 (values -> value .)
    COMMA           shift and go to state 104


state 58

    (20) value -> INSTANCE_VAR .

    COMMA           reduce using rule 20 (value -> INSTANCE_VAR .)
    $end            reduce using rule 20 (value -> INSTANCE_VAR .)
    END             reduce using rule 20 (value -> INSTANCE_VAR .)
    ELSE            reduce using rule 20 (value -> INSTANCE_VAR .)
    ELSIF           reduce using rule 20 (value -> INSTANCE_VAR .)
    RPAREN          reduce using rule 20 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 20 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 20 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 20 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 20 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 20 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 20 (value -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 20 (value -> INSTANCE_VAR .)
    COLON           reduce using rule 20 (value -> INSTANCE_VAR .)
    PLUS            reduce using rule 20 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 20 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 20 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 20 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 20 (value -> INSTANCE_VAR .)
    AND             reduce using rule 20 (value -> INSTANCE_VAR .)
    OR              reduce using rule 20 (value -> INSTANCE_VAR .)
    DO              reduce using rule 20 (value -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 20 (value -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 20 (value -> INSTANCE_VAR .)
    ID              reduce using rule 20 (value -> INSTANCE_VAR .)
    PRINT           reduce using rule 20 (value -> INSTANCE_VAR .)
    PUTS            reduce using rule 20 (value -> INSTANCE_VAR .)
    P               reduce using rule 20 (value -> INSTANCE_VAR .)
    LPAREN          reduce using rule 20 (value -> INSTANCE_VAR .)
    WHILE           reduce using rule 20 (value -> INSTANCE_VAR .)
    CASE            reduce using rule 20 (value -> INSTANCE_VAR .)
    DEF             reduce using rule 20 (value -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 20 (value -> INSTANCE_VAR .)
    LBRACE          reduce using rule 20 (value -> INSTANCE_VAR .)
    NUMBER          reduce using rule 20 (value -> INSTANCE_VAR .)
    STRING          reduce using rule 20 (value -> INSTANCE_VAR .)
    BOOLEAN         reduce using rule 20 (value -> INSTANCE_VAR .)
    IF              reduce using rule 20 (value -> INSTANCE_VAR .)
    RBRACE          reduce using rule 20 (value -> INSTANCE_VAR .)


state 59

    (21) value -> GLOBAL_VAR .

    COMMA           reduce using rule 21 (value -> GLOBAL_VAR .)
    $end            reduce using rule 21 (value -> GLOBAL_VAR .)
    END             reduce using rule 21 (value -> GLOBAL_VAR .)
    ELSE            reduce using rule 21 (value -> GLOBAL_VAR .)
    ELSIF           reduce using rule 21 (value -> GLOBAL_VAR .)
    RPAREN          reduce using rule 21 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 21 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 21 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 21 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 21 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 21 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 21 (value -> GLOBAL_VAR .)
    RBRACKET        reduce using rule 21 (value -> GLOBAL_VAR .)
    COLON           reduce using rule 21 (value -> GLOBAL_VAR .)
    PLUS            reduce using rule 21 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 21 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 21 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 21 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 21 (value -> GLOBAL_VAR .)
    AND             reduce using rule 21 (value -> GLOBAL_VAR .)
    OR              reduce using rule 21 (value -> GLOBAL_VAR .)
    DO              reduce using rule 21 (value -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 21 (value -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 21 (value -> GLOBAL_VAR .)
    ID              reduce using rule 21 (value -> GLOBAL_VAR .)
    PRINT           reduce using rule 21 (value -> GLOBAL_VAR .)
    PUTS            reduce using rule 21 (value -> GLOBAL_VAR .)
    P               reduce using rule 21 (value -> GLOBAL_VAR .)
    LPAREN          reduce using rule 21 (value -> GLOBAL_VAR .)
    WHILE           reduce using rule 21 (value -> GLOBAL_VAR .)
    CASE            reduce using rule 21 (value -> GLOBAL_VAR .)
    DEF             reduce using rule 21 (value -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 21 (value -> GLOBAL_VAR .)
    LBRACE          reduce using rule 21 (value -> GLOBAL_VAR .)
    NUMBER          reduce using rule 21 (value -> GLOBAL_VAR .)
    STRING          reduce using rule 21 (value -> GLOBAL_VAR .)
    BOOLEAN         reduce using rule 21 (value -> GLOBAL_VAR .)
    IF              reduce using rule 21 (value -> GLOBAL_VAR .)
    RBRACE          reduce using rule 21 (value -> GLOBAL_VAR .)


state 60

    (22) value -> ID .

    COMMA           reduce using rule 22 (value -> ID .)
    $end            reduce using rule 22 (value -> ID .)
    END             reduce using rule 22 (value -> ID .)
    ELSE            reduce using rule 22 (value -> ID .)
    ELSIF           reduce using rule 22 (value -> ID .)
    RPAREN          reduce using rule 22 (value -> ID .)
    LESSTHAN        reduce using rule 22 (value -> ID .)
    GREATERTHAN     reduce using rule 22 (value -> ID .)
    GREATEROREQUAL  reduce using rule 22 (value -> ID .)
    LESSOREQUAL     reduce using rule 22 (value -> ID .)
    EQUAL           reduce using rule 22 (value -> ID .)
    NOTEQUAL        reduce using rule 22 (value -> ID .)
    RBRACKET        reduce using rule 22 (value -> ID .)
    COLON           reduce using rule 22 (value -> ID .)
    PLUS            reduce using rule 22 (value -> ID .)
    MINUS           reduce using rule 22 (value -> ID .)
    TIMES           reduce using rule 22 (value -> ID .)
    DIVIDE          reduce using rule 22 (value -> ID .)
    MOD             reduce using rule 22 (value -> ID .)
    AND             reduce using rule 22 (value -> ID .)
    OR              reduce using rule 22 (value -> ID .)
    DO              reduce using rule 22 (value -> ID .)
    INSTANCE_VAR    reduce using rule 22 (value -> ID .)
    GLOBAL_VAR      reduce using rule 22 (value -> ID .)
    ID              reduce using rule 22 (value -> ID .)
    PRINT           reduce using rule 22 (value -> ID .)
    PUTS            reduce using rule 22 (value -> ID .)
    P               reduce using rule 22 (value -> ID .)
    LPAREN          reduce using rule 22 (value -> ID .)
    WHILE           reduce using rule 22 (value -> ID .)
    CASE            reduce using rule 22 (value -> ID .)
    DEF             reduce using rule 22 (value -> ID .)
    LBRACKET        reduce using rule 22 (value -> ID .)
    LBRACE          reduce using rule 22 (value -> ID .)
    NUMBER          reduce using rule 22 (value -> ID .)
    STRING          reduce using rule 22 (value -> ID .)
    BOOLEAN         reduce using rule 22 (value -> ID .)
    IF              reduce using rule 22 (value -> ID .)
    RBRACE          reduce using rule 22 (value -> ID .)


state 61

    (89) tupla -> LPAREN values . RPAREN

    RPAREN          shift and go to state 105


state 62

    (79) impression -> PUTS values .

    $end            reduce using rule 79 (impression -> PUTS values .)
    END             reduce using rule 79 (impression -> PUTS values .)
    ELSE            reduce using rule 79 (impression -> PUTS values .)
    ELSIF           reduce using rule 79 (impression -> PUTS values .)


state 63

    (80) impression -> PUTS LPAREN . values RPAREN
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 106
    value                          shift and go to state 57

state 64

    (81) impression -> P LPAREN . values RPAREN
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    values                         shift and go to state 107
    value                          shift and go to state 57

state 65

    (82) impression -> P values .

    $end            reduce using rule 82 (impression -> P values .)
    END             reduce using rule 82 (impression -> P values .)
    ELSE            reduce using rule 82 (impression -> P values .)
    ELSIF           reduce using rule 82 (impression -> P values .)


state 66

    (49) conditions -> condition conector . conditions
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    condition                      shift and go to state 26
    conditions                     shift and go to state 108
    value                          shift and go to state 70

state 67

    (51) conector -> AND .

    NUMBER          reduce using rule 51 (conector -> AND .)
    STRING          reduce using rule 51 (conector -> AND .)
    BOOLEAN         reduce using rule 51 (conector -> AND .)
    INSTANCE_VAR    reduce using rule 51 (conector -> AND .)
    GLOBAL_VAR      reduce using rule 51 (conector -> AND .)
    ID              reduce using rule 51 (conector -> AND .)


state 68

    (52) conector -> OR .

    NUMBER          reduce using rule 52 (conector -> OR .)
    STRING          reduce using rule 52 (conector -> OR .)
    BOOLEAN         reduce using rule 52 (conector -> OR .)
    INSTANCE_VAR    reduce using rule 52 (conector -> OR .)
    GLOBAL_VAR      reduce using rule 52 (conector -> OR .)
    ID              reduce using rule 52 (conector -> OR .)


state 69

    (88) while_loop -> WHILE condition . DO codigo END

    DO              shift and go to state 109


state 70

    (50) condition -> value . operComp value
    (53) operComp -> . LESSTHAN
    (54) operComp -> . GREATERTHAN
    (55) operComp -> . GREATEROREQUAL
    (56) operComp -> . LESSOREQUAL
    (57) operComp -> . EQUAL
    (58) operComp -> . NOTEQUAL

    LESSTHAN        shift and go to state 46
    GREATERTHAN     shift and go to state 47
    GREATEROREQUAL  shift and go to state 48
    LESSOREQUAL     shift and go to state 49
    EQUAL           shift and go to state 50
    NOTEQUAL        shift and go to state 51

    operComp                       shift and go to state 45

state 71

    (71) case -> CASE whens . END
    (70) whens -> whens .

  ! shift/reduce conflict for END resolved as shift
    END             shift and go to state 110

  ! END             [ reduce using rule 70 (whens -> whens .) ]


state 72

    (69) whens -> when .

    END             reduce using rule 69 (whens -> when .)


state 73

    (68) when -> WHEN . conditions codigo
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    conditions                     shift and go to state 111
    condition                      shift and go to state 26
    value                          shift and go to state 70

state 74

    (72) Sfunction -> DEF ID . codigo END
    (75) p_function_one_parameter -> DEF ID . LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> DEF ID . LPAREN ID COMMA ID RPAREN codigo END
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    LPAREN          shift and go to state 113
    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 112
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    condition                      shift and go to state 26
    if_block                       shift and go to state 36

state 75

    (41) array -> LBRACKET RBRACKET .

    $end            reduce using rule 41 (array -> LBRACKET RBRACKET .)
    END             reduce using rule 41 (array -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 41 (array -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 41 (array -> LBRACKET RBRACKET .)


state 76

    (42) array -> LBRACKET values . RBRACKET

    RBRACKET        shift and go to state 114


state 77

    (60) control_structures -> if_block elsif_blocks .
    (61) control_structures -> if_block elsif_blocks . else_block
    (65) elsif_blocks -> elsif_blocks . elsif_block
    (67) else_block -> . ELSE codigo
    (66) elsif_block -> . ELSIF condition codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    $end            reduce using rule 60 (control_structures -> if_block elsif_blocks .)
    END             reduce using rule 60 (control_structures -> if_block elsif_blocks .)
    ELSE            shift and go to state 80
    ELSIF           shift and go to state 81

  ! ELSE            [ reduce using rule 60 (control_structures -> if_block elsif_blocks .) ]
  ! ELSIF           [ reduce using rule 60 (control_structures -> if_block elsif_blocks .) ]

    else_block                     shift and go to state 115
    elsif_block                    shift and go to state 116

state 78

    (62) control_structures -> if_block else_block .

    $end            reduce using rule 62 (control_structures -> if_block else_block .)
    END             reduce using rule 62 (control_structures -> if_block else_block .)
    ELSE            reduce using rule 62 (control_structures -> if_block else_block .)
    ELSIF           reduce using rule 62 (control_structures -> if_block else_block .)


state 79

    (64) elsif_blocks -> elsif_block .

    $end            reduce using rule 64 (elsif_blocks -> elsif_block .)
    END             reduce using rule 64 (elsif_blocks -> elsif_block .)
    ELSE            reduce using rule 64 (elsif_blocks -> elsif_block .)
    ELSIF           reduce using rule 64 (elsif_blocks -> elsif_block .)


state 80

    (67) else_block -> ELSE . codigo
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 117
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    condition                      shift and go to state 26
    if_block                       shift and go to state 36

state 81

    (66) elsif_block -> ELSIF . condition codigo
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    condition                      shift and go to state 118
    value                          shift and go to state 70

state 82

    (43) hash -> LBRACE RBRACE .

    $end            reduce using rule 43 (hash -> LBRACE RBRACE .)
    END             reduce using rule 43 (hash -> LBRACE RBRACE .)
    ELSE            reduce using rule 43 (hash -> LBRACE RBRACE .)
    ELSIF           reduce using rule 43 (hash -> LBRACE RBRACE .)


state 83

    (44) hash -> LBRACE hash_contents . RBRACE
    (46) hash_contents -> hash_contents . COMMA hash_pair

    RBRACE          shift and go to state 119
    COMMA           shift and go to state 120


state 84

    (45) hash_contents -> hash_pair .

    RBRACE          reduce using rule 45 (hash_contents -> hash_pair .)
    COMMA           reduce using rule 45 (hash_contents -> hash_pair .)


state 85

    (47) hash_pair -> value . COLON value

    COLON           shift and go to state 121


state 86

    (63) if_block -> IF condition . codigo END
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    condition                      shift and go to state 26
    codigo                         shift and go to state 122
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    if_block                       shift and go to state 36

state 87

    (32) aritmeticExpresion -> aritmeticExpresion operator value .

    PLUS            reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MINUS           reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    TIMES           reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DIVIDE          reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MOD             reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    $end            reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    END             reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSE            reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSIF           reduce using rule 32 (aritmeticExpresion -> aritmeticExpresion operator value .)


state 88

    (25) assign -> INSTANCE_VAR ASSIGN value .

    $end            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN value .)
    END             reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSE            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSIF           reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN value .)


state 89

    (28) assign -> INSTANCE_VAR ASSIGN data_structure .

    $end            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    END             reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN data_structure .)


state 90

    (86) dataIn -> INSTANCE_VAR ASSIGN GETS .

    $end            reduce using rule 86 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    END             reduce using rule 86 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ELSE            reduce using rule 86 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 86 (dataIn -> INSTANCE_VAR ASSIGN GETS .)


state 91

    (38) data_structure -> array .

    $end            reduce using rule 38 (data_structure -> array .)
    END             reduce using rule 38 (data_structure -> array .)
    ELSE            reduce using rule 38 (data_structure -> array .)
    ELSIF           reduce using rule 38 (data_structure -> array .)


state 92

    (39) data_structure -> tupla .

    $end            reduce using rule 39 (data_structure -> tupla .)
    END             reduce using rule 39 (data_structure -> tupla .)
    ELSE            reduce using rule 39 (data_structure -> tupla .)
    ELSIF           reduce using rule 39 (data_structure -> tupla .)


state 93

    (40) data_structure -> hash .

    $end            reduce using rule 40 (data_structure -> hash .)
    END             reduce using rule 40 (data_structure -> hash .)
    ELSE            reduce using rule 40 (data_structure -> hash .)
    ELSIF           reduce using rule 40 (data_structure -> hash .)


state 94

    (31) aritmeticExpresion -> value operator value .

    PLUS            reduce using rule 31 (aritmeticExpresion -> value operator value .)
    MINUS           reduce using rule 31 (aritmeticExpresion -> value operator value .)
    TIMES           reduce using rule 31 (aritmeticExpresion -> value operator value .)
    DIVIDE          reduce using rule 31 (aritmeticExpresion -> value operator value .)
    MOD             reduce using rule 31 (aritmeticExpresion -> value operator value .)
    $end            reduce using rule 31 (aritmeticExpresion -> value operator value .)
    END             reduce using rule 31 (aritmeticExpresion -> value operator value .)
    ELSE            reduce using rule 31 (aritmeticExpresion -> value operator value .)
    ELSIF           reduce using rule 31 (aritmeticExpresion -> value operator value .)


state 95

    (50) condition -> value operComp value .

    AND             reduce using rule 50 (condition -> value operComp value .)
    OR              reduce using rule 50 (condition -> value operComp value .)
    $end            reduce using rule 50 (condition -> value operComp value .)
    DO              reduce using rule 50 (condition -> value operComp value .)
    INSTANCE_VAR    reduce using rule 50 (condition -> value operComp value .)
    GLOBAL_VAR      reduce using rule 50 (condition -> value operComp value .)
    ID              reduce using rule 50 (condition -> value operComp value .)
    PRINT           reduce using rule 50 (condition -> value operComp value .)
    PUTS            reduce using rule 50 (condition -> value operComp value .)
    P               reduce using rule 50 (condition -> value operComp value .)
    LPAREN          reduce using rule 50 (condition -> value operComp value .)
    WHILE           reduce using rule 50 (condition -> value operComp value .)
    CASE            reduce using rule 50 (condition -> value operComp value .)
    DEF             reduce using rule 50 (condition -> value operComp value .)
    LBRACKET        reduce using rule 50 (condition -> value operComp value .)
    PLUS            reduce using rule 50 (condition -> value operComp value .)
    MINUS           reduce using rule 50 (condition -> value operComp value .)
    TIMES           reduce using rule 50 (condition -> value operComp value .)
    DIVIDE          reduce using rule 50 (condition -> value operComp value .)
    MOD             reduce using rule 50 (condition -> value operComp value .)
    LBRACE          reduce using rule 50 (condition -> value operComp value .)
    NUMBER          reduce using rule 50 (condition -> value operComp value .)
    STRING          reduce using rule 50 (condition -> value operComp value .)
    BOOLEAN         reduce using rule 50 (condition -> value operComp value .)
    IF              reduce using rule 50 (condition -> value operComp value .)
    END             reduce using rule 50 (condition -> value operComp value .)
    ELSE            reduce using rule 50 (condition -> value operComp value .)
    ELSIF           reduce using rule 50 (condition -> value operComp value .)


state 96

    (26) assign -> GLOBAL_VAR ASSIGN value .

    $end            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN value .)
    END             reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSE            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSIF           reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN value .)


state 97

    (29) assign -> GLOBAL_VAR ASSIGN data_structure .

    $end            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    END             reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN data_structure .)


state 98

    (87) dataIn -> GLOBAL_VAR ASSIGN GETS .

    $end            reduce using rule 87 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    END             reduce using rule 87 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ELSE            reduce using rule 87 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 87 (dataIn -> GLOBAL_VAR ASSIGN GETS .)


state 99

    (27) assign -> ID ASSIGN value .

    $end            reduce using rule 27 (assign -> ID ASSIGN value .)
    END             reduce using rule 27 (assign -> ID ASSIGN value .)
    ELSE            reduce using rule 27 (assign -> ID ASSIGN value .)
    ELSIF           reduce using rule 27 (assign -> ID ASSIGN value .)


state 100

    (30) assign -> ID ASSIGN data_structure .

    $end            reduce using rule 30 (assign -> ID ASSIGN data_structure .)
    END             reduce using rule 30 (assign -> ID ASSIGN data_structure .)
    ELSE            reduce using rule 30 (assign -> ID ASSIGN data_structure .)
    ELSIF           reduce using rule 30 (assign -> ID ASSIGN data_structure .)


state 101

    (85) dataIn -> ID ASSIGN GETS .

    $end            reduce using rule 85 (dataIn -> ID ASSIGN GETS .)
    END             reduce using rule 85 (dataIn -> ID ASSIGN GETS .)
    ELSE            reduce using rule 85 (dataIn -> ID ASSIGN GETS .)
    ELSIF           reduce using rule 85 (dataIn -> ID ASSIGN GETS .)


state 102

    (74) p_SfunctionINV -> ID LPAREN RPAREN .

    $end            reduce using rule 74 (p_SfunctionINV -> ID LPAREN RPAREN .)
    END             reduce using rule 74 (p_SfunctionINV -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 74 (p_SfunctionINV -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 74 (p_SfunctionINV -> ID LPAREN RPAREN .)


state 103

    (77) impression -> PRINT LPAREN values . RPAREN

    RPAREN          shift and go to state 123


state 104

    (24) values -> value COMMA . values
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    value                          shift and go to state 57
    values                         shift and go to state 124

state 105

    (89) tupla -> LPAREN values RPAREN .

    $end            reduce using rule 89 (tupla -> LPAREN values RPAREN .)
    END             reduce using rule 89 (tupla -> LPAREN values RPAREN .)
    ELSE            reduce using rule 89 (tupla -> LPAREN values RPAREN .)
    ELSIF           reduce using rule 89 (tupla -> LPAREN values RPAREN .)


state 106

    (80) impression -> PUTS LPAREN values . RPAREN

    RPAREN          shift and go to state 125


state 107

    (81) impression -> P LPAREN values . RPAREN

    RPAREN          shift and go to state 126


state 108

    (49) conditions -> condition conector conditions .

    $end            reduce using rule 49 (conditions -> condition conector conditions .)
    INSTANCE_VAR    reduce using rule 49 (conditions -> condition conector conditions .)
    GLOBAL_VAR      reduce using rule 49 (conditions -> condition conector conditions .)
    ID              reduce using rule 49 (conditions -> condition conector conditions .)
    PRINT           reduce using rule 49 (conditions -> condition conector conditions .)
    PUTS            reduce using rule 49 (conditions -> condition conector conditions .)
    P               reduce using rule 49 (conditions -> condition conector conditions .)
    LPAREN          reduce using rule 49 (conditions -> condition conector conditions .)
    WHILE           reduce using rule 49 (conditions -> condition conector conditions .)
    CASE            reduce using rule 49 (conditions -> condition conector conditions .)
    DEF             reduce using rule 49 (conditions -> condition conector conditions .)
    LBRACKET        reduce using rule 49 (conditions -> condition conector conditions .)
    PLUS            reduce using rule 49 (conditions -> condition conector conditions .)
    MINUS           reduce using rule 49 (conditions -> condition conector conditions .)
    TIMES           reduce using rule 49 (conditions -> condition conector conditions .)
    DIVIDE          reduce using rule 49 (conditions -> condition conector conditions .)
    MOD             reduce using rule 49 (conditions -> condition conector conditions .)
    LBRACE          reduce using rule 49 (conditions -> condition conector conditions .)
    NUMBER          reduce using rule 49 (conditions -> condition conector conditions .)
    STRING          reduce using rule 49 (conditions -> condition conector conditions .)
    BOOLEAN         reduce using rule 49 (conditions -> condition conector conditions .)
    IF              reduce using rule 49 (conditions -> condition conector conditions .)
    END             reduce using rule 49 (conditions -> condition conector conditions .)
    ELSE            reduce using rule 49 (conditions -> condition conector conditions .)
    ELSIF           reduce using rule 49 (conditions -> condition conector conditions .)


state 109

    (88) while_loop -> WHILE condition DO . codigo END
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    condition                      shift and go to state 26
    codigo                         shift and go to state 127
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    if_block                       shift and go to state 36

state 110

    (71) case -> CASE whens END .

    $end            reduce using rule 71 (case -> CASE whens END .)
    END             reduce using rule 71 (case -> CASE whens END .)
    ELSE            reduce using rule 71 (case -> CASE whens END .)
    ELSIF           reduce using rule 71 (case -> CASE whens END .)


state 111

    (68) when -> WHEN conditions . codigo
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 5
    codigo                         shift and go to state 128
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    condition                      shift and go to state 26
    if_block                       shift and go to state 36

state 112

    (72) Sfunction -> DEF ID codigo . END

    END             shift and go to state 129


state 113

    (75) p_function_one_parameter -> DEF ID LPAREN . ID RPAREN codigo END
    (76) p_function_two_parameter -> DEF ID LPAREN . ID COMMA ID RPAREN codigo END
    (89) tupla -> LPAREN . values RPAREN
    (23) values -> . value
    (24) values -> . value COMMA values
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    ID              shift and go to state 130
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59

    values                         shift and go to state 61
    value                          shift and go to state 57

state 114

    (42) array -> LBRACKET values RBRACKET .

    $end            reduce using rule 42 (array -> LBRACKET values RBRACKET .)
    END             reduce using rule 42 (array -> LBRACKET values RBRACKET .)
    ELSE            reduce using rule 42 (array -> LBRACKET values RBRACKET .)
    ELSIF           reduce using rule 42 (array -> LBRACKET values RBRACKET .)


state 115

    (61) control_structures -> if_block elsif_blocks else_block .

    $end            reduce using rule 61 (control_structures -> if_block elsif_blocks else_block .)
    END             reduce using rule 61 (control_structures -> if_block elsif_blocks else_block .)
    ELSE            reduce using rule 61 (control_structures -> if_block elsif_blocks else_block .)
    ELSIF           reduce using rule 61 (control_structures -> if_block elsif_blocks else_block .)


state 116

    (65) elsif_blocks -> elsif_blocks elsif_block .

    $end            reduce using rule 65 (elsif_blocks -> elsif_blocks elsif_block .)
    END             reduce using rule 65 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSE            reduce using rule 65 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSIF           reduce using rule 65 (elsif_blocks -> elsif_blocks elsif_block .)


state 117

    (67) else_block -> ELSE codigo .

    $end            reduce using rule 67 (else_block -> ELSE codigo .)
    END             reduce using rule 67 (else_block -> ELSE codigo .)
    ELSE            reduce using rule 67 (else_block -> ELSE codigo .)
    ELSIF           reduce using rule 67 (else_block -> ELSE codigo .)


state 118

    (66) elsif_block -> ELSIF condition . codigo
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    condition                      shift and go to state 26
    codigo                         shift and go to state 131
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    if_block                       shift and go to state 36

state 119

    (44) hash -> LBRACE hash_contents RBRACE .

    $end            reduce using rule 44 (hash -> LBRACE hash_contents RBRACE .)
    END             reduce using rule 44 (hash -> LBRACE hash_contents RBRACE .)
    ELSE            reduce using rule 44 (hash -> LBRACE hash_contents RBRACE .)
    ELSIF           reduce using rule 44 (hash -> LBRACE hash_contents RBRACE .)


state 120

    (46) hash_contents -> hash_contents COMMA . hash_pair
    (47) hash_pair -> . value COLON value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    hash_pair                      shift and go to state 132
    value                          shift and go to state 85

state 121

    (47) hash_pair -> value COLON . value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID

    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    INSTANCE_VAR    shift and go to state 58
    GLOBAL_VAR      shift and go to state 59
    ID              shift and go to state 60

    value                          shift and go to state 133

state 122

    (63) if_block -> IF condition codigo . END

    END             shift and go to state 134


state 123

    (77) impression -> PRINT LPAREN values RPAREN .

    $end            reduce using rule 77 (impression -> PRINT LPAREN values RPAREN .)
    END             reduce using rule 77 (impression -> PRINT LPAREN values RPAREN .)
    ELSE            reduce using rule 77 (impression -> PRINT LPAREN values RPAREN .)
    ELSIF           reduce using rule 77 (impression -> PRINT LPAREN values RPAREN .)


state 124

    (24) values -> value COMMA values .

    $end            reduce using rule 24 (values -> value COMMA values .)
    END             reduce using rule 24 (values -> value COMMA values .)
    ELSE            reduce using rule 24 (values -> value COMMA values .)
    ELSIF           reduce using rule 24 (values -> value COMMA values .)
    RPAREN          reduce using rule 24 (values -> value COMMA values .)
    RBRACKET        reduce using rule 24 (values -> value COMMA values .)


state 125

    (80) impression -> PUTS LPAREN values RPAREN .

    $end            reduce using rule 80 (impression -> PUTS LPAREN values RPAREN .)
    END             reduce using rule 80 (impression -> PUTS LPAREN values RPAREN .)
    ELSE            reduce using rule 80 (impression -> PUTS LPAREN values RPAREN .)
    ELSIF           reduce using rule 80 (impression -> PUTS LPAREN values RPAREN .)


state 126

    (81) impression -> P LPAREN values RPAREN .

    $end            reduce using rule 81 (impression -> P LPAREN values RPAREN .)
    END             reduce using rule 81 (impression -> P LPAREN values RPAREN .)
    ELSE            reduce using rule 81 (impression -> P LPAREN values RPAREN .)
    ELSIF           reduce using rule 81 (impression -> P LPAREN values RPAREN .)


state 127

    (88) while_loop -> WHILE condition DO codigo . END

    END             shift and go to state 135


state 128

    (68) when -> WHEN conditions codigo .

    END             reduce using rule 68 (when -> WHEN conditions codigo .)


state 129

    (72) Sfunction -> DEF ID codigo END .

    $end            reduce using rule 72 (Sfunction -> DEF ID codigo END .)
    END             reduce using rule 72 (Sfunction -> DEF ID codigo END .)
    ELSE            reduce using rule 72 (Sfunction -> DEF ID codigo END .)
    ELSIF           reduce using rule 72 (Sfunction -> DEF ID codigo END .)


state 130

    (75) p_function_one_parameter -> DEF ID LPAREN ID . RPAREN codigo END
    (76) p_function_two_parameter -> DEF ID LPAREN ID . COMMA ID RPAREN codigo END
    (22) value -> ID .

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 136
    COMMA           shift and go to state 137

  ! COMMA           [ reduce using rule 22 (value -> ID .) ]
  ! RPAREN          [ reduce using rule 22 (value -> ID .) ]


state 131

    (66) elsif_block -> ELSIF condition codigo .

    $end            reduce using rule 66 (elsif_block -> ELSIF condition codigo .)
    END             reduce using rule 66 (elsif_block -> ELSIF condition codigo .)
    ELSE            reduce using rule 66 (elsif_block -> ELSIF condition codigo .)
    ELSIF           reduce using rule 66 (elsif_block -> ELSIF condition codigo .)


state 132

    (46) hash_contents -> hash_contents COMMA hash_pair .

    RBRACE          reduce using rule 46 (hash_contents -> hash_contents COMMA hash_pair .)
    COMMA           reduce using rule 46 (hash_contents -> hash_contents COMMA hash_pair .)


state 133

    (47) hash_pair -> value COLON value .

    RBRACE          reduce using rule 47 (hash_pair -> value COLON value .)
    COMMA           reduce using rule 47 (hash_pair -> value COLON value .)


state 134

    (63) if_block -> IF condition codigo END .

    ELSE            reduce using rule 63 (if_block -> IF condition codigo END .)
    ELSIF           reduce using rule 63 (if_block -> IF condition codigo END .)
    $end            reduce using rule 63 (if_block -> IF condition codigo END .)
    END             reduce using rule 63 (if_block -> IF condition codigo END .)


state 135

    (88) while_loop -> WHILE condition DO codigo END .

    $end            reduce using rule 88 (while_loop -> WHILE condition DO codigo END .)
    END             reduce using rule 88 (while_loop -> WHILE condition DO codigo END .)
    ELSE            reduce using rule 88 (while_loop -> WHILE condition DO codigo END .)
    ELSIF           reduce using rule 88 (while_loop -> WHILE condition DO codigo END .)


state 136

    (75) p_function_one_parameter -> DEF ID LPAREN ID RPAREN . codigo END
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 138
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    condition                      shift and go to state 26
    if_block                       shift and go to state 36

state 137

    (76) p_function_two_parameter -> DEF ID LPAREN ID COMMA . ID RPAREN codigo END

    ID              shift and go to state 139


state 138

    (75) p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo . END

    END             shift and go to state 140


state 139

    (76) p_function_two_parameter -> DEF ID LPAREN ID COMMA ID . RPAREN codigo END

    RPAREN          shift and go to state 141


state 140

    (75) p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END .

    $end            reduce using rule 75 (p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END .)
    END             reduce using rule 75 (p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END .)
    ELSE            reduce using rule 75 (p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END .)
    ELSIF           reduce using rule 75 (p_function_one_parameter -> DEF ID LPAREN ID RPAREN codigo END .)


state 141

    (76) p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN . codigo END
    (1) codigo -> . assign
    (2) codigo -> . impression
    (3) codigo -> . tupla
    (4) codigo -> . conditions
    (5) codigo -> . while_loop
    (6) codigo -> . case
    (7) codigo -> . Sfunction
    (8) codigo -> . array
    (9) codigo -> . p_SfunctionINV
    (10) codigo -> . p_function_one_parameter
    (11) codigo -> . p_function_two_parameter
    (12) codigo -> . aritmeticExpresion
    (13) codigo -> . operator
    (14) codigo -> . dataIn
    (15) codigo -> . control_structures
    (16) codigo -> . hash
    (25) assign -> . INSTANCE_VAR ASSIGN value
    (26) assign -> . GLOBAL_VAR ASSIGN value
    (27) assign -> . ID ASSIGN value
    (28) assign -> . INSTANCE_VAR ASSIGN data_structure
    (29) assign -> . GLOBAL_VAR ASSIGN data_structure
    (30) assign -> . ID ASSIGN data_structure
    (77) impression -> . PRINT LPAREN values RPAREN
    (78) impression -> . PRINT values
    (79) impression -> . PUTS values
    (80) impression -> . PUTS LPAREN values RPAREN
    (81) impression -> . P LPAREN values RPAREN
    (82) impression -> . P values
    (83) impression -> . PRINT
    (84) impression -> . PUTS
    (89) tupla -> . LPAREN values RPAREN
    (48) conditions -> . condition
    (49) conditions -> . condition conector conditions
    (88) while_loop -> . WHILE condition DO codigo END
    (71) case -> . CASE whens END
    (72) Sfunction -> . DEF ID codigo END
    (41) array -> . LBRACKET RBRACKET
    (42) array -> . LBRACKET values RBRACKET
    (73) p_SfunctionINV -> . ID
    (74) p_SfunctionINV -> . ID LPAREN RPAREN
    (75) p_function_one_parameter -> . DEF ID LPAREN ID RPAREN codigo END
    (76) p_function_two_parameter -> . DEF ID LPAREN ID COMMA ID RPAREN codigo END
    (31) aritmeticExpresion -> . value operator value
    (32) aritmeticExpresion -> . aritmeticExpresion operator value
    (33) operator -> . PLUS
    (34) operator -> . MINUS
    (35) operator -> . TIMES
    (36) operator -> . DIVIDE
    (37) operator -> . MOD
    (85) dataIn -> . ID ASSIGN GETS
    (86) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (87) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (59) control_structures -> . if_block
    (60) control_structures -> . if_block elsif_blocks
    (61) control_structures -> . if_block elsif_blocks else_block
    (62) control_structures -> . if_block else_block
    (43) hash -> . LBRACE RBRACE
    (44) hash -> . LBRACE hash_contents RBRACE
    (50) condition -> . value operComp value
    (17) value -> . NUMBER
    (18) value -> . STRING
    (19) value -> . BOOLEAN
    (20) value -> . INSTANCE_VAR
    (21) value -> . GLOBAL_VAR
    (22) value -> . ID
    (63) if_block -> . IF condition codigo END

    INSTANCE_VAR    shift and go to state 18
    GLOBAL_VAR      shift and go to state 20
    ID              shift and go to state 21
    PRINT           shift and go to state 22
    PUTS            shift and go to state 24
    P               shift and go to state 25
    LPAREN          shift and go to state 23
    WHILE           shift and go to state 27
    CASE            shift and go to state 28
    DEF             shift and go to state 29
    LBRACKET        shift and go to state 30
    PLUS            shift and go to state 31
    MINUS           shift and go to state 32
    TIMES           shift and go to state 33
    DIVIDE          shift and go to state 34
    MOD             shift and go to state 35
    LBRACE          shift and go to state 37
    NUMBER          shift and go to state 38
    STRING          shift and go to state 39
    BOOLEAN         shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 142
    assign                         shift and go to state 2
    impression                     shift and go to state 3
    tupla                          shift and go to state 4
    conditions                     shift and go to state 5
    while_loop                     shift and go to state 6
    case                           shift and go to state 7
    Sfunction                      shift and go to state 8
    array                          shift and go to state 9
    p_SfunctionINV                 shift and go to state 10
    p_function_one_parameter       shift and go to state 11
    p_function_two_parameter       shift and go to state 12
    aritmeticExpresion             shift and go to state 13
    operator                       shift and go to state 14
    dataIn                         shift and go to state 15
    control_structures             shift and go to state 16
    hash                           shift and go to state 17
    value                          shift and go to state 19
    condition                      shift and go to state 26
    if_block                       shift and go to state 36

state 142

    (76) p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo . END

    END             shift and go to state 143


state 143

    (76) p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END .

    $end            reduce using rule 76 (p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END .)
    END             reduce using rule 76 (p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END .)
    ELSE            reduce using rule 76 (p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END .)
    ELSIF           reduce using rule 76 (p_function_two_parameter -> DEF ID LPAREN ID COMMA ID RPAREN codigo END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 36 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 36 resolved as shift
WARNING: shift/reduce conflict for END in state 71 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 77 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 77 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 130 resolved as shift
WARNING: shift/reduce conflict for RPAREN in state 130 resolved as shift
