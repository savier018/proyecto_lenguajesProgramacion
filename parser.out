Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    BREAK
    CLASS
    CONST
    DAPOSTROPHE
    DO
    DOT
    FALSE
    FOR
    IN
    NIL
    NONE
    NOT
    RETURN
    SEMICOLON
    TRUE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> statement
Rule 2     codigo -> codigo statement
Rule 3     statement -> assign
Rule 4     statement -> impression
Rule 5     statement -> tupla
Rule 6     statement -> conditions
Rule 7     statement -> while_loop
Rule 8     statement -> case
Rule 9     statement -> Sfunction
Rule 10    statement -> array
Rule 11    statement -> p_SfunctionINV
Rule 12    statement -> p_function_one_parameter
Rule 13    statement -> p_function_two_parameter
Rule 14    statement -> function_call
Rule 15    statement -> aritmeticExpresion
Rule 16    statement -> operator
Rule 17    statement -> dataIn
Rule 18    statement -> control_structures
Rule 19    statement -> hash
Rule 20    value -> NUMBER
Rule 21    value -> STRING
Rule 22    value -> INSTANCE_VAR
Rule 23    value -> GLOBAL_VAR
Rule 24    value -> ID
Rule 25    values -> value
Rule 26    values -> value COMMA values
Rule 27    assign -> INSTANCE_VAR ASSIGN value
Rule 28    assign -> GLOBAL_VAR ASSIGN value
Rule 29    assign -> ID ASSIGN value
Rule 30    assign -> INSTANCE_VAR ASSIGN data_structure
Rule 31    assign -> GLOBAL_VAR ASSIGN data_structure
Rule 32    assign -> ID ASSIGN data_structure
Rule 33    aritmeticExpresion -> value operator value
Rule 34    aritmeticExpresion -> aritmeticExpresion operator value
Rule 35    operator -> PLUS
Rule 36    operator -> MINUS
Rule 37    operator -> TIMES
Rule 38    operator -> DIVIDE
Rule 39    operator -> MOD
Rule 40    operator -> LPAREN aritmeticExpresion RPAREN
Rule 41    data_structure -> array
Rule 42    data_structure -> tupla
Rule 43    data_structure -> hash
Rule 44    array -> LBRACKET RBRACKET
Rule 45    array -> LBRACKET values RBRACKET
Rule 46    hash -> LBRACE RBRACE
Rule 47    hash -> LBRACE hash_contents RBRACE
Rule 48    hash_contents -> hash_pair
Rule 49    hash_contents -> hash_contents COMMA hash_pair
Rule 50    hash_pair -> value COLON value
Rule 51    conditions -> condition
Rule 52    conditions -> condition conector conditions
Rule 53    condition -> value operComp value
Rule 54    condition -> value operComp aritmeticExpresion
Rule 55    conector -> AND
Rule 56    conector -> OR
Rule 57    operComp -> LESSTHAN
Rule 58    operComp -> GREATERTHAN
Rule 59    operComp -> GREATEROREQUAL
Rule 60    operComp -> LESSOREQUAL
Rule 61    operComp -> EQUAL
Rule 62    operComp -> NOTEQUAL
Rule 63    control_structures -> if_block
Rule 64    control_structures -> if_block elsif_blocks
Rule 65    control_structures -> if_block elsif_blocks else_block
Rule 66    control_structures -> if_block else_block
Rule 67    if_block -> IF LPAREN conditions RPAREN codigo
Rule 68    if_block -> IF LPAREN conditions RPAREN codigo END
Rule 69    elsif_blocks -> elsif_block
Rule 70    elsif_blocks -> elsif_blocks elsif_block
Rule 71    elsif_block -> ELSIF LPAREN conditions RPAREN codigo
Rule 72    else_block -> ELSE codigo END
Rule 73    when -> WHEN conditions codigo
Rule 74    whens -> when
Rule 75    whens -> whens when
Rule 76    case -> CASE whens END
Rule 77    Sfunction -> DEF ID LPAREN RPAREN codigo END
Rule 78    p_SfunctionINV -> ID
Rule 79    p_SfunctionINV -> ID LPAREN params RPAREN
Rule 80    p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END
Rule 81    p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END
Rule 82    param -> value
Rule 83    params -> value COMMA value
Rule 84    function_call -> ID LPAREN RPAREN
Rule 85    function_call -> ID LPAREN params RPAREN
Rule 86    function_call -> ID LPAREN param RPAREN
Rule 87    impression -> PRINT LPAREN value RPAREN
Rule 88    impression -> PRINT value
Rule 89    impression -> PUTS value
Rule 90    impression -> PUTS LPAREN value RPAREN
Rule 91    impression -> P LPAREN value RPAREN
Rule 92    impression -> P value
Rule 93    dataIn -> ID ASSIGN GETS
Rule 94    dataIn -> INSTANCE_VAR ASSIGN GETS
Rule 95    dataIn -> GLOBAL_VAR ASSIGN GETS
Rule 96    while_loop -> WHILE LPAREN conditions RPAREN codigo END
Rule 97    tupla -> LPAREN values RPAREN

Terminals, with rules where they appear

AND                  : 55
APOSTROPHE           : 
ASSIGN               : 27 28 29 30 31 32 93 94 95
BREAK                : 
CASE                 : 76
CLASS                : 
COLON                : 50
COMMA                : 26 49 83
CONST                : 
DAPOSTROPHE          : 
DEF                  : 77 80 81
DIVIDE               : 38
DO                   : 
DOT                  : 
ELSE                 : 72
ELSIF                : 71
END                  : 68 72 76 77 80 81 96
EQUAL                : 61
FALSE                : 
FOR                  : 
GETS                 : 93 94 95
GLOBAL_VAR           : 23 28 31 95
GREATEROREQUAL       : 59
GREATERTHAN          : 58
ID                   : 24 29 32 77 78 79 80 81 84 85 86 93
IF                   : 67 68
IN                   : 
INSTANCE_VAR         : 22 27 30 94
LBRACE               : 46 47
LBRACKET             : 44 45
LESSOREQUAL          : 60
LESSTHAN             : 57
LPAREN               : 40 67 68 71 77 79 80 81 84 85 86 87 90 91 96 97
MINUS                : 36
MOD                  : 39
NIL                  : 
NONE                 : 
NOT                  : 
NOTEQUAL             : 62
NUMBER               : 20
OR                   : 56
P                    : 91 92
PLUS                 : 35
PRINT                : 87 88
PUTS                 : 89 90
RBRACE               : 46 47
RBRACKET             : 44 45
RETURN               : 
RPAREN               : 40 67 68 71 77 79 80 81 84 85 86 87 90 91 96 97
SEMICOLON            : 
STRING               : 21
TIMES                : 37
TRUE                 : 
WHEN                 : 73
WHILE                : 96
error                : 

Nonterminals, with rules where they appear

Sfunction            : 9
aritmeticExpresion   : 15 34 40 54
array                : 10 41
assign               : 3
case                 : 8
codigo               : 2 67 68 71 72 73 77 80 81 96 0
condition            : 51 52
conditions           : 6 52 67 68 71 73 96
conector             : 52
control_structures   : 18
dataIn               : 17
data_structure       : 30 31 32
else_block           : 65 66
elsif_block          : 69 70
elsif_blocks         : 64 65 70
function_call        : 14
hash                 : 19 43
hash_contents        : 47 49
hash_pair            : 48 49
if_block             : 63 64 65 66
impression           : 4
operComp             : 53 54
operator             : 16 33 34
p_SfunctionINV       : 11
p_function_one_parameter : 12
p_function_two_parameter : 13
param                : 80 86
params               : 79 81 85
statement            : 1 2
tupla                : 5 42
value                : 25 26 27 28 29 33 33 34 50 50 53 53 54 82 83 83 87 88 89 90 91 92
values               : 26 45 97
when                 : 74 75
whens                : 75 76
while_loop           : 7

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    codigo                         shift and go to state 1
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 1

    (0) S' -> codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 2

    (1) codigo -> statement .

    INSTANCE_VAR    reduce using rule 1 (codigo -> statement .)
    GLOBAL_VAR      reduce using rule 1 (codigo -> statement .)
    ID              reduce using rule 1 (codigo -> statement .)
    PRINT           reduce using rule 1 (codigo -> statement .)
    PUTS            reduce using rule 1 (codigo -> statement .)
    P               reduce using rule 1 (codigo -> statement .)
    LPAREN          reduce using rule 1 (codigo -> statement .)
    WHILE           reduce using rule 1 (codigo -> statement .)
    CASE            reduce using rule 1 (codigo -> statement .)
    DEF             reduce using rule 1 (codigo -> statement .)
    LBRACKET        reduce using rule 1 (codigo -> statement .)
    PLUS            reduce using rule 1 (codigo -> statement .)
    MINUS           reduce using rule 1 (codigo -> statement .)
    TIMES           reduce using rule 1 (codigo -> statement .)
    DIVIDE          reduce using rule 1 (codigo -> statement .)
    MOD             reduce using rule 1 (codigo -> statement .)
    LBRACE          reduce using rule 1 (codigo -> statement .)
    NUMBER          reduce using rule 1 (codigo -> statement .)
    STRING          reduce using rule 1 (codigo -> statement .)
    IF              reduce using rule 1 (codigo -> statement .)
    $end            reduce using rule 1 (codigo -> statement .)
    END             reduce using rule 1 (codigo -> statement .)
    WHEN            reduce using rule 1 (codigo -> statement .)
    ELSE            reduce using rule 1 (codigo -> statement .)
    ELSIF           reduce using rule 1 (codigo -> statement .)


state 3

    (3) statement -> assign .

    INSTANCE_VAR    reduce using rule 3 (statement -> assign .)
    GLOBAL_VAR      reduce using rule 3 (statement -> assign .)
    ID              reduce using rule 3 (statement -> assign .)
    PRINT           reduce using rule 3 (statement -> assign .)
    PUTS            reduce using rule 3 (statement -> assign .)
    P               reduce using rule 3 (statement -> assign .)
    LPAREN          reduce using rule 3 (statement -> assign .)
    WHILE           reduce using rule 3 (statement -> assign .)
    CASE            reduce using rule 3 (statement -> assign .)
    DEF             reduce using rule 3 (statement -> assign .)
    LBRACKET        reduce using rule 3 (statement -> assign .)
    PLUS            reduce using rule 3 (statement -> assign .)
    MINUS           reduce using rule 3 (statement -> assign .)
    TIMES           reduce using rule 3 (statement -> assign .)
    DIVIDE          reduce using rule 3 (statement -> assign .)
    MOD             reduce using rule 3 (statement -> assign .)
    LBRACE          reduce using rule 3 (statement -> assign .)
    NUMBER          reduce using rule 3 (statement -> assign .)
    STRING          reduce using rule 3 (statement -> assign .)
    IF              reduce using rule 3 (statement -> assign .)
    $end            reduce using rule 3 (statement -> assign .)
    END             reduce using rule 3 (statement -> assign .)
    WHEN            reduce using rule 3 (statement -> assign .)
    ELSE            reduce using rule 3 (statement -> assign .)
    ELSIF           reduce using rule 3 (statement -> assign .)


state 4

    (4) statement -> impression .

    INSTANCE_VAR    reduce using rule 4 (statement -> impression .)
    GLOBAL_VAR      reduce using rule 4 (statement -> impression .)
    ID              reduce using rule 4 (statement -> impression .)
    PRINT           reduce using rule 4 (statement -> impression .)
    PUTS            reduce using rule 4 (statement -> impression .)
    P               reduce using rule 4 (statement -> impression .)
    LPAREN          reduce using rule 4 (statement -> impression .)
    WHILE           reduce using rule 4 (statement -> impression .)
    CASE            reduce using rule 4 (statement -> impression .)
    DEF             reduce using rule 4 (statement -> impression .)
    LBRACKET        reduce using rule 4 (statement -> impression .)
    PLUS            reduce using rule 4 (statement -> impression .)
    MINUS           reduce using rule 4 (statement -> impression .)
    TIMES           reduce using rule 4 (statement -> impression .)
    DIVIDE          reduce using rule 4 (statement -> impression .)
    MOD             reduce using rule 4 (statement -> impression .)
    LBRACE          reduce using rule 4 (statement -> impression .)
    NUMBER          reduce using rule 4 (statement -> impression .)
    STRING          reduce using rule 4 (statement -> impression .)
    IF              reduce using rule 4 (statement -> impression .)
    $end            reduce using rule 4 (statement -> impression .)
    END             reduce using rule 4 (statement -> impression .)
    WHEN            reduce using rule 4 (statement -> impression .)
    ELSE            reduce using rule 4 (statement -> impression .)
    ELSIF           reduce using rule 4 (statement -> impression .)


state 5

    (5) statement -> tupla .

    INSTANCE_VAR    reduce using rule 5 (statement -> tupla .)
    GLOBAL_VAR      reduce using rule 5 (statement -> tupla .)
    ID              reduce using rule 5 (statement -> tupla .)
    PRINT           reduce using rule 5 (statement -> tupla .)
    PUTS            reduce using rule 5 (statement -> tupla .)
    P               reduce using rule 5 (statement -> tupla .)
    LPAREN          reduce using rule 5 (statement -> tupla .)
    WHILE           reduce using rule 5 (statement -> tupla .)
    CASE            reduce using rule 5 (statement -> tupla .)
    DEF             reduce using rule 5 (statement -> tupla .)
    LBRACKET        reduce using rule 5 (statement -> tupla .)
    PLUS            reduce using rule 5 (statement -> tupla .)
    MINUS           reduce using rule 5 (statement -> tupla .)
    TIMES           reduce using rule 5 (statement -> tupla .)
    DIVIDE          reduce using rule 5 (statement -> tupla .)
    MOD             reduce using rule 5 (statement -> tupla .)
    LBRACE          reduce using rule 5 (statement -> tupla .)
    NUMBER          reduce using rule 5 (statement -> tupla .)
    STRING          reduce using rule 5 (statement -> tupla .)
    IF              reduce using rule 5 (statement -> tupla .)
    $end            reduce using rule 5 (statement -> tupla .)
    END             reduce using rule 5 (statement -> tupla .)
    WHEN            reduce using rule 5 (statement -> tupla .)
    ELSE            reduce using rule 5 (statement -> tupla .)
    ELSIF           reduce using rule 5 (statement -> tupla .)


state 6

    (6) statement -> conditions .

    INSTANCE_VAR    reduce using rule 6 (statement -> conditions .)
    GLOBAL_VAR      reduce using rule 6 (statement -> conditions .)
    ID              reduce using rule 6 (statement -> conditions .)
    PRINT           reduce using rule 6 (statement -> conditions .)
    PUTS            reduce using rule 6 (statement -> conditions .)
    P               reduce using rule 6 (statement -> conditions .)
    LPAREN          reduce using rule 6 (statement -> conditions .)
    WHILE           reduce using rule 6 (statement -> conditions .)
    CASE            reduce using rule 6 (statement -> conditions .)
    DEF             reduce using rule 6 (statement -> conditions .)
    LBRACKET        reduce using rule 6 (statement -> conditions .)
    PLUS            reduce using rule 6 (statement -> conditions .)
    MINUS           reduce using rule 6 (statement -> conditions .)
    TIMES           reduce using rule 6 (statement -> conditions .)
    DIVIDE          reduce using rule 6 (statement -> conditions .)
    MOD             reduce using rule 6 (statement -> conditions .)
    LBRACE          reduce using rule 6 (statement -> conditions .)
    NUMBER          reduce using rule 6 (statement -> conditions .)
    STRING          reduce using rule 6 (statement -> conditions .)
    IF              reduce using rule 6 (statement -> conditions .)
    $end            reduce using rule 6 (statement -> conditions .)
    END             reduce using rule 6 (statement -> conditions .)
    WHEN            reduce using rule 6 (statement -> conditions .)
    ELSE            reduce using rule 6 (statement -> conditions .)
    ELSIF           reduce using rule 6 (statement -> conditions .)


state 7

    (7) statement -> while_loop .

    INSTANCE_VAR    reduce using rule 7 (statement -> while_loop .)
    GLOBAL_VAR      reduce using rule 7 (statement -> while_loop .)
    ID              reduce using rule 7 (statement -> while_loop .)
    PRINT           reduce using rule 7 (statement -> while_loop .)
    PUTS            reduce using rule 7 (statement -> while_loop .)
    P               reduce using rule 7 (statement -> while_loop .)
    LPAREN          reduce using rule 7 (statement -> while_loop .)
    WHILE           reduce using rule 7 (statement -> while_loop .)
    CASE            reduce using rule 7 (statement -> while_loop .)
    DEF             reduce using rule 7 (statement -> while_loop .)
    LBRACKET        reduce using rule 7 (statement -> while_loop .)
    PLUS            reduce using rule 7 (statement -> while_loop .)
    MINUS           reduce using rule 7 (statement -> while_loop .)
    TIMES           reduce using rule 7 (statement -> while_loop .)
    DIVIDE          reduce using rule 7 (statement -> while_loop .)
    MOD             reduce using rule 7 (statement -> while_loop .)
    LBRACE          reduce using rule 7 (statement -> while_loop .)
    NUMBER          reduce using rule 7 (statement -> while_loop .)
    STRING          reduce using rule 7 (statement -> while_loop .)
    IF              reduce using rule 7 (statement -> while_loop .)
    $end            reduce using rule 7 (statement -> while_loop .)
    END             reduce using rule 7 (statement -> while_loop .)
    WHEN            reduce using rule 7 (statement -> while_loop .)
    ELSE            reduce using rule 7 (statement -> while_loop .)
    ELSIF           reduce using rule 7 (statement -> while_loop .)


state 8

    (8) statement -> case .

    INSTANCE_VAR    reduce using rule 8 (statement -> case .)
    GLOBAL_VAR      reduce using rule 8 (statement -> case .)
    ID              reduce using rule 8 (statement -> case .)
    PRINT           reduce using rule 8 (statement -> case .)
    PUTS            reduce using rule 8 (statement -> case .)
    P               reduce using rule 8 (statement -> case .)
    LPAREN          reduce using rule 8 (statement -> case .)
    WHILE           reduce using rule 8 (statement -> case .)
    CASE            reduce using rule 8 (statement -> case .)
    DEF             reduce using rule 8 (statement -> case .)
    LBRACKET        reduce using rule 8 (statement -> case .)
    PLUS            reduce using rule 8 (statement -> case .)
    MINUS           reduce using rule 8 (statement -> case .)
    TIMES           reduce using rule 8 (statement -> case .)
    DIVIDE          reduce using rule 8 (statement -> case .)
    MOD             reduce using rule 8 (statement -> case .)
    LBRACE          reduce using rule 8 (statement -> case .)
    NUMBER          reduce using rule 8 (statement -> case .)
    STRING          reduce using rule 8 (statement -> case .)
    IF              reduce using rule 8 (statement -> case .)
    $end            reduce using rule 8 (statement -> case .)
    END             reduce using rule 8 (statement -> case .)
    WHEN            reduce using rule 8 (statement -> case .)
    ELSE            reduce using rule 8 (statement -> case .)
    ELSIF           reduce using rule 8 (statement -> case .)


state 9

    (9) statement -> Sfunction .

    INSTANCE_VAR    reduce using rule 9 (statement -> Sfunction .)
    GLOBAL_VAR      reduce using rule 9 (statement -> Sfunction .)
    ID              reduce using rule 9 (statement -> Sfunction .)
    PRINT           reduce using rule 9 (statement -> Sfunction .)
    PUTS            reduce using rule 9 (statement -> Sfunction .)
    P               reduce using rule 9 (statement -> Sfunction .)
    LPAREN          reduce using rule 9 (statement -> Sfunction .)
    WHILE           reduce using rule 9 (statement -> Sfunction .)
    CASE            reduce using rule 9 (statement -> Sfunction .)
    DEF             reduce using rule 9 (statement -> Sfunction .)
    LBRACKET        reduce using rule 9 (statement -> Sfunction .)
    PLUS            reduce using rule 9 (statement -> Sfunction .)
    MINUS           reduce using rule 9 (statement -> Sfunction .)
    TIMES           reduce using rule 9 (statement -> Sfunction .)
    DIVIDE          reduce using rule 9 (statement -> Sfunction .)
    MOD             reduce using rule 9 (statement -> Sfunction .)
    LBRACE          reduce using rule 9 (statement -> Sfunction .)
    NUMBER          reduce using rule 9 (statement -> Sfunction .)
    STRING          reduce using rule 9 (statement -> Sfunction .)
    IF              reduce using rule 9 (statement -> Sfunction .)
    $end            reduce using rule 9 (statement -> Sfunction .)
    END             reduce using rule 9 (statement -> Sfunction .)
    WHEN            reduce using rule 9 (statement -> Sfunction .)
    ELSE            reduce using rule 9 (statement -> Sfunction .)
    ELSIF           reduce using rule 9 (statement -> Sfunction .)


state 10

    (10) statement -> array .

    INSTANCE_VAR    reduce using rule 10 (statement -> array .)
    GLOBAL_VAR      reduce using rule 10 (statement -> array .)
    ID              reduce using rule 10 (statement -> array .)
    PRINT           reduce using rule 10 (statement -> array .)
    PUTS            reduce using rule 10 (statement -> array .)
    P               reduce using rule 10 (statement -> array .)
    LPAREN          reduce using rule 10 (statement -> array .)
    WHILE           reduce using rule 10 (statement -> array .)
    CASE            reduce using rule 10 (statement -> array .)
    DEF             reduce using rule 10 (statement -> array .)
    LBRACKET        reduce using rule 10 (statement -> array .)
    PLUS            reduce using rule 10 (statement -> array .)
    MINUS           reduce using rule 10 (statement -> array .)
    TIMES           reduce using rule 10 (statement -> array .)
    DIVIDE          reduce using rule 10 (statement -> array .)
    MOD             reduce using rule 10 (statement -> array .)
    LBRACE          reduce using rule 10 (statement -> array .)
    NUMBER          reduce using rule 10 (statement -> array .)
    STRING          reduce using rule 10 (statement -> array .)
    IF              reduce using rule 10 (statement -> array .)
    $end            reduce using rule 10 (statement -> array .)
    END             reduce using rule 10 (statement -> array .)
    WHEN            reduce using rule 10 (statement -> array .)
    ELSE            reduce using rule 10 (statement -> array .)
    ELSIF           reduce using rule 10 (statement -> array .)


state 11

    (11) statement -> p_SfunctionINV .

    INSTANCE_VAR    reduce using rule 11 (statement -> p_SfunctionINV .)
    GLOBAL_VAR      reduce using rule 11 (statement -> p_SfunctionINV .)
    ID              reduce using rule 11 (statement -> p_SfunctionINV .)
    PRINT           reduce using rule 11 (statement -> p_SfunctionINV .)
    PUTS            reduce using rule 11 (statement -> p_SfunctionINV .)
    P               reduce using rule 11 (statement -> p_SfunctionINV .)
    LPAREN          reduce using rule 11 (statement -> p_SfunctionINV .)
    WHILE           reduce using rule 11 (statement -> p_SfunctionINV .)
    CASE            reduce using rule 11 (statement -> p_SfunctionINV .)
    DEF             reduce using rule 11 (statement -> p_SfunctionINV .)
    LBRACKET        reduce using rule 11 (statement -> p_SfunctionINV .)
    PLUS            reduce using rule 11 (statement -> p_SfunctionINV .)
    MINUS           reduce using rule 11 (statement -> p_SfunctionINV .)
    TIMES           reduce using rule 11 (statement -> p_SfunctionINV .)
    DIVIDE          reduce using rule 11 (statement -> p_SfunctionINV .)
    MOD             reduce using rule 11 (statement -> p_SfunctionINV .)
    LBRACE          reduce using rule 11 (statement -> p_SfunctionINV .)
    NUMBER          reduce using rule 11 (statement -> p_SfunctionINV .)
    STRING          reduce using rule 11 (statement -> p_SfunctionINV .)
    IF              reduce using rule 11 (statement -> p_SfunctionINV .)
    $end            reduce using rule 11 (statement -> p_SfunctionINV .)
    END             reduce using rule 11 (statement -> p_SfunctionINV .)
    WHEN            reduce using rule 11 (statement -> p_SfunctionINV .)
    ELSE            reduce using rule 11 (statement -> p_SfunctionINV .)
    ELSIF           reduce using rule 11 (statement -> p_SfunctionINV .)


state 12

    (12) statement -> p_function_one_parameter .

    INSTANCE_VAR    reduce using rule 12 (statement -> p_function_one_parameter .)
    GLOBAL_VAR      reduce using rule 12 (statement -> p_function_one_parameter .)
    ID              reduce using rule 12 (statement -> p_function_one_parameter .)
    PRINT           reduce using rule 12 (statement -> p_function_one_parameter .)
    PUTS            reduce using rule 12 (statement -> p_function_one_parameter .)
    P               reduce using rule 12 (statement -> p_function_one_parameter .)
    LPAREN          reduce using rule 12 (statement -> p_function_one_parameter .)
    WHILE           reduce using rule 12 (statement -> p_function_one_parameter .)
    CASE            reduce using rule 12 (statement -> p_function_one_parameter .)
    DEF             reduce using rule 12 (statement -> p_function_one_parameter .)
    LBRACKET        reduce using rule 12 (statement -> p_function_one_parameter .)
    PLUS            reduce using rule 12 (statement -> p_function_one_parameter .)
    MINUS           reduce using rule 12 (statement -> p_function_one_parameter .)
    TIMES           reduce using rule 12 (statement -> p_function_one_parameter .)
    DIVIDE          reduce using rule 12 (statement -> p_function_one_parameter .)
    MOD             reduce using rule 12 (statement -> p_function_one_parameter .)
    LBRACE          reduce using rule 12 (statement -> p_function_one_parameter .)
    NUMBER          reduce using rule 12 (statement -> p_function_one_parameter .)
    STRING          reduce using rule 12 (statement -> p_function_one_parameter .)
    IF              reduce using rule 12 (statement -> p_function_one_parameter .)
    $end            reduce using rule 12 (statement -> p_function_one_parameter .)
    END             reduce using rule 12 (statement -> p_function_one_parameter .)
    WHEN            reduce using rule 12 (statement -> p_function_one_parameter .)
    ELSE            reduce using rule 12 (statement -> p_function_one_parameter .)
    ELSIF           reduce using rule 12 (statement -> p_function_one_parameter .)


state 13

    (13) statement -> p_function_two_parameter .

    INSTANCE_VAR    reduce using rule 13 (statement -> p_function_two_parameter .)
    GLOBAL_VAR      reduce using rule 13 (statement -> p_function_two_parameter .)
    ID              reduce using rule 13 (statement -> p_function_two_parameter .)
    PRINT           reduce using rule 13 (statement -> p_function_two_parameter .)
    PUTS            reduce using rule 13 (statement -> p_function_two_parameter .)
    P               reduce using rule 13 (statement -> p_function_two_parameter .)
    LPAREN          reduce using rule 13 (statement -> p_function_two_parameter .)
    WHILE           reduce using rule 13 (statement -> p_function_two_parameter .)
    CASE            reduce using rule 13 (statement -> p_function_two_parameter .)
    DEF             reduce using rule 13 (statement -> p_function_two_parameter .)
    LBRACKET        reduce using rule 13 (statement -> p_function_two_parameter .)
    PLUS            reduce using rule 13 (statement -> p_function_two_parameter .)
    MINUS           reduce using rule 13 (statement -> p_function_two_parameter .)
    TIMES           reduce using rule 13 (statement -> p_function_two_parameter .)
    DIVIDE          reduce using rule 13 (statement -> p_function_two_parameter .)
    MOD             reduce using rule 13 (statement -> p_function_two_parameter .)
    LBRACE          reduce using rule 13 (statement -> p_function_two_parameter .)
    NUMBER          reduce using rule 13 (statement -> p_function_two_parameter .)
    STRING          reduce using rule 13 (statement -> p_function_two_parameter .)
    IF              reduce using rule 13 (statement -> p_function_two_parameter .)
    $end            reduce using rule 13 (statement -> p_function_two_parameter .)
    END             reduce using rule 13 (statement -> p_function_two_parameter .)
    WHEN            reduce using rule 13 (statement -> p_function_two_parameter .)
    ELSE            reduce using rule 13 (statement -> p_function_two_parameter .)
    ELSIF           reduce using rule 13 (statement -> p_function_two_parameter .)


state 14

    (14) statement -> function_call .

    INSTANCE_VAR    reduce using rule 14 (statement -> function_call .)
    GLOBAL_VAR      reduce using rule 14 (statement -> function_call .)
    ID              reduce using rule 14 (statement -> function_call .)
    PRINT           reduce using rule 14 (statement -> function_call .)
    PUTS            reduce using rule 14 (statement -> function_call .)
    P               reduce using rule 14 (statement -> function_call .)
    LPAREN          reduce using rule 14 (statement -> function_call .)
    WHILE           reduce using rule 14 (statement -> function_call .)
    CASE            reduce using rule 14 (statement -> function_call .)
    DEF             reduce using rule 14 (statement -> function_call .)
    LBRACKET        reduce using rule 14 (statement -> function_call .)
    PLUS            reduce using rule 14 (statement -> function_call .)
    MINUS           reduce using rule 14 (statement -> function_call .)
    TIMES           reduce using rule 14 (statement -> function_call .)
    DIVIDE          reduce using rule 14 (statement -> function_call .)
    MOD             reduce using rule 14 (statement -> function_call .)
    LBRACE          reduce using rule 14 (statement -> function_call .)
    NUMBER          reduce using rule 14 (statement -> function_call .)
    STRING          reduce using rule 14 (statement -> function_call .)
    IF              reduce using rule 14 (statement -> function_call .)
    $end            reduce using rule 14 (statement -> function_call .)
    END             reduce using rule 14 (statement -> function_call .)
    WHEN            reduce using rule 14 (statement -> function_call .)
    ELSE            reduce using rule 14 (statement -> function_call .)
    ELSIF           reduce using rule 14 (statement -> function_call .)


state 15

    (15) statement -> aritmeticExpresion .
    (34) aritmeticExpresion -> aritmeticExpresion . operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    INSTANCE_VAR    reduce using rule 15 (statement -> aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 15 (statement -> aritmeticExpresion .)
    ID              reduce using rule 15 (statement -> aritmeticExpresion .)
    PRINT           reduce using rule 15 (statement -> aritmeticExpresion .)
    PUTS            reduce using rule 15 (statement -> aritmeticExpresion .)
    P               reduce using rule 15 (statement -> aritmeticExpresion .)
    WHILE           reduce using rule 15 (statement -> aritmeticExpresion .)
    CASE            reduce using rule 15 (statement -> aritmeticExpresion .)
    DEF             reduce using rule 15 (statement -> aritmeticExpresion .)
    LBRACKET        reduce using rule 15 (statement -> aritmeticExpresion .)
    LBRACE          reduce using rule 15 (statement -> aritmeticExpresion .)
    NUMBER          reduce using rule 15 (statement -> aritmeticExpresion .)
    STRING          reduce using rule 15 (statement -> aritmeticExpresion .)
    IF              reduce using rule 15 (statement -> aritmeticExpresion .)
    $end            reduce using rule 15 (statement -> aritmeticExpresion .)
    END             reduce using rule 15 (statement -> aritmeticExpresion .)
    WHEN            reduce using rule 15 (statement -> aritmeticExpresion .)
    ELSE            reduce using rule 15 (statement -> aritmeticExpresion .)
    ELSIF           reduce using rule 15 (statement -> aritmeticExpresion .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45

  ! LPAREN          [ reduce using rule 15 (statement -> aritmeticExpresion .) ]
  ! PLUS            [ reduce using rule 15 (statement -> aritmeticExpresion .) ]
  ! MINUS           [ reduce using rule 15 (statement -> aritmeticExpresion .) ]
  ! TIMES           [ reduce using rule 15 (statement -> aritmeticExpresion .) ]
  ! DIVIDE          [ reduce using rule 15 (statement -> aritmeticExpresion .) ]
  ! MOD             [ reduce using rule 15 (statement -> aritmeticExpresion .) ]

    operator                       shift and go to state 44

state 16

    (16) statement -> operator .

    INSTANCE_VAR    reduce using rule 16 (statement -> operator .)
    GLOBAL_VAR      reduce using rule 16 (statement -> operator .)
    ID              reduce using rule 16 (statement -> operator .)
    PRINT           reduce using rule 16 (statement -> operator .)
    PUTS            reduce using rule 16 (statement -> operator .)
    P               reduce using rule 16 (statement -> operator .)
    LPAREN          reduce using rule 16 (statement -> operator .)
    WHILE           reduce using rule 16 (statement -> operator .)
    CASE            reduce using rule 16 (statement -> operator .)
    DEF             reduce using rule 16 (statement -> operator .)
    LBRACKET        reduce using rule 16 (statement -> operator .)
    PLUS            reduce using rule 16 (statement -> operator .)
    MINUS           reduce using rule 16 (statement -> operator .)
    TIMES           reduce using rule 16 (statement -> operator .)
    DIVIDE          reduce using rule 16 (statement -> operator .)
    MOD             reduce using rule 16 (statement -> operator .)
    LBRACE          reduce using rule 16 (statement -> operator .)
    NUMBER          reduce using rule 16 (statement -> operator .)
    STRING          reduce using rule 16 (statement -> operator .)
    IF              reduce using rule 16 (statement -> operator .)
    $end            reduce using rule 16 (statement -> operator .)
    END             reduce using rule 16 (statement -> operator .)
    WHEN            reduce using rule 16 (statement -> operator .)
    ELSE            reduce using rule 16 (statement -> operator .)
    ELSIF           reduce using rule 16 (statement -> operator .)


state 17

    (17) statement -> dataIn .

    INSTANCE_VAR    reduce using rule 17 (statement -> dataIn .)
    GLOBAL_VAR      reduce using rule 17 (statement -> dataIn .)
    ID              reduce using rule 17 (statement -> dataIn .)
    PRINT           reduce using rule 17 (statement -> dataIn .)
    PUTS            reduce using rule 17 (statement -> dataIn .)
    P               reduce using rule 17 (statement -> dataIn .)
    LPAREN          reduce using rule 17 (statement -> dataIn .)
    WHILE           reduce using rule 17 (statement -> dataIn .)
    CASE            reduce using rule 17 (statement -> dataIn .)
    DEF             reduce using rule 17 (statement -> dataIn .)
    LBRACKET        reduce using rule 17 (statement -> dataIn .)
    PLUS            reduce using rule 17 (statement -> dataIn .)
    MINUS           reduce using rule 17 (statement -> dataIn .)
    TIMES           reduce using rule 17 (statement -> dataIn .)
    DIVIDE          reduce using rule 17 (statement -> dataIn .)
    MOD             reduce using rule 17 (statement -> dataIn .)
    LBRACE          reduce using rule 17 (statement -> dataIn .)
    NUMBER          reduce using rule 17 (statement -> dataIn .)
    STRING          reduce using rule 17 (statement -> dataIn .)
    IF              reduce using rule 17 (statement -> dataIn .)
    $end            reduce using rule 17 (statement -> dataIn .)
    END             reduce using rule 17 (statement -> dataIn .)
    WHEN            reduce using rule 17 (statement -> dataIn .)
    ELSE            reduce using rule 17 (statement -> dataIn .)
    ELSIF           reduce using rule 17 (statement -> dataIn .)


state 18

    (18) statement -> control_structures .

    INSTANCE_VAR    reduce using rule 18 (statement -> control_structures .)
    GLOBAL_VAR      reduce using rule 18 (statement -> control_structures .)
    ID              reduce using rule 18 (statement -> control_structures .)
    PRINT           reduce using rule 18 (statement -> control_structures .)
    PUTS            reduce using rule 18 (statement -> control_structures .)
    P               reduce using rule 18 (statement -> control_structures .)
    LPAREN          reduce using rule 18 (statement -> control_structures .)
    WHILE           reduce using rule 18 (statement -> control_structures .)
    CASE            reduce using rule 18 (statement -> control_structures .)
    DEF             reduce using rule 18 (statement -> control_structures .)
    LBRACKET        reduce using rule 18 (statement -> control_structures .)
    PLUS            reduce using rule 18 (statement -> control_structures .)
    MINUS           reduce using rule 18 (statement -> control_structures .)
    TIMES           reduce using rule 18 (statement -> control_structures .)
    DIVIDE          reduce using rule 18 (statement -> control_structures .)
    MOD             reduce using rule 18 (statement -> control_structures .)
    LBRACE          reduce using rule 18 (statement -> control_structures .)
    NUMBER          reduce using rule 18 (statement -> control_structures .)
    STRING          reduce using rule 18 (statement -> control_structures .)
    IF              reduce using rule 18 (statement -> control_structures .)
    $end            reduce using rule 18 (statement -> control_structures .)
    END             reduce using rule 18 (statement -> control_structures .)
    WHEN            reduce using rule 18 (statement -> control_structures .)
    ELSE            reduce using rule 18 (statement -> control_structures .)
    ELSIF           reduce using rule 18 (statement -> control_structures .)


state 19

    (19) statement -> hash .

    INSTANCE_VAR    reduce using rule 19 (statement -> hash .)
    GLOBAL_VAR      reduce using rule 19 (statement -> hash .)
    ID              reduce using rule 19 (statement -> hash .)
    PRINT           reduce using rule 19 (statement -> hash .)
    PUTS            reduce using rule 19 (statement -> hash .)
    P               reduce using rule 19 (statement -> hash .)
    LPAREN          reduce using rule 19 (statement -> hash .)
    WHILE           reduce using rule 19 (statement -> hash .)
    CASE            reduce using rule 19 (statement -> hash .)
    DEF             reduce using rule 19 (statement -> hash .)
    LBRACKET        reduce using rule 19 (statement -> hash .)
    PLUS            reduce using rule 19 (statement -> hash .)
    MINUS           reduce using rule 19 (statement -> hash .)
    TIMES           reduce using rule 19 (statement -> hash .)
    DIVIDE          reduce using rule 19 (statement -> hash .)
    MOD             reduce using rule 19 (statement -> hash .)
    LBRACE          reduce using rule 19 (statement -> hash .)
    NUMBER          reduce using rule 19 (statement -> hash .)
    STRING          reduce using rule 19 (statement -> hash .)
    IF              reduce using rule 19 (statement -> hash .)
    $end            reduce using rule 19 (statement -> hash .)
    END             reduce using rule 19 (statement -> hash .)
    WHEN            reduce using rule 19 (statement -> hash .)
    ELSE            reduce using rule 19 (statement -> hash .)
    ELSIF           reduce using rule 19 (statement -> hash .)


state 20

    (27) assign -> INSTANCE_VAR . ASSIGN value
    (30) assign -> INSTANCE_VAR . ASSIGN data_structure
    (94) dataIn -> INSTANCE_VAR . ASSIGN GETS
    (22) value -> INSTANCE_VAR .

    ASSIGN          shift and go to state 46
    PLUS            reduce using rule 22 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 22 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 22 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 22 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 22 (value -> INSTANCE_VAR .)
    LPAREN          reduce using rule 22 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 22 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 22 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 22 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 22 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 22 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 22 (value -> INSTANCE_VAR .)


state 21

    (33) aritmeticExpresion -> value . operator value
    (53) condition -> value . operComp value
    (54) condition -> value . operComp aritmeticExpresion
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (57) operComp -> . LESSTHAN
    (58) operComp -> . GREATERTHAN
    (59) operComp -> . GREATEROREQUAL
    (60) operComp -> . LESSOREQUAL
    (61) operComp -> . EQUAL
    (62) operComp -> . NOTEQUAL

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45
    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    GREATEROREQUAL  shift and go to state 51
    LESSOREQUAL     shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQUAL        shift and go to state 54

    operator                       shift and go to state 47
    operComp                       shift and go to state 48

state 22

    (28) assign -> GLOBAL_VAR . ASSIGN value
    (31) assign -> GLOBAL_VAR . ASSIGN data_structure
    (95) dataIn -> GLOBAL_VAR . ASSIGN GETS
    (23) value -> GLOBAL_VAR .

    ASSIGN          shift and go to state 55
    PLUS            reduce using rule 23 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 23 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 23 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 23 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 23 (value -> GLOBAL_VAR .)
    LPAREN          reduce using rule 23 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 23 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 23 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 23 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 23 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 23 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 23 (value -> GLOBAL_VAR .)


state 23

    (29) assign -> ID . ASSIGN value
    (32) assign -> ID . ASSIGN data_structure
    (78) p_SfunctionINV -> ID .
    (79) p_SfunctionINV -> ID . LPAREN params RPAREN
    (84) function_call -> ID . LPAREN RPAREN
    (85) function_call -> ID . LPAREN params RPAREN
    (86) function_call -> ID . LPAREN param RPAREN
    (93) dataIn -> ID . ASSIGN GETS
    (24) value -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 24 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 24 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 24 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 24 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 24 (value -> ID .)
  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 56
    INSTANCE_VAR    reduce using rule 78 (p_SfunctionINV -> ID .)
    GLOBAL_VAR      reduce using rule 78 (p_SfunctionINV -> ID .)
    ID              reduce using rule 78 (p_SfunctionINV -> ID .)
    PRINT           reduce using rule 78 (p_SfunctionINV -> ID .)
    PUTS            reduce using rule 78 (p_SfunctionINV -> ID .)
    P               reduce using rule 78 (p_SfunctionINV -> ID .)
    WHILE           reduce using rule 78 (p_SfunctionINV -> ID .)
    CASE            reduce using rule 78 (p_SfunctionINV -> ID .)
    DEF             reduce using rule 78 (p_SfunctionINV -> ID .)
    LBRACKET        reduce using rule 78 (p_SfunctionINV -> ID .)
    LBRACE          reduce using rule 78 (p_SfunctionINV -> ID .)
    NUMBER          reduce using rule 78 (p_SfunctionINV -> ID .)
    STRING          reduce using rule 78 (p_SfunctionINV -> ID .)
    IF              reduce using rule 78 (p_SfunctionINV -> ID .)
    $end            reduce using rule 78 (p_SfunctionINV -> ID .)
    END             reduce using rule 78 (p_SfunctionINV -> ID .)
    WHEN            reduce using rule 78 (p_SfunctionINV -> ID .)
    ELSE            reduce using rule 78 (p_SfunctionINV -> ID .)
    ELSIF           reduce using rule 78 (p_SfunctionINV -> ID .)
    LPAREN          shift and go to state 57
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    TIMES           reduce using rule 24 (value -> ID .)
    DIVIDE          reduce using rule 24 (value -> ID .)
    MOD             reduce using rule 24 (value -> ID .)
    LESSTHAN        reduce using rule 24 (value -> ID .)
    GREATERTHAN     reduce using rule 24 (value -> ID .)
    GREATEROREQUAL  reduce using rule 24 (value -> ID .)
    LESSOREQUAL     reduce using rule 24 (value -> ID .)
    EQUAL           reduce using rule 24 (value -> ID .)
    NOTEQUAL        reduce using rule 24 (value -> ID .)

  ! LPAREN          [ reduce using rule 78 (p_SfunctionINV -> ID .) ]
  ! PLUS            [ reduce using rule 78 (p_SfunctionINV -> ID .) ]
  ! MINUS           [ reduce using rule 78 (p_SfunctionINV -> ID .) ]
  ! TIMES           [ reduce using rule 78 (p_SfunctionINV -> ID .) ]
  ! DIVIDE          [ reduce using rule 78 (p_SfunctionINV -> ID .) ]
  ! MOD             [ reduce using rule 78 (p_SfunctionINV -> ID .) ]
  ! LPAREN          [ reduce using rule 24 (value -> ID .) ]


state 24

    (87) impression -> PRINT . LPAREN value RPAREN
    (88) impression -> PRINT . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    LPAREN          shift and go to state 58
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 59

state 25

    (97) tupla -> LPAREN . values RPAREN
    (40) operator -> LPAREN . aritmeticExpresion RPAREN
    (25) values -> . value
    (26) values -> . value COMMA values
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 63
    aritmeticExpresion             shift and go to state 64
    value                          shift and go to state 65

state 26

    (89) impression -> PUTS . value
    (90) impression -> PUTS . LPAREN value RPAREN
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 66

state 27

    (91) impression -> P . LPAREN value RPAREN
    (92) impression -> P . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    LPAREN          shift and go to state 68
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 69

state 28

    (51) conditions -> condition .
    (52) conditions -> condition . conector conditions
    (55) conector -> . AND
    (56) conector -> . OR

    INSTANCE_VAR    reduce using rule 51 (conditions -> condition .)
    GLOBAL_VAR      reduce using rule 51 (conditions -> condition .)
    ID              reduce using rule 51 (conditions -> condition .)
    PRINT           reduce using rule 51 (conditions -> condition .)
    PUTS            reduce using rule 51 (conditions -> condition .)
    P               reduce using rule 51 (conditions -> condition .)
    LPAREN          reduce using rule 51 (conditions -> condition .)
    WHILE           reduce using rule 51 (conditions -> condition .)
    CASE            reduce using rule 51 (conditions -> condition .)
    DEF             reduce using rule 51 (conditions -> condition .)
    LBRACKET        reduce using rule 51 (conditions -> condition .)
    PLUS            reduce using rule 51 (conditions -> condition .)
    MINUS           reduce using rule 51 (conditions -> condition .)
    TIMES           reduce using rule 51 (conditions -> condition .)
    DIVIDE          reduce using rule 51 (conditions -> condition .)
    MOD             reduce using rule 51 (conditions -> condition .)
    LBRACE          reduce using rule 51 (conditions -> condition .)
    NUMBER          reduce using rule 51 (conditions -> condition .)
    STRING          reduce using rule 51 (conditions -> condition .)
    IF              reduce using rule 51 (conditions -> condition .)
    $end            reduce using rule 51 (conditions -> condition .)
    RPAREN          reduce using rule 51 (conditions -> condition .)
    END             reduce using rule 51 (conditions -> condition .)
    WHEN            reduce using rule 51 (conditions -> condition .)
    ELSE            reduce using rule 51 (conditions -> condition .)
    ELSIF           reduce using rule 51 (conditions -> condition .)
    AND             shift and go to state 71
    OR              shift and go to state 72

    conector                       shift and go to state 70

state 29

    (96) while_loop -> WHILE . LPAREN conditions RPAREN codigo END

    LPAREN          shift and go to state 73


state 30

    (76) case -> CASE . whens END
    (74) whens -> . when
    (75) whens -> . whens when
    (73) when -> . WHEN conditions codigo

    WHEN            shift and go to state 76

    whens                          shift and go to state 74
    when                           shift and go to state 75

state 31

    (77) Sfunction -> DEF . ID LPAREN RPAREN codigo END
    (80) p_function_one_parameter -> DEF . ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> DEF . ID LPAREN params RPAREN codigo END

    ID              shift and go to state 77


state 32

    (44) array -> LBRACKET . RBRACKET
    (45) array -> LBRACKET . values RBRACKET
    (25) values -> . value
    (26) values -> . value COMMA values
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    RBRACKET        shift and go to state 78
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 79
    value                          shift and go to state 80

state 33

    (35) operator -> PLUS .

    INSTANCE_VAR    reduce using rule 35 (operator -> PLUS .)
    GLOBAL_VAR      reduce using rule 35 (operator -> PLUS .)
    ID              reduce using rule 35 (operator -> PLUS .)
    PRINT           reduce using rule 35 (operator -> PLUS .)
    PUTS            reduce using rule 35 (operator -> PLUS .)
    P               reduce using rule 35 (operator -> PLUS .)
    LPAREN          reduce using rule 35 (operator -> PLUS .)
    WHILE           reduce using rule 35 (operator -> PLUS .)
    CASE            reduce using rule 35 (operator -> PLUS .)
    DEF             reduce using rule 35 (operator -> PLUS .)
    LBRACKET        reduce using rule 35 (operator -> PLUS .)
    PLUS            reduce using rule 35 (operator -> PLUS .)
    MINUS           reduce using rule 35 (operator -> PLUS .)
    TIMES           reduce using rule 35 (operator -> PLUS .)
    DIVIDE          reduce using rule 35 (operator -> PLUS .)
    MOD             reduce using rule 35 (operator -> PLUS .)
    LBRACE          reduce using rule 35 (operator -> PLUS .)
    NUMBER          reduce using rule 35 (operator -> PLUS .)
    STRING          reduce using rule 35 (operator -> PLUS .)
    IF              reduce using rule 35 (operator -> PLUS .)
    $end            reduce using rule 35 (operator -> PLUS .)
    END             reduce using rule 35 (operator -> PLUS .)
    WHEN            reduce using rule 35 (operator -> PLUS .)
    ELSE            reduce using rule 35 (operator -> PLUS .)
    ELSIF           reduce using rule 35 (operator -> PLUS .)


state 34

    (36) operator -> MINUS .

    INSTANCE_VAR    reduce using rule 36 (operator -> MINUS .)
    GLOBAL_VAR      reduce using rule 36 (operator -> MINUS .)
    ID              reduce using rule 36 (operator -> MINUS .)
    PRINT           reduce using rule 36 (operator -> MINUS .)
    PUTS            reduce using rule 36 (operator -> MINUS .)
    P               reduce using rule 36 (operator -> MINUS .)
    LPAREN          reduce using rule 36 (operator -> MINUS .)
    WHILE           reduce using rule 36 (operator -> MINUS .)
    CASE            reduce using rule 36 (operator -> MINUS .)
    DEF             reduce using rule 36 (operator -> MINUS .)
    LBRACKET        reduce using rule 36 (operator -> MINUS .)
    PLUS            reduce using rule 36 (operator -> MINUS .)
    MINUS           reduce using rule 36 (operator -> MINUS .)
    TIMES           reduce using rule 36 (operator -> MINUS .)
    DIVIDE          reduce using rule 36 (operator -> MINUS .)
    MOD             reduce using rule 36 (operator -> MINUS .)
    LBRACE          reduce using rule 36 (operator -> MINUS .)
    NUMBER          reduce using rule 36 (operator -> MINUS .)
    STRING          reduce using rule 36 (operator -> MINUS .)
    IF              reduce using rule 36 (operator -> MINUS .)
    $end            reduce using rule 36 (operator -> MINUS .)
    END             reduce using rule 36 (operator -> MINUS .)
    WHEN            reduce using rule 36 (operator -> MINUS .)
    ELSE            reduce using rule 36 (operator -> MINUS .)
    ELSIF           reduce using rule 36 (operator -> MINUS .)


state 35

    (37) operator -> TIMES .

    INSTANCE_VAR    reduce using rule 37 (operator -> TIMES .)
    GLOBAL_VAR      reduce using rule 37 (operator -> TIMES .)
    ID              reduce using rule 37 (operator -> TIMES .)
    PRINT           reduce using rule 37 (operator -> TIMES .)
    PUTS            reduce using rule 37 (operator -> TIMES .)
    P               reduce using rule 37 (operator -> TIMES .)
    LPAREN          reduce using rule 37 (operator -> TIMES .)
    WHILE           reduce using rule 37 (operator -> TIMES .)
    CASE            reduce using rule 37 (operator -> TIMES .)
    DEF             reduce using rule 37 (operator -> TIMES .)
    LBRACKET        reduce using rule 37 (operator -> TIMES .)
    PLUS            reduce using rule 37 (operator -> TIMES .)
    MINUS           reduce using rule 37 (operator -> TIMES .)
    TIMES           reduce using rule 37 (operator -> TIMES .)
    DIVIDE          reduce using rule 37 (operator -> TIMES .)
    MOD             reduce using rule 37 (operator -> TIMES .)
    LBRACE          reduce using rule 37 (operator -> TIMES .)
    NUMBER          reduce using rule 37 (operator -> TIMES .)
    STRING          reduce using rule 37 (operator -> TIMES .)
    IF              reduce using rule 37 (operator -> TIMES .)
    $end            reduce using rule 37 (operator -> TIMES .)
    END             reduce using rule 37 (operator -> TIMES .)
    WHEN            reduce using rule 37 (operator -> TIMES .)
    ELSE            reduce using rule 37 (operator -> TIMES .)
    ELSIF           reduce using rule 37 (operator -> TIMES .)


state 36

    (38) operator -> DIVIDE .

    INSTANCE_VAR    reduce using rule 38 (operator -> DIVIDE .)
    GLOBAL_VAR      reduce using rule 38 (operator -> DIVIDE .)
    ID              reduce using rule 38 (operator -> DIVIDE .)
    PRINT           reduce using rule 38 (operator -> DIVIDE .)
    PUTS            reduce using rule 38 (operator -> DIVIDE .)
    P               reduce using rule 38 (operator -> DIVIDE .)
    LPAREN          reduce using rule 38 (operator -> DIVIDE .)
    WHILE           reduce using rule 38 (operator -> DIVIDE .)
    CASE            reduce using rule 38 (operator -> DIVIDE .)
    DEF             reduce using rule 38 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 38 (operator -> DIVIDE .)
    PLUS            reduce using rule 38 (operator -> DIVIDE .)
    MINUS           reduce using rule 38 (operator -> DIVIDE .)
    TIMES           reduce using rule 38 (operator -> DIVIDE .)
    DIVIDE          reduce using rule 38 (operator -> DIVIDE .)
    MOD             reduce using rule 38 (operator -> DIVIDE .)
    LBRACE          reduce using rule 38 (operator -> DIVIDE .)
    NUMBER          reduce using rule 38 (operator -> DIVIDE .)
    STRING          reduce using rule 38 (operator -> DIVIDE .)
    IF              reduce using rule 38 (operator -> DIVIDE .)
    $end            reduce using rule 38 (operator -> DIVIDE .)
    END             reduce using rule 38 (operator -> DIVIDE .)
    WHEN            reduce using rule 38 (operator -> DIVIDE .)
    ELSE            reduce using rule 38 (operator -> DIVIDE .)
    ELSIF           reduce using rule 38 (operator -> DIVIDE .)


state 37

    (39) operator -> MOD .

    INSTANCE_VAR    reduce using rule 39 (operator -> MOD .)
    GLOBAL_VAR      reduce using rule 39 (operator -> MOD .)
    ID              reduce using rule 39 (operator -> MOD .)
    PRINT           reduce using rule 39 (operator -> MOD .)
    PUTS            reduce using rule 39 (operator -> MOD .)
    P               reduce using rule 39 (operator -> MOD .)
    LPAREN          reduce using rule 39 (operator -> MOD .)
    WHILE           reduce using rule 39 (operator -> MOD .)
    CASE            reduce using rule 39 (operator -> MOD .)
    DEF             reduce using rule 39 (operator -> MOD .)
    LBRACKET        reduce using rule 39 (operator -> MOD .)
    PLUS            reduce using rule 39 (operator -> MOD .)
    MINUS           reduce using rule 39 (operator -> MOD .)
    TIMES           reduce using rule 39 (operator -> MOD .)
    DIVIDE          reduce using rule 39 (operator -> MOD .)
    MOD             reduce using rule 39 (operator -> MOD .)
    LBRACE          reduce using rule 39 (operator -> MOD .)
    NUMBER          reduce using rule 39 (operator -> MOD .)
    STRING          reduce using rule 39 (operator -> MOD .)
    IF              reduce using rule 39 (operator -> MOD .)
    $end            reduce using rule 39 (operator -> MOD .)
    END             reduce using rule 39 (operator -> MOD .)
    WHEN            reduce using rule 39 (operator -> MOD .)
    ELSE            reduce using rule 39 (operator -> MOD .)
    ELSIF           reduce using rule 39 (operator -> MOD .)


state 38

    (63) control_structures -> if_block .
    (64) control_structures -> if_block . elsif_blocks
    (65) control_structures -> if_block . elsif_blocks else_block
    (66) control_structures -> if_block . else_block
    (69) elsif_blocks -> . elsif_block
    (70) elsif_blocks -> . elsif_blocks elsif_block
    (72) else_block -> . ELSE codigo END
    (71) elsif_block -> . ELSIF LPAREN conditions RPAREN codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    INSTANCE_VAR    reduce using rule 63 (control_structures -> if_block .)
    GLOBAL_VAR      reduce using rule 63 (control_structures -> if_block .)
    ID              reduce using rule 63 (control_structures -> if_block .)
    PRINT           reduce using rule 63 (control_structures -> if_block .)
    PUTS            reduce using rule 63 (control_structures -> if_block .)
    P               reduce using rule 63 (control_structures -> if_block .)
    LPAREN          reduce using rule 63 (control_structures -> if_block .)
    WHILE           reduce using rule 63 (control_structures -> if_block .)
    CASE            reduce using rule 63 (control_structures -> if_block .)
    DEF             reduce using rule 63 (control_structures -> if_block .)
    LBRACKET        reduce using rule 63 (control_structures -> if_block .)
    PLUS            reduce using rule 63 (control_structures -> if_block .)
    MINUS           reduce using rule 63 (control_structures -> if_block .)
    TIMES           reduce using rule 63 (control_structures -> if_block .)
    DIVIDE          reduce using rule 63 (control_structures -> if_block .)
    MOD             reduce using rule 63 (control_structures -> if_block .)
    LBRACE          reduce using rule 63 (control_structures -> if_block .)
    NUMBER          reduce using rule 63 (control_structures -> if_block .)
    STRING          reduce using rule 63 (control_structures -> if_block .)
    IF              reduce using rule 63 (control_structures -> if_block .)
    $end            reduce using rule 63 (control_structures -> if_block .)
    END             reduce using rule 63 (control_structures -> if_block .)
    WHEN            reduce using rule 63 (control_structures -> if_block .)
    ELSE            shift and go to state 84
    ELSIF           shift and go to state 85

  ! ELSE            [ reduce using rule 63 (control_structures -> if_block .) ]
  ! ELSIF           [ reduce using rule 63 (control_structures -> if_block .) ]

    elsif_blocks                   shift and go to state 81
    else_block                     shift and go to state 82
    elsif_block                    shift and go to state 83

state 39

    (46) hash -> LBRACE . RBRACE
    (47) hash -> LBRACE . hash_contents RBRACE
    (48) hash_contents -> . hash_pair
    (49) hash_contents -> . hash_contents COMMA hash_pair
    (50) hash_pair -> . value COLON value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    RBRACE          shift and go to state 86
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    hash_contents                  shift and go to state 87
    hash_pair                      shift and go to state 88
    value                          shift and go to state 89

state 40

    (20) value -> NUMBER .

    PLUS            reduce using rule 20 (value -> NUMBER .)
    MINUS           reduce using rule 20 (value -> NUMBER .)
    TIMES           reduce using rule 20 (value -> NUMBER .)
    DIVIDE          reduce using rule 20 (value -> NUMBER .)
    MOD             reduce using rule 20 (value -> NUMBER .)
    LPAREN          reduce using rule 20 (value -> NUMBER .)
    LESSTHAN        reduce using rule 20 (value -> NUMBER .)
    GREATERTHAN     reduce using rule 20 (value -> NUMBER .)
    GREATEROREQUAL  reduce using rule 20 (value -> NUMBER .)
    LESSOREQUAL     reduce using rule 20 (value -> NUMBER .)
    EQUAL           reduce using rule 20 (value -> NUMBER .)
    NOTEQUAL        reduce using rule 20 (value -> NUMBER .)
    INSTANCE_VAR    reduce using rule 20 (value -> NUMBER .)
    GLOBAL_VAR      reduce using rule 20 (value -> NUMBER .)
    ID              reduce using rule 20 (value -> NUMBER .)
    PRINT           reduce using rule 20 (value -> NUMBER .)
    PUTS            reduce using rule 20 (value -> NUMBER .)
    P               reduce using rule 20 (value -> NUMBER .)
    WHILE           reduce using rule 20 (value -> NUMBER .)
    CASE            reduce using rule 20 (value -> NUMBER .)
    DEF             reduce using rule 20 (value -> NUMBER .)
    LBRACKET        reduce using rule 20 (value -> NUMBER .)
    LBRACE          reduce using rule 20 (value -> NUMBER .)
    NUMBER          reduce using rule 20 (value -> NUMBER .)
    STRING          reduce using rule 20 (value -> NUMBER .)
    IF              reduce using rule 20 (value -> NUMBER .)
    $end            reduce using rule 20 (value -> NUMBER .)
    END             reduce using rule 20 (value -> NUMBER .)
    WHEN            reduce using rule 20 (value -> NUMBER .)
    ELSE            reduce using rule 20 (value -> NUMBER .)
    ELSIF           reduce using rule 20 (value -> NUMBER .)
    COMMA           reduce using rule 20 (value -> NUMBER .)
    RPAREN          reduce using rule 20 (value -> NUMBER .)
    RBRACKET        reduce using rule 20 (value -> NUMBER .)
    COLON           reduce using rule 20 (value -> NUMBER .)
    AND             reduce using rule 20 (value -> NUMBER .)
    OR              reduce using rule 20 (value -> NUMBER .)
    RBRACE          reduce using rule 20 (value -> NUMBER .)


state 41

    (21) value -> STRING .

    PLUS            reduce using rule 21 (value -> STRING .)
    MINUS           reduce using rule 21 (value -> STRING .)
    TIMES           reduce using rule 21 (value -> STRING .)
    DIVIDE          reduce using rule 21 (value -> STRING .)
    MOD             reduce using rule 21 (value -> STRING .)
    LPAREN          reduce using rule 21 (value -> STRING .)
    LESSTHAN        reduce using rule 21 (value -> STRING .)
    GREATERTHAN     reduce using rule 21 (value -> STRING .)
    GREATEROREQUAL  reduce using rule 21 (value -> STRING .)
    LESSOREQUAL     reduce using rule 21 (value -> STRING .)
    EQUAL           reduce using rule 21 (value -> STRING .)
    NOTEQUAL        reduce using rule 21 (value -> STRING .)
    INSTANCE_VAR    reduce using rule 21 (value -> STRING .)
    GLOBAL_VAR      reduce using rule 21 (value -> STRING .)
    ID              reduce using rule 21 (value -> STRING .)
    PRINT           reduce using rule 21 (value -> STRING .)
    PUTS            reduce using rule 21 (value -> STRING .)
    P               reduce using rule 21 (value -> STRING .)
    WHILE           reduce using rule 21 (value -> STRING .)
    CASE            reduce using rule 21 (value -> STRING .)
    DEF             reduce using rule 21 (value -> STRING .)
    LBRACKET        reduce using rule 21 (value -> STRING .)
    LBRACE          reduce using rule 21 (value -> STRING .)
    NUMBER          reduce using rule 21 (value -> STRING .)
    STRING          reduce using rule 21 (value -> STRING .)
    IF              reduce using rule 21 (value -> STRING .)
    $end            reduce using rule 21 (value -> STRING .)
    END             reduce using rule 21 (value -> STRING .)
    WHEN            reduce using rule 21 (value -> STRING .)
    ELSE            reduce using rule 21 (value -> STRING .)
    ELSIF           reduce using rule 21 (value -> STRING .)
    COMMA           reduce using rule 21 (value -> STRING .)
    RPAREN          reduce using rule 21 (value -> STRING .)
    RBRACKET        reduce using rule 21 (value -> STRING .)
    COLON           reduce using rule 21 (value -> STRING .)
    AND             reduce using rule 21 (value -> STRING .)
    OR              reduce using rule 21 (value -> STRING .)
    RBRACE          reduce using rule 21 (value -> STRING .)


state 42

    (67) if_block -> IF . LPAREN conditions RPAREN codigo
    (68) if_block -> IF . LPAREN conditions RPAREN codigo END

    LPAREN          shift and go to state 90


state 43

    (2) codigo -> codigo statement .

    INSTANCE_VAR    reduce using rule 2 (codigo -> codigo statement .)
    GLOBAL_VAR      reduce using rule 2 (codigo -> codigo statement .)
    ID              reduce using rule 2 (codigo -> codigo statement .)
    PRINT           reduce using rule 2 (codigo -> codigo statement .)
    PUTS            reduce using rule 2 (codigo -> codigo statement .)
    P               reduce using rule 2 (codigo -> codigo statement .)
    LPAREN          reduce using rule 2 (codigo -> codigo statement .)
    WHILE           reduce using rule 2 (codigo -> codigo statement .)
    CASE            reduce using rule 2 (codigo -> codigo statement .)
    DEF             reduce using rule 2 (codigo -> codigo statement .)
    LBRACKET        reduce using rule 2 (codigo -> codigo statement .)
    PLUS            reduce using rule 2 (codigo -> codigo statement .)
    MINUS           reduce using rule 2 (codigo -> codigo statement .)
    TIMES           reduce using rule 2 (codigo -> codigo statement .)
    DIVIDE          reduce using rule 2 (codigo -> codigo statement .)
    MOD             reduce using rule 2 (codigo -> codigo statement .)
    LBRACE          reduce using rule 2 (codigo -> codigo statement .)
    NUMBER          reduce using rule 2 (codigo -> codigo statement .)
    STRING          reduce using rule 2 (codigo -> codigo statement .)
    IF              reduce using rule 2 (codigo -> codigo statement .)
    $end            reduce using rule 2 (codigo -> codigo statement .)
    END             reduce using rule 2 (codigo -> codigo statement .)
    WHEN            reduce using rule 2 (codigo -> codigo statement .)
    ELSE            reduce using rule 2 (codigo -> codigo statement .)
    ELSIF           reduce using rule 2 (codigo -> codigo statement .)


state 44

    (34) aritmeticExpresion -> aritmeticExpresion operator . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 91

state 45

    (40) operator -> LPAREN . aritmeticExpresion RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    aritmeticExpresion             shift and go to state 64
    value                          shift and go to state 92

state 46

    (27) assign -> INSTANCE_VAR ASSIGN . value
    (30) assign -> INSTANCE_VAR ASSIGN . data_structure
    (94) dataIn -> INSTANCE_VAR ASSIGN . GETS
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (41) data_structure -> . array
    (42) data_structure -> . tupla
    (43) data_structure -> . hash
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (97) tupla -> . LPAREN values RPAREN
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 95
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62
    LBRACKET        shift and go to state 32
    LPAREN          shift and go to state 99
    LBRACE          shift and go to state 39

    value                          shift and go to state 93
    data_structure                 shift and go to state 94
    array                          shift and go to state 96
    tupla                          shift and go to state 97
    hash                           shift and go to state 98

state 47

    (33) aritmeticExpresion -> value operator . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 100

state 48

    (53) condition -> value operComp . value
    (54) condition -> value operComp . aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 101
    aritmeticExpresion             shift and go to state 102

state 49

    (57) operComp -> LESSTHAN .

    NUMBER          reduce using rule 57 (operComp -> LESSTHAN .)
    STRING          reduce using rule 57 (operComp -> LESSTHAN .)
    INSTANCE_VAR    reduce using rule 57 (operComp -> LESSTHAN .)
    GLOBAL_VAR      reduce using rule 57 (operComp -> LESSTHAN .)
    ID              reduce using rule 57 (operComp -> LESSTHAN .)


state 50

    (58) operComp -> GREATERTHAN .

    NUMBER          reduce using rule 58 (operComp -> GREATERTHAN .)
    STRING          reduce using rule 58 (operComp -> GREATERTHAN .)
    INSTANCE_VAR    reduce using rule 58 (operComp -> GREATERTHAN .)
    GLOBAL_VAR      reduce using rule 58 (operComp -> GREATERTHAN .)
    ID              reduce using rule 58 (operComp -> GREATERTHAN .)


state 51

    (59) operComp -> GREATEROREQUAL .

    NUMBER          reduce using rule 59 (operComp -> GREATEROREQUAL .)
    STRING          reduce using rule 59 (operComp -> GREATEROREQUAL .)
    INSTANCE_VAR    reduce using rule 59 (operComp -> GREATEROREQUAL .)
    GLOBAL_VAR      reduce using rule 59 (operComp -> GREATEROREQUAL .)
    ID              reduce using rule 59 (operComp -> GREATEROREQUAL .)


state 52

    (60) operComp -> LESSOREQUAL .

    NUMBER          reduce using rule 60 (operComp -> LESSOREQUAL .)
    STRING          reduce using rule 60 (operComp -> LESSOREQUAL .)
    INSTANCE_VAR    reduce using rule 60 (operComp -> LESSOREQUAL .)
    GLOBAL_VAR      reduce using rule 60 (operComp -> LESSOREQUAL .)
    ID              reduce using rule 60 (operComp -> LESSOREQUAL .)


state 53

    (61) operComp -> EQUAL .

    NUMBER          reduce using rule 61 (operComp -> EQUAL .)
    STRING          reduce using rule 61 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 61 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 61 (operComp -> EQUAL .)
    ID              reduce using rule 61 (operComp -> EQUAL .)


state 54

    (62) operComp -> NOTEQUAL .

    NUMBER          reduce using rule 62 (operComp -> NOTEQUAL .)
    STRING          reduce using rule 62 (operComp -> NOTEQUAL .)
    INSTANCE_VAR    reduce using rule 62 (operComp -> NOTEQUAL .)
    GLOBAL_VAR      reduce using rule 62 (operComp -> NOTEQUAL .)
    ID              reduce using rule 62 (operComp -> NOTEQUAL .)


state 55

    (28) assign -> GLOBAL_VAR ASSIGN . value
    (31) assign -> GLOBAL_VAR ASSIGN . data_structure
    (95) dataIn -> GLOBAL_VAR ASSIGN . GETS
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (41) data_structure -> . array
    (42) data_structure -> . tupla
    (43) data_structure -> . hash
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (97) tupla -> . LPAREN values RPAREN
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 105
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62
    LBRACKET        shift and go to state 32
    LPAREN          shift and go to state 99
    LBRACE          shift and go to state 39

    value                          shift and go to state 103
    data_structure                 shift and go to state 104
    array                          shift and go to state 96
    tupla                          shift and go to state 97
    hash                           shift and go to state 98

state 56

    (29) assign -> ID ASSIGN . value
    (32) assign -> ID ASSIGN . data_structure
    (93) dataIn -> ID ASSIGN . GETS
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (41) data_structure -> . array
    (42) data_structure -> . tupla
    (43) data_structure -> . hash
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (97) tupla -> . LPAREN values RPAREN
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 108
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62
    LBRACKET        shift and go to state 32
    LPAREN          shift and go to state 99
    LBRACE          shift and go to state 39

    value                          shift and go to state 106
    data_structure                 shift and go to state 107
    array                          shift and go to state 96
    tupla                          shift and go to state 97
    hash                           shift and go to state 98

state 57

    (79) p_SfunctionINV -> ID LPAREN . params RPAREN
    (84) function_call -> ID LPAREN . RPAREN
    (85) function_call -> ID LPAREN . params RPAREN
    (86) function_call -> ID LPAREN . param RPAREN
    (83) params -> . value COMMA value
    (82) param -> . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    RPAREN          shift and go to state 110
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    params                         shift and go to state 109
    param                          shift and go to state 111
    value                          shift and go to state 112

state 58

    (87) impression -> PRINT LPAREN . value RPAREN
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 113

state 59

    (88) impression -> PRINT value .

    INSTANCE_VAR    reduce using rule 88 (impression -> PRINT value .)
    GLOBAL_VAR      reduce using rule 88 (impression -> PRINT value .)
    ID              reduce using rule 88 (impression -> PRINT value .)
    PRINT           reduce using rule 88 (impression -> PRINT value .)
    PUTS            reduce using rule 88 (impression -> PRINT value .)
    P               reduce using rule 88 (impression -> PRINT value .)
    LPAREN          reduce using rule 88 (impression -> PRINT value .)
    WHILE           reduce using rule 88 (impression -> PRINT value .)
    CASE            reduce using rule 88 (impression -> PRINT value .)
    DEF             reduce using rule 88 (impression -> PRINT value .)
    LBRACKET        reduce using rule 88 (impression -> PRINT value .)
    PLUS            reduce using rule 88 (impression -> PRINT value .)
    MINUS           reduce using rule 88 (impression -> PRINT value .)
    TIMES           reduce using rule 88 (impression -> PRINT value .)
    DIVIDE          reduce using rule 88 (impression -> PRINT value .)
    MOD             reduce using rule 88 (impression -> PRINT value .)
    LBRACE          reduce using rule 88 (impression -> PRINT value .)
    NUMBER          reduce using rule 88 (impression -> PRINT value .)
    STRING          reduce using rule 88 (impression -> PRINT value .)
    IF              reduce using rule 88 (impression -> PRINT value .)
    $end            reduce using rule 88 (impression -> PRINT value .)
    END             reduce using rule 88 (impression -> PRINT value .)
    WHEN            reduce using rule 88 (impression -> PRINT value .)
    ELSE            reduce using rule 88 (impression -> PRINT value .)
    ELSIF           reduce using rule 88 (impression -> PRINT value .)


state 60

    (22) value -> INSTANCE_VAR .

    INSTANCE_VAR    reduce using rule 22 (value -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 22 (value -> INSTANCE_VAR .)
    ID              reduce using rule 22 (value -> INSTANCE_VAR .)
    PRINT           reduce using rule 22 (value -> INSTANCE_VAR .)
    PUTS            reduce using rule 22 (value -> INSTANCE_VAR .)
    P               reduce using rule 22 (value -> INSTANCE_VAR .)
    LPAREN          reduce using rule 22 (value -> INSTANCE_VAR .)
    WHILE           reduce using rule 22 (value -> INSTANCE_VAR .)
    CASE            reduce using rule 22 (value -> INSTANCE_VAR .)
    DEF             reduce using rule 22 (value -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 22 (value -> INSTANCE_VAR .)
    PLUS            reduce using rule 22 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 22 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 22 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 22 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 22 (value -> INSTANCE_VAR .)
    LBRACE          reduce using rule 22 (value -> INSTANCE_VAR .)
    NUMBER          reduce using rule 22 (value -> INSTANCE_VAR .)
    STRING          reduce using rule 22 (value -> INSTANCE_VAR .)
    IF              reduce using rule 22 (value -> INSTANCE_VAR .)
    $end            reduce using rule 22 (value -> INSTANCE_VAR .)
    END             reduce using rule 22 (value -> INSTANCE_VAR .)
    WHEN            reduce using rule 22 (value -> INSTANCE_VAR .)
    ELSE            reduce using rule 22 (value -> INSTANCE_VAR .)
    ELSIF           reduce using rule 22 (value -> INSTANCE_VAR .)
    COMMA           reduce using rule 22 (value -> INSTANCE_VAR .)
    RPAREN          reduce using rule 22 (value -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 22 (value -> INSTANCE_VAR .)
    COLON           reduce using rule 22 (value -> INSTANCE_VAR .)
    AND             reduce using rule 22 (value -> INSTANCE_VAR .)
    OR              reduce using rule 22 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 22 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 22 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 22 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 22 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 22 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 22 (value -> INSTANCE_VAR .)
    RBRACE          reduce using rule 22 (value -> INSTANCE_VAR .)


state 61

    (23) value -> GLOBAL_VAR .

    INSTANCE_VAR    reduce using rule 23 (value -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 23 (value -> GLOBAL_VAR .)
    ID              reduce using rule 23 (value -> GLOBAL_VAR .)
    PRINT           reduce using rule 23 (value -> GLOBAL_VAR .)
    PUTS            reduce using rule 23 (value -> GLOBAL_VAR .)
    P               reduce using rule 23 (value -> GLOBAL_VAR .)
    LPAREN          reduce using rule 23 (value -> GLOBAL_VAR .)
    WHILE           reduce using rule 23 (value -> GLOBAL_VAR .)
    CASE            reduce using rule 23 (value -> GLOBAL_VAR .)
    DEF             reduce using rule 23 (value -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 23 (value -> GLOBAL_VAR .)
    PLUS            reduce using rule 23 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 23 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 23 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 23 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 23 (value -> GLOBAL_VAR .)
    LBRACE          reduce using rule 23 (value -> GLOBAL_VAR .)
    NUMBER          reduce using rule 23 (value -> GLOBAL_VAR .)
    STRING          reduce using rule 23 (value -> GLOBAL_VAR .)
    IF              reduce using rule 23 (value -> GLOBAL_VAR .)
    $end            reduce using rule 23 (value -> GLOBAL_VAR .)
    END             reduce using rule 23 (value -> GLOBAL_VAR .)
    WHEN            reduce using rule 23 (value -> GLOBAL_VAR .)
    ELSE            reduce using rule 23 (value -> GLOBAL_VAR .)
    ELSIF           reduce using rule 23 (value -> GLOBAL_VAR .)
    COMMA           reduce using rule 23 (value -> GLOBAL_VAR .)
    RPAREN          reduce using rule 23 (value -> GLOBAL_VAR .)
    RBRACKET        reduce using rule 23 (value -> GLOBAL_VAR .)
    COLON           reduce using rule 23 (value -> GLOBAL_VAR .)
    AND             reduce using rule 23 (value -> GLOBAL_VAR .)
    OR              reduce using rule 23 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 23 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 23 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 23 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 23 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 23 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 23 (value -> GLOBAL_VAR .)
    RBRACE          reduce using rule 23 (value -> GLOBAL_VAR .)


state 62

    (24) value -> ID .

    INSTANCE_VAR    reduce using rule 24 (value -> ID .)
    GLOBAL_VAR      reduce using rule 24 (value -> ID .)
    ID              reduce using rule 24 (value -> ID .)
    PRINT           reduce using rule 24 (value -> ID .)
    PUTS            reduce using rule 24 (value -> ID .)
    P               reduce using rule 24 (value -> ID .)
    LPAREN          reduce using rule 24 (value -> ID .)
    WHILE           reduce using rule 24 (value -> ID .)
    CASE            reduce using rule 24 (value -> ID .)
    DEF             reduce using rule 24 (value -> ID .)
    LBRACKET        reduce using rule 24 (value -> ID .)
    PLUS            reduce using rule 24 (value -> ID .)
    MINUS           reduce using rule 24 (value -> ID .)
    TIMES           reduce using rule 24 (value -> ID .)
    DIVIDE          reduce using rule 24 (value -> ID .)
    MOD             reduce using rule 24 (value -> ID .)
    LBRACE          reduce using rule 24 (value -> ID .)
    NUMBER          reduce using rule 24 (value -> ID .)
    STRING          reduce using rule 24 (value -> ID .)
    IF              reduce using rule 24 (value -> ID .)
    $end            reduce using rule 24 (value -> ID .)
    END             reduce using rule 24 (value -> ID .)
    WHEN            reduce using rule 24 (value -> ID .)
    ELSE            reduce using rule 24 (value -> ID .)
    ELSIF           reduce using rule 24 (value -> ID .)
    COMMA           reduce using rule 24 (value -> ID .)
    RPAREN          reduce using rule 24 (value -> ID .)
    RBRACKET        reduce using rule 24 (value -> ID .)
    COLON           reduce using rule 24 (value -> ID .)
    AND             reduce using rule 24 (value -> ID .)
    OR              reduce using rule 24 (value -> ID .)
    LESSTHAN        reduce using rule 24 (value -> ID .)
    GREATERTHAN     reduce using rule 24 (value -> ID .)
    GREATEROREQUAL  reduce using rule 24 (value -> ID .)
    LESSOREQUAL     reduce using rule 24 (value -> ID .)
    EQUAL           reduce using rule 24 (value -> ID .)
    NOTEQUAL        reduce using rule 24 (value -> ID .)
    RBRACE          reduce using rule 24 (value -> ID .)


state 63

    (97) tupla -> LPAREN values . RPAREN

    RPAREN          shift and go to state 114


state 64

    (40) operator -> LPAREN aritmeticExpresion . RPAREN
    (34) aritmeticExpresion -> aritmeticExpresion . operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN

    RPAREN          shift and go to state 115
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45

    operator                       shift and go to state 44

state 65

    (25) values -> value .
    (26) values -> value . COMMA values
    (33) aritmeticExpresion -> value . operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN

    RPAREN          reduce using rule 25 (values -> value .)
    COMMA           shift and go to state 116
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45

    operator                       shift and go to state 47

state 66

    (89) impression -> PUTS value .

    INSTANCE_VAR    reduce using rule 89 (impression -> PUTS value .)
    GLOBAL_VAR      reduce using rule 89 (impression -> PUTS value .)
    ID              reduce using rule 89 (impression -> PUTS value .)
    PRINT           reduce using rule 89 (impression -> PUTS value .)
    PUTS            reduce using rule 89 (impression -> PUTS value .)
    P               reduce using rule 89 (impression -> PUTS value .)
    LPAREN          reduce using rule 89 (impression -> PUTS value .)
    WHILE           reduce using rule 89 (impression -> PUTS value .)
    CASE            reduce using rule 89 (impression -> PUTS value .)
    DEF             reduce using rule 89 (impression -> PUTS value .)
    LBRACKET        reduce using rule 89 (impression -> PUTS value .)
    PLUS            reduce using rule 89 (impression -> PUTS value .)
    MINUS           reduce using rule 89 (impression -> PUTS value .)
    TIMES           reduce using rule 89 (impression -> PUTS value .)
    DIVIDE          reduce using rule 89 (impression -> PUTS value .)
    MOD             reduce using rule 89 (impression -> PUTS value .)
    LBRACE          reduce using rule 89 (impression -> PUTS value .)
    NUMBER          reduce using rule 89 (impression -> PUTS value .)
    STRING          reduce using rule 89 (impression -> PUTS value .)
    IF              reduce using rule 89 (impression -> PUTS value .)
    $end            reduce using rule 89 (impression -> PUTS value .)
    END             reduce using rule 89 (impression -> PUTS value .)
    WHEN            reduce using rule 89 (impression -> PUTS value .)
    ELSE            reduce using rule 89 (impression -> PUTS value .)
    ELSIF           reduce using rule 89 (impression -> PUTS value .)


state 67

    (90) impression -> PUTS LPAREN . value RPAREN
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 117

state 68

    (91) impression -> P LPAREN . value RPAREN
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 118

state 69

    (92) impression -> P value .

    INSTANCE_VAR    reduce using rule 92 (impression -> P value .)
    GLOBAL_VAR      reduce using rule 92 (impression -> P value .)
    ID              reduce using rule 92 (impression -> P value .)
    PRINT           reduce using rule 92 (impression -> P value .)
    PUTS            reduce using rule 92 (impression -> P value .)
    P               reduce using rule 92 (impression -> P value .)
    LPAREN          reduce using rule 92 (impression -> P value .)
    WHILE           reduce using rule 92 (impression -> P value .)
    CASE            reduce using rule 92 (impression -> P value .)
    DEF             reduce using rule 92 (impression -> P value .)
    LBRACKET        reduce using rule 92 (impression -> P value .)
    PLUS            reduce using rule 92 (impression -> P value .)
    MINUS           reduce using rule 92 (impression -> P value .)
    TIMES           reduce using rule 92 (impression -> P value .)
    DIVIDE          reduce using rule 92 (impression -> P value .)
    MOD             reduce using rule 92 (impression -> P value .)
    LBRACE          reduce using rule 92 (impression -> P value .)
    NUMBER          reduce using rule 92 (impression -> P value .)
    STRING          reduce using rule 92 (impression -> P value .)
    IF              reduce using rule 92 (impression -> P value .)
    $end            reduce using rule 92 (impression -> P value .)
    END             reduce using rule 92 (impression -> P value .)
    WHEN            reduce using rule 92 (impression -> P value .)
    ELSE            reduce using rule 92 (impression -> P value .)
    ELSIF           reduce using rule 92 (impression -> P value .)


state 70

    (52) conditions -> condition conector . conditions
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    condition                      shift and go to state 28
    conditions                     shift and go to state 119
    value                          shift and go to state 120

state 71

    (55) conector -> AND .

    NUMBER          reduce using rule 55 (conector -> AND .)
    STRING          reduce using rule 55 (conector -> AND .)
    INSTANCE_VAR    reduce using rule 55 (conector -> AND .)
    GLOBAL_VAR      reduce using rule 55 (conector -> AND .)
    ID              reduce using rule 55 (conector -> AND .)


state 72

    (56) conector -> OR .

    NUMBER          reduce using rule 56 (conector -> OR .)
    STRING          reduce using rule 56 (conector -> OR .)
    INSTANCE_VAR    reduce using rule 56 (conector -> OR .)
    GLOBAL_VAR      reduce using rule 56 (conector -> OR .)
    ID              reduce using rule 56 (conector -> OR .)


state 73

    (96) while_loop -> WHILE LPAREN . conditions RPAREN codigo END
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 121
    condition                      shift and go to state 28
    value                          shift and go to state 120

state 74

    (76) case -> CASE whens . END
    (75) whens -> whens . when
    (73) when -> . WHEN conditions codigo

    END             shift and go to state 122
    WHEN            shift and go to state 76

    when                           shift and go to state 123

state 75

    (74) whens -> when .

    END             reduce using rule 74 (whens -> when .)
    WHEN            reduce using rule 74 (whens -> when .)


state 76

    (73) when -> WHEN . conditions codigo
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 124
    condition                      shift and go to state 28
    value                          shift and go to state 120

state 77

    (77) Sfunction -> DEF ID . LPAREN RPAREN codigo END
    (80) p_function_one_parameter -> DEF ID . LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> DEF ID . LPAREN params RPAREN codigo END

    LPAREN          shift and go to state 125


state 78

    (44) array -> LBRACKET RBRACKET .

    INSTANCE_VAR    reduce using rule 44 (array -> LBRACKET RBRACKET .)
    GLOBAL_VAR      reduce using rule 44 (array -> LBRACKET RBRACKET .)
    ID              reduce using rule 44 (array -> LBRACKET RBRACKET .)
    PRINT           reduce using rule 44 (array -> LBRACKET RBRACKET .)
    PUTS            reduce using rule 44 (array -> LBRACKET RBRACKET .)
    P               reduce using rule 44 (array -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 44 (array -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 44 (array -> LBRACKET RBRACKET .)
    CASE            reduce using rule 44 (array -> LBRACKET RBRACKET .)
    DEF             reduce using rule 44 (array -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 44 (array -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 44 (array -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 44 (array -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 44 (array -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 44 (array -> LBRACKET RBRACKET .)
    MOD             reduce using rule 44 (array -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 44 (array -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 44 (array -> LBRACKET RBRACKET .)
    STRING          reduce using rule 44 (array -> LBRACKET RBRACKET .)
    IF              reduce using rule 44 (array -> LBRACKET RBRACKET .)
    $end            reduce using rule 44 (array -> LBRACKET RBRACKET .)
    END             reduce using rule 44 (array -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 44 (array -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 44 (array -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 44 (array -> LBRACKET RBRACKET .)


state 79

    (45) array -> LBRACKET values . RBRACKET

    RBRACKET        shift and go to state 126


state 80

    (25) values -> value .
    (26) values -> value . COMMA values

    RBRACKET        reduce using rule 25 (values -> value .)
    RPAREN          reduce using rule 25 (values -> value .)
    COMMA           shift and go to state 116


state 81

    (64) control_structures -> if_block elsif_blocks .
    (65) control_structures -> if_block elsif_blocks . else_block
    (70) elsif_blocks -> elsif_blocks . elsif_block
    (72) else_block -> . ELSE codigo END
    (71) elsif_block -> . ELSIF LPAREN conditions RPAREN codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    INSTANCE_VAR    reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    GLOBAL_VAR      reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    ID              reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    PRINT           reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    PUTS            reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    P               reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    LPAREN          reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    WHILE           reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    CASE            reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    DEF             reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    LBRACKET        reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    PLUS            reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    MINUS           reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    TIMES           reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    DIVIDE          reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    MOD             reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    LBRACE          reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    NUMBER          reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    STRING          reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    IF              reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    $end            reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    END             reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    WHEN            reduce using rule 64 (control_structures -> if_block elsif_blocks .)
    ELSE            shift and go to state 84
    ELSIF           shift and go to state 85

  ! ELSE            [ reduce using rule 64 (control_structures -> if_block elsif_blocks .) ]
  ! ELSIF           [ reduce using rule 64 (control_structures -> if_block elsif_blocks .) ]

    else_block                     shift and go to state 127
    elsif_block                    shift and go to state 128

state 82

    (66) control_structures -> if_block else_block .

    INSTANCE_VAR    reduce using rule 66 (control_structures -> if_block else_block .)
    GLOBAL_VAR      reduce using rule 66 (control_structures -> if_block else_block .)
    ID              reduce using rule 66 (control_structures -> if_block else_block .)
    PRINT           reduce using rule 66 (control_structures -> if_block else_block .)
    PUTS            reduce using rule 66 (control_structures -> if_block else_block .)
    P               reduce using rule 66 (control_structures -> if_block else_block .)
    LPAREN          reduce using rule 66 (control_structures -> if_block else_block .)
    WHILE           reduce using rule 66 (control_structures -> if_block else_block .)
    CASE            reduce using rule 66 (control_structures -> if_block else_block .)
    DEF             reduce using rule 66 (control_structures -> if_block else_block .)
    LBRACKET        reduce using rule 66 (control_structures -> if_block else_block .)
    PLUS            reduce using rule 66 (control_structures -> if_block else_block .)
    MINUS           reduce using rule 66 (control_structures -> if_block else_block .)
    TIMES           reduce using rule 66 (control_structures -> if_block else_block .)
    DIVIDE          reduce using rule 66 (control_structures -> if_block else_block .)
    MOD             reduce using rule 66 (control_structures -> if_block else_block .)
    LBRACE          reduce using rule 66 (control_structures -> if_block else_block .)
    NUMBER          reduce using rule 66 (control_structures -> if_block else_block .)
    STRING          reduce using rule 66 (control_structures -> if_block else_block .)
    IF              reduce using rule 66 (control_structures -> if_block else_block .)
    $end            reduce using rule 66 (control_structures -> if_block else_block .)
    END             reduce using rule 66 (control_structures -> if_block else_block .)
    WHEN            reduce using rule 66 (control_structures -> if_block else_block .)
    ELSE            reduce using rule 66 (control_structures -> if_block else_block .)
    ELSIF           reduce using rule 66 (control_structures -> if_block else_block .)


state 83

    (69) elsif_blocks -> elsif_block .

    END             reduce using rule 69 (elsif_blocks -> elsif_block .)
    INSTANCE_VAR    reduce using rule 69 (elsif_blocks -> elsif_block .)
    GLOBAL_VAR      reduce using rule 69 (elsif_blocks -> elsif_block .)
    ID              reduce using rule 69 (elsif_blocks -> elsif_block .)
    PRINT           reduce using rule 69 (elsif_blocks -> elsif_block .)
    PUTS            reduce using rule 69 (elsif_blocks -> elsif_block .)
    P               reduce using rule 69 (elsif_blocks -> elsif_block .)
    LPAREN          reduce using rule 69 (elsif_blocks -> elsif_block .)
    WHILE           reduce using rule 69 (elsif_blocks -> elsif_block .)
    CASE            reduce using rule 69 (elsif_blocks -> elsif_block .)
    DEF             reduce using rule 69 (elsif_blocks -> elsif_block .)
    LBRACKET        reduce using rule 69 (elsif_blocks -> elsif_block .)
    PLUS            reduce using rule 69 (elsif_blocks -> elsif_block .)
    MINUS           reduce using rule 69 (elsif_blocks -> elsif_block .)
    TIMES           reduce using rule 69 (elsif_blocks -> elsif_block .)
    DIVIDE          reduce using rule 69 (elsif_blocks -> elsif_block .)
    MOD             reduce using rule 69 (elsif_blocks -> elsif_block .)
    LBRACE          reduce using rule 69 (elsif_blocks -> elsif_block .)
    NUMBER          reduce using rule 69 (elsif_blocks -> elsif_block .)
    STRING          reduce using rule 69 (elsif_blocks -> elsif_block .)
    IF              reduce using rule 69 (elsif_blocks -> elsif_block .)
    ELSE            reduce using rule 69 (elsif_blocks -> elsif_block .)
    ELSIF           reduce using rule 69 (elsif_blocks -> elsif_block .)
    $end            reduce using rule 69 (elsif_blocks -> elsif_block .)
    WHEN            reduce using rule 69 (elsif_blocks -> elsif_block .)


state 84

    (72) else_block -> ELSE . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    codigo                         shift and go to state 129
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 85

    (71) elsif_block -> ELSIF . LPAREN conditions RPAREN codigo

    LPAREN          shift and go to state 130


state 86

    (46) hash -> LBRACE RBRACE .

    INSTANCE_VAR    reduce using rule 46 (hash -> LBRACE RBRACE .)
    GLOBAL_VAR      reduce using rule 46 (hash -> LBRACE RBRACE .)
    ID              reduce using rule 46 (hash -> LBRACE RBRACE .)
    PRINT           reduce using rule 46 (hash -> LBRACE RBRACE .)
    PUTS            reduce using rule 46 (hash -> LBRACE RBRACE .)
    P               reduce using rule 46 (hash -> LBRACE RBRACE .)
    LPAREN          reduce using rule 46 (hash -> LBRACE RBRACE .)
    WHILE           reduce using rule 46 (hash -> LBRACE RBRACE .)
    CASE            reduce using rule 46 (hash -> LBRACE RBRACE .)
    DEF             reduce using rule 46 (hash -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 46 (hash -> LBRACE RBRACE .)
    PLUS            reduce using rule 46 (hash -> LBRACE RBRACE .)
    MINUS           reduce using rule 46 (hash -> LBRACE RBRACE .)
    TIMES           reduce using rule 46 (hash -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 46 (hash -> LBRACE RBRACE .)
    MOD             reduce using rule 46 (hash -> LBRACE RBRACE .)
    LBRACE          reduce using rule 46 (hash -> LBRACE RBRACE .)
    NUMBER          reduce using rule 46 (hash -> LBRACE RBRACE .)
    STRING          reduce using rule 46 (hash -> LBRACE RBRACE .)
    IF              reduce using rule 46 (hash -> LBRACE RBRACE .)
    $end            reduce using rule 46 (hash -> LBRACE RBRACE .)
    END             reduce using rule 46 (hash -> LBRACE RBRACE .)
    WHEN            reduce using rule 46 (hash -> LBRACE RBRACE .)
    ELSE            reduce using rule 46 (hash -> LBRACE RBRACE .)
    ELSIF           reduce using rule 46 (hash -> LBRACE RBRACE .)


state 87

    (47) hash -> LBRACE hash_contents . RBRACE
    (49) hash_contents -> hash_contents . COMMA hash_pair

    RBRACE          shift and go to state 131
    COMMA           shift and go to state 132


state 88

    (48) hash_contents -> hash_pair .

    RBRACE          reduce using rule 48 (hash_contents -> hash_pair .)
    COMMA           reduce using rule 48 (hash_contents -> hash_pair .)


state 89

    (50) hash_pair -> value . COLON value

    COLON           shift and go to state 133


state 90

    (67) if_block -> IF LPAREN . conditions RPAREN codigo
    (68) if_block -> IF LPAREN . conditions RPAREN codigo END
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 134
    condition                      shift and go to state 28
    value                          shift and go to state 120

state 91

    (34) aritmeticExpresion -> aritmeticExpresion operator value .

    PLUS            reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MINUS           reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    TIMES           reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DIVIDE          reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MOD             reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LPAREN          reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    INSTANCE_VAR    reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    GLOBAL_VAR      reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ID              reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    PRINT           reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    PUTS            reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    P               reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    WHILE           reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    CASE            reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DEF             reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LBRACKET        reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LBRACE          reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    NUMBER          reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    STRING          reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    IF              reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    $end            reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    RPAREN          reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    AND             reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    OR              reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    END             reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    WHEN            reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSE            reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSIF           reduce using rule 34 (aritmeticExpresion -> aritmeticExpresion operator value .)


state 92

    (33) aritmeticExpresion -> value . operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN

    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45

    operator                       shift and go to state 47

state 93

    (27) assign -> INSTANCE_VAR ASSIGN value .

    INSTANCE_VAR    reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    ID              reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    PRINT           reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    PUTS            reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    P               reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    LPAREN          reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    WHILE           reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    CASE            reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    DEF             reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACKET        reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    PLUS            reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    MINUS           reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    TIMES           reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    DIVIDE          reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    MOD             reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACE          reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    NUMBER          reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    STRING          reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    IF              reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    $end            reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    END             reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    WHEN            reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSE            reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSIF           reduce using rule 27 (assign -> INSTANCE_VAR ASSIGN value .)


state 94

    (30) assign -> INSTANCE_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ID              reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    P               reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    CASE            reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DEF             reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PLUS            reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    MINUS           reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    TIMES           reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DIVIDE          reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    MOD             reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACE          reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    STRING          reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    IF              reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    $end            reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    END             reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHEN            reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 30 (assign -> INSTANCE_VAR ASSIGN data_structure .)


state 95

    (94) dataIn -> INSTANCE_VAR ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ID              reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PRINT           reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PUTS            reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    P               reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LPAREN          reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    WHILE           reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    CASE            reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    DEF             reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LBRACKET        reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PLUS            reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    MINUS           reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    TIMES           reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    DIVIDE          reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    MOD             reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LBRACE          reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    NUMBER          reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    STRING          reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    IF              reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    $end            reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    END             reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    WHEN            reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ELSE            reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 94 (dataIn -> INSTANCE_VAR ASSIGN GETS .)


state 96

    (41) data_structure -> array .

    INSTANCE_VAR    reduce using rule 41 (data_structure -> array .)
    GLOBAL_VAR      reduce using rule 41 (data_structure -> array .)
    ID              reduce using rule 41 (data_structure -> array .)
    PRINT           reduce using rule 41 (data_structure -> array .)
    PUTS            reduce using rule 41 (data_structure -> array .)
    P               reduce using rule 41 (data_structure -> array .)
    LPAREN          reduce using rule 41 (data_structure -> array .)
    WHILE           reduce using rule 41 (data_structure -> array .)
    CASE            reduce using rule 41 (data_structure -> array .)
    DEF             reduce using rule 41 (data_structure -> array .)
    LBRACKET        reduce using rule 41 (data_structure -> array .)
    PLUS            reduce using rule 41 (data_structure -> array .)
    MINUS           reduce using rule 41 (data_structure -> array .)
    TIMES           reduce using rule 41 (data_structure -> array .)
    DIVIDE          reduce using rule 41 (data_structure -> array .)
    MOD             reduce using rule 41 (data_structure -> array .)
    LBRACE          reduce using rule 41 (data_structure -> array .)
    NUMBER          reduce using rule 41 (data_structure -> array .)
    STRING          reduce using rule 41 (data_structure -> array .)
    IF              reduce using rule 41 (data_structure -> array .)
    $end            reduce using rule 41 (data_structure -> array .)
    END             reduce using rule 41 (data_structure -> array .)
    WHEN            reduce using rule 41 (data_structure -> array .)
    ELSE            reduce using rule 41 (data_structure -> array .)
    ELSIF           reduce using rule 41 (data_structure -> array .)


state 97

    (42) data_structure -> tupla .

    INSTANCE_VAR    reduce using rule 42 (data_structure -> tupla .)
    GLOBAL_VAR      reduce using rule 42 (data_structure -> tupla .)
    ID              reduce using rule 42 (data_structure -> tupla .)
    PRINT           reduce using rule 42 (data_structure -> tupla .)
    PUTS            reduce using rule 42 (data_structure -> tupla .)
    P               reduce using rule 42 (data_structure -> tupla .)
    LPAREN          reduce using rule 42 (data_structure -> tupla .)
    WHILE           reduce using rule 42 (data_structure -> tupla .)
    CASE            reduce using rule 42 (data_structure -> tupla .)
    DEF             reduce using rule 42 (data_structure -> tupla .)
    LBRACKET        reduce using rule 42 (data_structure -> tupla .)
    PLUS            reduce using rule 42 (data_structure -> tupla .)
    MINUS           reduce using rule 42 (data_structure -> tupla .)
    TIMES           reduce using rule 42 (data_structure -> tupla .)
    DIVIDE          reduce using rule 42 (data_structure -> tupla .)
    MOD             reduce using rule 42 (data_structure -> tupla .)
    LBRACE          reduce using rule 42 (data_structure -> tupla .)
    NUMBER          reduce using rule 42 (data_structure -> tupla .)
    STRING          reduce using rule 42 (data_structure -> tupla .)
    IF              reduce using rule 42 (data_structure -> tupla .)
    $end            reduce using rule 42 (data_structure -> tupla .)
    END             reduce using rule 42 (data_structure -> tupla .)
    WHEN            reduce using rule 42 (data_structure -> tupla .)
    ELSE            reduce using rule 42 (data_structure -> tupla .)
    ELSIF           reduce using rule 42 (data_structure -> tupla .)


state 98

    (43) data_structure -> hash .

    INSTANCE_VAR    reduce using rule 43 (data_structure -> hash .)
    GLOBAL_VAR      reduce using rule 43 (data_structure -> hash .)
    ID              reduce using rule 43 (data_structure -> hash .)
    PRINT           reduce using rule 43 (data_structure -> hash .)
    PUTS            reduce using rule 43 (data_structure -> hash .)
    P               reduce using rule 43 (data_structure -> hash .)
    LPAREN          reduce using rule 43 (data_structure -> hash .)
    WHILE           reduce using rule 43 (data_structure -> hash .)
    CASE            reduce using rule 43 (data_structure -> hash .)
    DEF             reduce using rule 43 (data_structure -> hash .)
    LBRACKET        reduce using rule 43 (data_structure -> hash .)
    PLUS            reduce using rule 43 (data_structure -> hash .)
    MINUS           reduce using rule 43 (data_structure -> hash .)
    TIMES           reduce using rule 43 (data_structure -> hash .)
    DIVIDE          reduce using rule 43 (data_structure -> hash .)
    MOD             reduce using rule 43 (data_structure -> hash .)
    LBRACE          reduce using rule 43 (data_structure -> hash .)
    NUMBER          reduce using rule 43 (data_structure -> hash .)
    STRING          reduce using rule 43 (data_structure -> hash .)
    IF              reduce using rule 43 (data_structure -> hash .)
    $end            reduce using rule 43 (data_structure -> hash .)
    END             reduce using rule 43 (data_structure -> hash .)
    WHEN            reduce using rule 43 (data_structure -> hash .)
    ELSE            reduce using rule 43 (data_structure -> hash .)
    ELSIF           reduce using rule 43 (data_structure -> hash .)


state 99

    (97) tupla -> LPAREN . values RPAREN
    (25) values -> . value
    (26) values -> . value COMMA values
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 63
    value                          shift and go to state 80

state 100

    (33) aritmeticExpresion -> value operator value .

    PLUS            reduce using rule 33 (aritmeticExpresion -> value operator value .)
    MINUS           reduce using rule 33 (aritmeticExpresion -> value operator value .)
    TIMES           reduce using rule 33 (aritmeticExpresion -> value operator value .)
    DIVIDE          reduce using rule 33 (aritmeticExpresion -> value operator value .)
    MOD             reduce using rule 33 (aritmeticExpresion -> value operator value .)
    LPAREN          reduce using rule 33 (aritmeticExpresion -> value operator value .)
    INSTANCE_VAR    reduce using rule 33 (aritmeticExpresion -> value operator value .)
    GLOBAL_VAR      reduce using rule 33 (aritmeticExpresion -> value operator value .)
    ID              reduce using rule 33 (aritmeticExpresion -> value operator value .)
    PRINT           reduce using rule 33 (aritmeticExpresion -> value operator value .)
    PUTS            reduce using rule 33 (aritmeticExpresion -> value operator value .)
    P               reduce using rule 33 (aritmeticExpresion -> value operator value .)
    WHILE           reduce using rule 33 (aritmeticExpresion -> value operator value .)
    CASE            reduce using rule 33 (aritmeticExpresion -> value operator value .)
    DEF             reduce using rule 33 (aritmeticExpresion -> value operator value .)
    LBRACKET        reduce using rule 33 (aritmeticExpresion -> value operator value .)
    LBRACE          reduce using rule 33 (aritmeticExpresion -> value operator value .)
    NUMBER          reduce using rule 33 (aritmeticExpresion -> value operator value .)
    STRING          reduce using rule 33 (aritmeticExpresion -> value operator value .)
    IF              reduce using rule 33 (aritmeticExpresion -> value operator value .)
    $end            reduce using rule 33 (aritmeticExpresion -> value operator value .)
    RPAREN          reduce using rule 33 (aritmeticExpresion -> value operator value .)
    AND             reduce using rule 33 (aritmeticExpresion -> value operator value .)
    OR              reduce using rule 33 (aritmeticExpresion -> value operator value .)
    END             reduce using rule 33 (aritmeticExpresion -> value operator value .)
    WHEN            reduce using rule 33 (aritmeticExpresion -> value operator value .)
    ELSE            reduce using rule 33 (aritmeticExpresion -> value operator value .)
    ELSIF           reduce using rule 33 (aritmeticExpresion -> value operator value .)


state 101

    (53) condition -> value operComp value .
    (33) aritmeticExpresion -> value . operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AND             reduce using rule 53 (condition -> value operComp value .)
    OR              reduce using rule 53 (condition -> value operComp value .)
    INSTANCE_VAR    reduce using rule 53 (condition -> value operComp value .)
    GLOBAL_VAR      reduce using rule 53 (condition -> value operComp value .)
    ID              reduce using rule 53 (condition -> value operComp value .)
    PRINT           reduce using rule 53 (condition -> value operComp value .)
    PUTS            reduce using rule 53 (condition -> value operComp value .)
    P               reduce using rule 53 (condition -> value operComp value .)
    WHILE           reduce using rule 53 (condition -> value operComp value .)
    CASE            reduce using rule 53 (condition -> value operComp value .)
    DEF             reduce using rule 53 (condition -> value operComp value .)
    LBRACKET        reduce using rule 53 (condition -> value operComp value .)
    LBRACE          reduce using rule 53 (condition -> value operComp value .)
    NUMBER          reduce using rule 53 (condition -> value operComp value .)
    STRING          reduce using rule 53 (condition -> value operComp value .)
    IF              reduce using rule 53 (condition -> value operComp value .)
    $end            reduce using rule 53 (condition -> value operComp value .)
    RPAREN          reduce using rule 53 (condition -> value operComp value .)
    END             reduce using rule 53 (condition -> value operComp value .)
    WHEN            reduce using rule 53 (condition -> value operComp value .)
    ELSE            reduce using rule 53 (condition -> value operComp value .)
    ELSIF           reduce using rule 53 (condition -> value operComp value .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45

  ! LPAREN          [ reduce using rule 53 (condition -> value operComp value .) ]
  ! PLUS            [ reduce using rule 53 (condition -> value operComp value .) ]
  ! MINUS           [ reduce using rule 53 (condition -> value operComp value .) ]
  ! TIMES           [ reduce using rule 53 (condition -> value operComp value .) ]
  ! DIVIDE          [ reduce using rule 53 (condition -> value operComp value .) ]
  ! MOD             [ reduce using rule 53 (condition -> value operComp value .) ]

    operator                       shift and go to state 47

state 102

    (54) condition -> value operComp aritmeticExpresion .
    (34) aritmeticExpresion -> aritmeticExpresion . operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AND             reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    OR              reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    INSTANCE_VAR    reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    ID              reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    PRINT           reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    PUTS            reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    P               reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    WHILE           reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    CASE            reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    DEF             reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    LBRACKET        reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    LBRACE          reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    NUMBER          reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    STRING          reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    IF              reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    $end            reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    RPAREN          reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    END             reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    WHEN            reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    ELSE            reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    ELSIF           reduce using rule 54 (condition -> value operComp aritmeticExpresion .)
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LPAREN          shift and go to state 45

  ! LPAREN          [ reduce using rule 54 (condition -> value operComp aritmeticExpresion .) ]
  ! PLUS            [ reduce using rule 54 (condition -> value operComp aritmeticExpresion .) ]
  ! MINUS           [ reduce using rule 54 (condition -> value operComp aritmeticExpresion .) ]
  ! TIMES           [ reduce using rule 54 (condition -> value operComp aritmeticExpresion .) ]
  ! DIVIDE          [ reduce using rule 54 (condition -> value operComp aritmeticExpresion .) ]
  ! MOD             [ reduce using rule 54 (condition -> value operComp aritmeticExpresion .) ]

    operator                       shift and go to state 44

state 103

    (28) assign -> GLOBAL_VAR ASSIGN value .

    INSTANCE_VAR    reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    ID              reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    PRINT           reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    PUTS            reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    P               reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    LPAREN          reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    WHILE           reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    CASE            reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    DEF             reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACKET        reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    PLUS            reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    MINUS           reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    TIMES           reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    DIVIDE          reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    MOD             reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACE          reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    NUMBER          reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    STRING          reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    IF              reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    $end            reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    END             reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    WHEN            reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSE            reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSIF           reduce using rule 28 (assign -> GLOBAL_VAR ASSIGN value .)


state 104

    (31) assign -> GLOBAL_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ID              reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    P               reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    CASE            reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DEF             reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PLUS            reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    MINUS           reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    TIMES           reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DIVIDE          reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    MOD             reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACE          reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    STRING          reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    IF              reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    $end            reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    END             reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHEN            reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 31 (assign -> GLOBAL_VAR ASSIGN data_structure .)


state 105

    (95) dataIn -> GLOBAL_VAR ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ID              reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PRINT           reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PUTS            reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    P               reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LPAREN          reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    WHILE           reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    CASE            reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    DEF             reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LBRACKET        reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PLUS            reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    MINUS           reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    TIMES           reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    DIVIDE          reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    MOD             reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LBRACE          reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    NUMBER          reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    STRING          reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    IF              reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    $end            reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    END             reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    WHEN            reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ELSE            reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 95 (dataIn -> GLOBAL_VAR ASSIGN GETS .)


state 106

    (29) assign -> ID ASSIGN value .

    INSTANCE_VAR    reduce using rule 29 (assign -> ID ASSIGN value .)
    GLOBAL_VAR      reduce using rule 29 (assign -> ID ASSIGN value .)
    ID              reduce using rule 29 (assign -> ID ASSIGN value .)
    PRINT           reduce using rule 29 (assign -> ID ASSIGN value .)
    PUTS            reduce using rule 29 (assign -> ID ASSIGN value .)
    P               reduce using rule 29 (assign -> ID ASSIGN value .)
    LPAREN          reduce using rule 29 (assign -> ID ASSIGN value .)
    WHILE           reduce using rule 29 (assign -> ID ASSIGN value .)
    CASE            reduce using rule 29 (assign -> ID ASSIGN value .)
    DEF             reduce using rule 29 (assign -> ID ASSIGN value .)
    LBRACKET        reduce using rule 29 (assign -> ID ASSIGN value .)
    PLUS            reduce using rule 29 (assign -> ID ASSIGN value .)
    MINUS           reduce using rule 29 (assign -> ID ASSIGN value .)
    TIMES           reduce using rule 29 (assign -> ID ASSIGN value .)
    DIVIDE          reduce using rule 29 (assign -> ID ASSIGN value .)
    MOD             reduce using rule 29 (assign -> ID ASSIGN value .)
    LBRACE          reduce using rule 29 (assign -> ID ASSIGN value .)
    NUMBER          reduce using rule 29 (assign -> ID ASSIGN value .)
    STRING          reduce using rule 29 (assign -> ID ASSIGN value .)
    IF              reduce using rule 29 (assign -> ID ASSIGN value .)
    $end            reduce using rule 29 (assign -> ID ASSIGN value .)
    END             reduce using rule 29 (assign -> ID ASSIGN value .)
    WHEN            reduce using rule 29 (assign -> ID ASSIGN value .)
    ELSE            reduce using rule 29 (assign -> ID ASSIGN value .)
    ELSIF           reduce using rule 29 (assign -> ID ASSIGN value .)


state 107

    (32) assign -> ID ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    ID              reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    PRINT           reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    PUTS            reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    P               reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    LPAREN          reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    WHILE           reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    CASE            reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    DEF             reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    LBRACKET        reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    PLUS            reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    MINUS           reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    TIMES           reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    DIVIDE          reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    MOD             reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    LBRACE          reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    NUMBER          reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    STRING          reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    IF              reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    $end            reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    END             reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    WHEN            reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    ELSE            reduce using rule 32 (assign -> ID ASSIGN data_structure .)
    ELSIF           reduce using rule 32 (assign -> ID ASSIGN data_structure .)


state 108

    (93) dataIn -> ID ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    ID              reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    PRINT           reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    PUTS            reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    P               reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    LPAREN          reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    WHILE           reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    CASE            reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    DEF             reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    LBRACKET        reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    PLUS            reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    MINUS           reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    TIMES           reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    DIVIDE          reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    MOD             reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    LBRACE          reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    NUMBER          reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    STRING          reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    IF              reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    $end            reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    END             reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    WHEN            reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    ELSE            reduce using rule 93 (dataIn -> ID ASSIGN GETS .)
    ELSIF           reduce using rule 93 (dataIn -> ID ASSIGN GETS .)


state 109

    (79) p_SfunctionINV -> ID LPAREN params . RPAREN
    (85) function_call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 135


state 110

    (84) function_call -> ID LPAREN RPAREN .

    INSTANCE_VAR    reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    GLOBAL_VAR      reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    ID              reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    P               reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    CASE            reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    DEF             reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    STRING          reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    IF              reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    $end            reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    WHEN            reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 84 (function_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 84 (function_call -> ID LPAREN RPAREN .)


state 111

    (86) function_call -> ID LPAREN param . RPAREN

    RPAREN          shift and go to state 136


state 112

    (83) params -> value . COMMA value
    (82) param -> value .

    COMMA           shift and go to state 137
    RPAREN          reduce using rule 82 (param -> value .)


state 113

    (87) impression -> PRINT LPAREN value . RPAREN

    RPAREN          shift and go to state 138


state 114

    (97) tupla -> LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    ID              reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    PRINT           reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    PUTS            reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    P               reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    LPAREN          reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    WHILE           reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    CASE            reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    DEF             reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    LBRACKET        reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    PLUS            reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    MINUS           reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    TIMES           reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    DIVIDE          reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    MOD             reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    LBRACE          reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    NUMBER          reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    STRING          reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    IF              reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    $end            reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    END             reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    WHEN            reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    ELSE            reduce using rule 97 (tupla -> LPAREN values RPAREN .)
    ELSIF           reduce using rule 97 (tupla -> LPAREN values RPAREN .)


state 115

    (40) operator -> LPAREN aritmeticExpresion RPAREN .

    INSTANCE_VAR    reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    GLOBAL_VAR      reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    ID              reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    PRINT           reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    PUTS            reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    P               reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    LPAREN          reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    WHILE           reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    CASE            reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    DEF             reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    LBRACKET        reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    PLUS            reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    MINUS           reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    TIMES           reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    DIVIDE          reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    MOD             reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    LBRACE          reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    NUMBER          reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    STRING          reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    IF              reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    $end            reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    END             reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    WHEN            reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    ELSE            reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)
    ELSIF           reduce using rule 40 (operator -> LPAREN aritmeticExpresion RPAREN .)


state 116

    (26) values -> value COMMA . values
    (25) values -> . value
    (26) values -> . value COMMA values
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 80
    values                         shift and go to state 139

state 117

    (90) impression -> PUTS LPAREN value . RPAREN

    RPAREN          shift and go to state 140


state 118

    (91) impression -> P LPAREN value . RPAREN

    RPAREN          shift and go to state 141


state 119

    (52) conditions -> condition conector conditions .

    INSTANCE_VAR    reduce using rule 52 (conditions -> condition conector conditions .)
    GLOBAL_VAR      reduce using rule 52 (conditions -> condition conector conditions .)
    ID              reduce using rule 52 (conditions -> condition conector conditions .)
    PRINT           reduce using rule 52 (conditions -> condition conector conditions .)
    PUTS            reduce using rule 52 (conditions -> condition conector conditions .)
    P               reduce using rule 52 (conditions -> condition conector conditions .)
    LPAREN          reduce using rule 52 (conditions -> condition conector conditions .)
    WHILE           reduce using rule 52 (conditions -> condition conector conditions .)
    CASE            reduce using rule 52 (conditions -> condition conector conditions .)
    DEF             reduce using rule 52 (conditions -> condition conector conditions .)
    LBRACKET        reduce using rule 52 (conditions -> condition conector conditions .)
    PLUS            reduce using rule 52 (conditions -> condition conector conditions .)
    MINUS           reduce using rule 52 (conditions -> condition conector conditions .)
    TIMES           reduce using rule 52 (conditions -> condition conector conditions .)
    DIVIDE          reduce using rule 52 (conditions -> condition conector conditions .)
    MOD             reduce using rule 52 (conditions -> condition conector conditions .)
    LBRACE          reduce using rule 52 (conditions -> condition conector conditions .)
    NUMBER          reduce using rule 52 (conditions -> condition conector conditions .)
    STRING          reduce using rule 52 (conditions -> condition conector conditions .)
    IF              reduce using rule 52 (conditions -> condition conector conditions .)
    $end            reduce using rule 52 (conditions -> condition conector conditions .)
    RPAREN          reduce using rule 52 (conditions -> condition conector conditions .)
    END             reduce using rule 52 (conditions -> condition conector conditions .)
    WHEN            reduce using rule 52 (conditions -> condition conector conditions .)
    ELSE            reduce using rule 52 (conditions -> condition conector conditions .)
    ELSIF           reduce using rule 52 (conditions -> condition conector conditions .)


state 120

    (53) condition -> value . operComp value
    (54) condition -> value . operComp aritmeticExpresion
    (57) operComp -> . LESSTHAN
    (58) operComp -> . GREATERTHAN
    (59) operComp -> . GREATEROREQUAL
    (60) operComp -> . LESSOREQUAL
    (61) operComp -> . EQUAL
    (62) operComp -> . NOTEQUAL

    LESSTHAN        shift and go to state 49
    GREATERTHAN     shift and go to state 50
    GREATEROREQUAL  shift and go to state 51
    LESSOREQUAL     shift and go to state 52
    EQUAL           shift and go to state 53
    NOTEQUAL        shift and go to state 54

    operComp                       shift and go to state 48

state 121

    (96) while_loop -> WHILE LPAREN conditions . RPAREN codigo END

    RPAREN          shift and go to state 142


state 122

    (76) case -> CASE whens END .

    INSTANCE_VAR    reduce using rule 76 (case -> CASE whens END .)
    GLOBAL_VAR      reduce using rule 76 (case -> CASE whens END .)
    ID              reduce using rule 76 (case -> CASE whens END .)
    PRINT           reduce using rule 76 (case -> CASE whens END .)
    PUTS            reduce using rule 76 (case -> CASE whens END .)
    P               reduce using rule 76 (case -> CASE whens END .)
    LPAREN          reduce using rule 76 (case -> CASE whens END .)
    WHILE           reduce using rule 76 (case -> CASE whens END .)
    CASE            reduce using rule 76 (case -> CASE whens END .)
    DEF             reduce using rule 76 (case -> CASE whens END .)
    LBRACKET        reduce using rule 76 (case -> CASE whens END .)
    PLUS            reduce using rule 76 (case -> CASE whens END .)
    MINUS           reduce using rule 76 (case -> CASE whens END .)
    TIMES           reduce using rule 76 (case -> CASE whens END .)
    DIVIDE          reduce using rule 76 (case -> CASE whens END .)
    MOD             reduce using rule 76 (case -> CASE whens END .)
    LBRACE          reduce using rule 76 (case -> CASE whens END .)
    NUMBER          reduce using rule 76 (case -> CASE whens END .)
    STRING          reduce using rule 76 (case -> CASE whens END .)
    IF              reduce using rule 76 (case -> CASE whens END .)
    $end            reduce using rule 76 (case -> CASE whens END .)
    END             reduce using rule 76 (case -> CASE whens END .)
    WHEN            reduce using rule 76 (case -> CASE whens END .)
    ELSE            reduce using rule 76 (case -> CASE whens END .)
    ELSIF           reduce using rule 76 (case -> CASE whens END .)


state 123

    (75) whens -> whens when .

    END             reduce using rule 75 (whens -> whens when .)
    WHEN            reduce using rule 75 (whens -> whens when .)


state 124

    (73) when -> WHEN conditions . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    conditions                     shift and go to state 6
    codigo                         shift and go to state 143
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 125

    (77) Sfunction -> DEF ID LPAREN . RPAREN codigo END
    (80) p_function_one_parameter -> DEF ID LPAREN . param RPAREN codigo END
    (81) p_function_two_parameter -> DEF ID LPAREN . params RPAREN codigo END
    (82) param -> . value
    (83) params -> . value COMMA value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    RPAREN          shift and go to state 144
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    param                          shift and go to state 145
    params                         shift and go to state 146
    value                          shift and go to state 147

state 126

    (45) array -> LBRACKET values RBRACKET .

    INSTANCE_VAR    reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    GLOBAL_VAR      reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    ID              reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    PRINT           reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    PUTS            reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    P               reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    LPAREN          reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    WHILE           reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    CASE            reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    DEF             reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    LBRACKET        reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    PLUS            reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    MINUS           reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    TIMES           reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    DIVIDE          reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    MOD             reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    LBRACE          reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    NUMBER          reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    STRING          reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    IF              reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    $end            reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    END             reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    WHEN            reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    ELSE            reduce using rule 45 (array -> LBRACKET values RBRACKET .)
    ELSIF           reduce using rule 45 (array -> LBRACKET values RBRACKET .)


state 127

    (65) control_structures -> if_block elsif_blocks else_block .

    INSTANCE_VAR    reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    GLOBAL_VAR      reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    ID              reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    PRINT           reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    PUTS            reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    P               reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    LPAREN          reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    WHILE           reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    CASE            reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    DEF             reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    LBRACKET        reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    PLUS            reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    MINUS           reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    TIMES           reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    DIVIDE          reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    MOD             reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    LBRACE          reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    NUMBER          reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    STRING          reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    IF              reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    $end            reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    END             reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    WHEN            reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    ELSE            reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)
    ELSIF           reduce using rule 65 (control_structures -> if_block elsif_blocks else_block .)


state 128

    (70) elsif_blocks -> elsif_blocks elsif_block .

    END             reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    INSTANCE_VAR    reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    GLOBAL_VAR      reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    ID              reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    PRINT           reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    PUTS            reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    P               reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    LPAREN          reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    WHILE           reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    CASE            reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    DEF             reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    LBRACKET        reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    PLUS            reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    MINUS           reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    TIMES           reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    DIVIDE          reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    MOD             reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    LBRACE          reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    NUMBER          reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    STRING          reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    IF              reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSE            reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSIF           reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    $end            reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)
    WHEN            reduce using rule 70 (elsif_blocks -> elsif_blocks elsif_block .)


state 129

    (72) else_block -> ELSE codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 148
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 130

    (71) elsif_block -> ELSIF LPAREN . conditions RPAREN codigo
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 149
    condition                      shift and go to state 28
    value                          shift and go to state 120

state 131

    (47) hash -> LBRACE hash_contents RBRACE .

    INSTANCE_VAR    reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    GLOBAL_VAR      reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    ID              reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    PRINT           reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    PUTS            reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    P               reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    LPAREN          reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    WHILE           reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    CASE            reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    DEF             reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    LBRACKET        reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    PLUS            reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    MINUS           reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    TIMES           reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    DIVIDE          reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    MOD             reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    LBRACE          reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    NUMBER          reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    STRING          reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    IF              reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    $end            reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    END             reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    WHEN            reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    ELSE            reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)
    ELSIF           reduce using rule 47 (hash -> LBRACE hash_contents RBRACE .)


state 132

    (49) hash_contents -> hash_contents COMMA . hash_pair
    (50) hash_pair -> . value COLON value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    hash_pair                      shift and go to state 150
    value                          shift and go to state 89

state 133

    (50) hash_pair -> value COLON . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 151

state 134

    (67) if_block -> IF LPAREN conditions . RPAREN codigo
    (68) if_block -> IF LPAREN conditions . RPAREN codigo END

    RPAREN          shift and go to state 152


state 135

    (79) p_SfunctionINV -> ID LPAREN params RPAREN .
    (85) function_call -> ID LPAREN params RPAREN .

  ! reduce/reduce conflict for INSTANCE_VAR resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for GLOBAL_VAR resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for ID resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for PRINT resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for PUTS resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for P resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for LPAREN resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for WHILE resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for CASE resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for DEF resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for PLUS resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for MINUS resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for TIMES resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for MOD resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for LBRACE resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for NUMBER resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for STRING resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for IF resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for $end resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for END resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for WHEN resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for ELSE resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
  ! reduce/reduce conflict for ELSIF resolved using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    INSTANCE_VAR    reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    GLOBAL_VAR      reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    ID              reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    PRINT           reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    PUTS            reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    P               reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    LPAREN          reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    WHILE           reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    CASE            reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    DEF             reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    LBRACKET        reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    PLUS            reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    MINUS           reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    TIMES           reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    DIVIDE          reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    MOD             reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    LBRACE          reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    NUMBER          reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    STRING          reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    IF              reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    $end            reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    END             reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    WHEN            reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    ELSE            reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    ELSIF           reduce using rule 79 (p_SfunctionINV -> ID LPAREN params RPAREN .)

  ! INSTANCE_VAR    [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! GLOBAL_VAR      [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! ID              [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! PRINT           [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! PUTS            [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! P               [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! LPAREN          [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! WHILE           [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! CASE            [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! DEF             [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! LBRACKET        [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! PLUS            [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! MINUS           [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! TIMES           [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! DIVIDE          [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! MOD             [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! LBRACE          [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! NUMBER          [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! STRING          [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! IF              [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! $end            [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! END             [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! WHEN            [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! ELSE            [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]
  ! ELSIF           [ reduce using rule 85 (function_call -> ID LPAREN params RPAREN .) ]


state 136

    (86) function_call -> ID LPAREN param RPAREN .

    INSTANCE_VAR    reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    GLOBAL_VAR      reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    ID              reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    PRINT           reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    PUTS            reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    P               reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    LPAREN          reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    WHILE           reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    CASE            reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    DEF             reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    LBRACKET        reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    PLUS            reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    MINUS           reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    TIMES           reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    DIVIDE          reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    MOD             reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    LBRACE          reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    NUMBER          reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    STRING          reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    IF              reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    $end            reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    END             reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    WHEN            reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    ELSE            reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)
    ELSIF           reduce using rule 86 (function_call -> ID LPAREN param RPAREN .)


state 137

    (83) params -> value COMMA . value
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID

    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 153

state 138

    (87) impression -> PRINT LPAREN value RPAREN .

    INSTANCE_VAR    reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    GLOBAL_VAR      reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    ID              reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    PRINT           reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    PUTS            reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    P               reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    LPAREN          reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    WHILE           reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    CASE            reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    DEF             reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    LBRACKET        reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    PLUS            reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    MINUS           reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    TIMES           reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    DIVIDE          reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    MOD             reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    LBRACE          reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    NUMBER          reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    STRING          reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    IF              reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    $end            reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    END             reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    WHEN            reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    ELSE            reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)
    ELSIF           reduce using rule 87 (impression -> PRINT LPAREN value RPAREN .)


state 139

    (26) values -> value COMMA values .

    RPAREN          reduce using rule 26 (values -> value COMMA values .)
    RBRACKET        reduce using rule 26 (values -> value COMMA values .)


state 140

    (90) impression -> PUTS LPAREN value RPAREN .

    INSTANCE_VAR    reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    GLOBAL_VAR      reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    ID              reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    PRINT           reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    PUTS            reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    P               reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    LPAREN          reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    WHILE           reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    CASE            reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    DEF             reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    LBRACKET        reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    PLUS            reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    MINUS           reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    TIMES           reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    DIVIDE          reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    MOD             reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    LBRACE          reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    NUMBER          reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    STRING          reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    IF              reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    $end            reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    END             reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    WHEN            reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    ELSE            reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)
    ELSIF           reduce using rule 90 (impression -> PUTS LPAREN value RPAREN .)


state 141

    (91) impression -> P LPAREN value RPAREN .

    INSTANCE_VAR    reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    GLOBAL_VAR      reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    ID              reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    PRINT           reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    PUTS            reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    P               reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    LPAREN          reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    WHILE           reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    CASE            reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    DEF             reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    LBRACKET        reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    PLUS            reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    MINUS           reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    TIMES           reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    DIVIDE          reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    MOD             reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    LBRACE          reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    NUMBER          reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    STRING          reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    IF              reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    $end            reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    END             reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    WHEN            reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    ELSE            reduce using rule 91 (impression -> P LPAREN value RPAREN .)
    ELSIF           reduce using rule 91 (impression -> P LPAREN value RPAREN .)


state 142

    (96) while_loop -> WHILE LPAREN conditions RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    conditions                     shift and go to state 6
    codigo                         shift and go to state 154
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 143

    (73) when -> WHEN conditions codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             reduce using rule 73 (when -> WHEN conditions codigo .)
    WHEN            reduce using rule 73 (when -> WHEN conditions codigo .)
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    conditions                     shift and go to state 6
    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 144

    (77) Sfunction -> DEF ID LPAREN RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    codigo                         shift and go to state 155
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 145

    (80) p_function_one_parameter -> DEF ID LPAREN param . RPAREN codigo END

    RPAREN          shift and go to state 156


state 146

    (81) p_function_two_parameter -> DEF ID LPAREN params . RPAREN codigo END

    RPAREN          shift and go to state 157


state 147

    (82) param -> value .
    (83) params -> value . COMMA value

    RPAREN          reduce using rule 82 (param -> value .)
    COMMA           shift and go to state 137


state 148

    (72) else_block -> ELSE codigo END .

    INSTANCE_VAR    reduce using rule 72 (else_block -> ELSE codigo END .)
    GLOBAL_VAR      reduce using rule 72 (else_block -> ELSE codigo END .)
    ID              reduce using rule 72 (else_block -> ELSE codigo END .)
    PRINT           reduce using rule 72 (else_block -> ELSE codigo END .)
    PUTS            reduce using rule 72 (else_block -> ELSE codigo END .)
    P               reduce using rule 72 (else_block -> ELSE codigo END .)
    LPAREN          reduce using rule 72 (else_block -> ELSE codigo END .)
    WHILE           reduce using rule 72 (else_block -> ELSE codigo END .)
    CASE            reduce using rule 72 (else_block -> ELSE codigo END .)
    DEF             reduce using rule 72 (else_block -> ELSE codigo END .)
    LBRACKET        reduce using rule 72 (else_block -> ELSE codigo END .)
    PLUS            reduce using rule 72 (else_block -> ELSE codigo END .)
    MINUS           reduce using rule 72 (else_block -> ELSE codigo END .)
    TIMES           reduce using rule 72 (else_block -> ELSE codigo END .)
    DIVIDE          reduce using rule 72 (else_block -> ELSE codigo END .)
    MOD             reduce using rule 72 (else_block -> ELSE codigo END .)
    LBRACE          reduce using rule 72 (else_block -> ELSE codigo END .)
    NUMBER          reduce using rule 72 (else_block -> ELSE codigo END .)
    STRING          reduce using rule 72 (else_block -> ELSE codigo END .)
    IF              reduce using rule 72 (else_block -> ELSE codigo END .)
    $end            reduce using rule 72 (else_block -> ELSE codigo END .)
    END             reduce using rule 72 (else_block -> ELSE codigo END .)
    WHEN            reduce using rule 72 (else_block -> ELSE codigo END .)
    ELSE            reduce using rule 72 (else_block -> ELSE codigo END .)
    ELSIF           reduce using rule 72 (else_block -> ELSE codigo END .)


state 149

    (71) elsif_block -> ELSIF LPAREN conditions . RPAREN codigo

    RPAREN          shift and go to state 158


state 150

    (49) hash_contents -> hash_contents COMMA hash_pair .

    RBRACE          reduce using rule 49 (hash_contents -> hash_contents COMMA hash_pair .)
    COMMA           reduce using rule 49 (hash_contents -> hash_contents COMMA hash_pair .)


state 151

    (50) hash_pair -> value COLON value .

    RBRACE          reduce using rule 50 (hash_pair -> value COLON value .)
    COMMA           reduce using rule 50 (hash_pair -> value COLON value .)


state 152

    (67) if_block -> IF LPAREN conditions RPAREN . codigo
    (68) if_block -> IF LPAREN conditions RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    conditions                     shift and go to state 6
    codigo                         shift and go to state 159
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 153

    (83) params -> value COMMA value .

    RPAREN          reduce using rule 83 (params -> value COMMA value .)


state 154

    (96) while_loop -> WHILE LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 160
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    conditions                     shift and go to state 6
    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 155

    (77) Sfunction -> DEF ID LPAREN RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 161
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 156

    (80) p_function_one_parameter -> DEF ID LPAREN param RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    codigo                         shift and go to state 162
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 157

    (81) p_function_two_parameter -> DEF ID LPAREN params RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    codigo                         shift and go to state 163
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 158

    (71) elsif_block -> ELSIF LPAREN conditions RPAREN . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    conditions                     shift and go to state 6
    codigo                         shift and go to state 164
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 159

    (67) if_block -> IF LPAREN conditions RPAREN codigo .
    (68) if_block -> IF LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .)
    $end            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .)
    WHEN            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .)
    END             shift and go to state 165
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

  ! INSTANCE_VAR    [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PLUS            [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! MINUS           [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! TIMES           [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! DIVIDE          [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! MOD             [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! END             [ reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo .) ]

    conditions                     shift and go to state 6
    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 160

    (96) while_loop -> WHILE LPAREN conditions RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ID              reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PRINT           reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PUTS            reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    P               reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LPAREN          reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    WHILE           reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    CASE            reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    DEF             reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LBRACKET        reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PLUS            reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    MINUS           reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    TIMES           reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    DIVIDE          reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    MOD             reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LBRACE          reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    NUMBER          reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    STRING          reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    IF              reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    $end            reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    END             reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    WHEN            reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ELSE            reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ELSIF           reduce using rule 96 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)


state 161

    (77) Sfunction -> DEF ID LPAREN RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    ID              reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    PRINT           reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    PUTS            reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    P               reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    LPAREN          reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    WHILE           reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    CASE            reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    DEF             reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    LBRACKET        reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    PLUS            reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    MINUS           reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    TIMES           reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    DIVIDE          reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    MOD             reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    LBRACE          reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    NUMBER          reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    STRING          reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    IF              reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    $end            reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    END             reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    WHEN            reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    ELSE            reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    ELSIF           reduce using rule 77 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)


state 162

    (80) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 166
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 163

    (81) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 167
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 164

    (71) elsif_block -> ELSIF LPAREN conditions RPAREN codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . function_call
    (15) statement -> . aritmeticExpresion
    (16) statement -> . operator
    (17) statement -> . dataIn
    (18) statement -> . control_structures
    (19) statement -> . hash
    (27) assign -> . INSTANCE_VAR ASSIGN value
    (28) assign -> . GLOBAL_VAR ASSIGN value
    (29) assign -> . ID ASSIGN value
    (30) assign -> . INSTANCE_VAR ASSIGN data_structure
    (31) assign -> . GLOBAL_VAR ASSIGN data_structure
    (32) assign -> . ID ASSIGN data_structure
    (87) impression -> . PRINT LPAREN value RPAREN
    (88) impression -> . PRINT value
    (89) impression -> . PUTS value
    (90) impression -> . PUTS LPAREN value RPAREN
    (91) impression -> . P LPAREN value RPAREN
    (92) impression -> . P value
    (97) tupla -> . LPAREN values RPAREN
    (51) conditions -> . condition
    (52) conditions -> . condition conector conditions
    (96) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (76) case -> . CASE whens END
    (77) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (44) array -> . LBRACKET RBRACKET
    (45) array -> . LBRACKET values RBRACKET
    (78) p_SfunctionINV -> . ID
    (79) p_SfunctionINV -> . ID LPAREN params RPAREN
    (80) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (81) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (84) function_call -> . ID LPAREN RPAREN
    (85) function_call -> . ID LPAREN params RPAREN
    (86) function_call -> . ID LPAREN param RPAREN
    (33) aritmeticExpresion -> . value operator value
    (34) aritmeticExpresion -> . aritmeticExpresion operator value
    (35) operator -> . PLUS
    (36) operator -> . MINUS
    (37) operator -> . TIMES
    (38) operator -> . DIVIDE
    (39) operator -> . MOD
    (40) operator -> . LPAREN aritmeticExpresion RPAREN
    (93) dataIn -> . ID ASSIGN GETS
    (94) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (95) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (63) control_structures -> . if_block
    (64) control_structures -> . if_block elsif_blocks
    (65) control_structures -> . if_block elsif_blocks else_block
    (66) control_structures -> . if_block else_block
    (46) hash -> . LBRACE RBRACE
    (47) hash -> . LBRACE hash_contents RBRACE
    (53) condition -> . value operComp value
    (54) condition -> . value operComp aritmeticExpresion
    (20) value -> . NUMBER
    (21) value -> . STRING
    (22) value -> . INSTANCE_VAR
    (23) value -> . GLOBAL_VAR
    (24) value -> . ID
    (67) if_block -> . IF LPAREN conditions RPAREN codigo
    (68) if_block -> . IF LPAREN conditions RPAREN codigo END

  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    ELSE            reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    $end            reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    WHEN            reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    INSTANCE_VAR    shift and go to state 20
    GLOBAL_VAR      shift and go to state 22
    ID              shift and go to state 23
    PRINT           shift and go to state 24
    PUTS            shift and go to state 26
    P               shift and go to state 27
    LPAREN          shift and go to state 25
    WHILE           shift and go to state 29
    CASE            shift and go to state 30
    DEF             shift and go to state 31
    LBRACKET        shift and go to state 32
    PLUS            shift and go to state 33
    MINUS           shift and go to state 34
    TIMES           shift and go to state 35
    DIVIDE          shift and go to state 36
    MOD             shift and go to state 37
    LBRACE          shift and go to state 39
    NUMBER          shift and go to state 40
    STRING          shift and go to state 41
    IF              shift and go to state 42

  ! INSTANCE_VAR    [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PLUS            [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! MINUS           [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! TIMES           [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! DIVIDE          [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! MOD             [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 71 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]

    conditions                     shift and go to state 6
    statement                      shift and go to state 43
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    function_call                  shift and go to state 14
    aritmeticExpresion             shift and go to state 15
    operator                       shift and go to state 16
    dataIn                         shift and go to state 17
    control_structures             shift and go to state 18
    hash                           shift and go to state 19
    value                          shift and go to state 21
    condition                      shift and go to state 28
    if_block                       shift and go to state 38

state 165

    (68) if_block -> IF LPAREN conditions RPAREN codigo END .

    ELSE            reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    ELSIF           reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    INSTANCE_VAR    reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    ID              reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PRINT           reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PUTS            reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    P               reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LPAREN          reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    WHILE           reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    CASE            reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    DEF             reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LBRACKET        reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PLUS            reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    MINUS           reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    TIMES           reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    DIVIDE          reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    MOD             reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LBRACE          reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    NUMBER          reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    STRING          reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    IF              reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    $end            reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    END             reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    WHEN            reduce using rule 68 (if_block -> IF LPAREN conditions RPAREN codigo END .)


state 166

    (80) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ID              reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PRINT           reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PUTS            reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    P               reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LPAREN          reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    WHILE           reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    CASE            reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    DEF             reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LBRACKET        reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PLUS            reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    MINUS           reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    TIMES           reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    DIVIDE          reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    MOD             reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LBRACE          reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    NUMBER          reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    STRING          reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    IF              reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    $end            reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    END             reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    WHEN            reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ELSE            reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ELSIF           reduce using rule 80 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)


state 167

    (81) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ID              reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PRINT           reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PUTS            reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    P               reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LPAREN          reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    WHILE           reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    CASE            reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    DEF             reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LBRACKET        reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PLUS            reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    MINUS           reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    TIMES           reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    DIVIDE          reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    MOD             reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LBRACE          reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    NUMBER          reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    STRING          reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    IF              reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    $end            reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    END             reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    WHEN            reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ELSE            reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ELSIF           reduce using rule 81 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 15 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 15 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 15 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 15 resolved as shift
WARNING: shift/reduce conflict for MOD in state 15 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 15 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 38 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 81 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 81 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD in state 101 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 102 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 102 resolved as shift
WARNING: shift/reduce conflict for MOD in state 102 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for END in state 159 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 159 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 159 resolved as shift
WARNING: shift/reduce conflict for ID in state 159 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 159 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 159 resolved as shift
WARNING: shift/reduce conflict for P in state 159 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 159 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 159 resolved as shift
WARNING: shift/reduce conflict for CASE in state 159 resolved as shift
WARNING: shift/reduce conflict for DEF in state 159 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 159 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 159 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 159 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 159 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 159 resolved as shift
WARNING: shift/reduce conflict for MOD in state 159 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 159 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 159 resolved as shift
WARNING: shift/reduce conflict for STRING in state 159 resolved as shift
WARNING: shift/reduce conflict for IF in state 159 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 164 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 164 resolved as shift
WARNING: shift/reduce conflict for ID in state 164 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 164 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 164 resolved as shift
WARNING: shift/reduce conflict for P in state 164 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 164 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 164 resolved as shift
WARNING: shift/reduce conflict for CASE in state 164 resolved as shift
WARNING: shift/reduce conflict for DEF in state 164 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 164 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 164 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 164 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 164 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 164 resolved as shift
WARNING: shift/reduce conflict for MOD in state 164 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 164 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 164 resolved as shift
WARNING: shift/reduce conflict for STRING in state 164 resolved as shift
WARNING: shift/reduce conflict for IF in state 164 resolved as shift
WARNING: reduce/reduce conflict in state 23 resolved using rule (value -> ID)
WARNING: rejected rule (p_SfunctionINV -> ID) in state 23
WARNING: reduce/reduce conflict in state 135 resolved using rule (p_SfunctionINV -> ID LPAREN params RPAREN)
WARNING: rejected rule (function_call -> ID LPAREN params RPAREN) in state 135
WARNING: Rule (function_call -> ID LPAREN params RPAREN) is never reduced
