Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    BREAK
    CLASS
    CONST
    DAPOSTROPHE
    DOT
    DOTS
    FALSE
    FOR
    IN
    NIL
    NONE
    NOT
    SEMICOLON
    TRUE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> statement
Rule 2     codigo -> codigo statement
Rule 3     statement -> assign
Rule 4     statement -> aritmeticExpresion
Rule 5     statement -> control_structures
Rule 6     statement -> data_structure
Rule 7     statement -> while_loop
Rule 8     statement -> case
Rule 9     statement -> p_function_zero_parameter
Rule 10    statement -> p_function_one_parameter
Rule 11    statement -> p_function_two_parameter
Rule 12    statement -> function_call
Rule 13    statement -> impression
Rule 14    statement -> data_input
Rule 15    value -> NUMBER
Rule 16    value -> STRING
Rule 17    value -> INSTANCE_VAR
Rule 18    value -> GLOBAL_VAR
Rule 19    value -> ID
Rule 20    values -> value
Rule 21    values -> value COMMA values
Rule 22    assign -> INSTANCE_VAR ASSIGN value
Rule 23    assign -> GLOBAL_VAR ASSIGN value
Rule 24    assign -> ID ASSIGN value
Rule 25    assign -> INSTANCE_VAR ASSIGN aritmeticExpresion
Rule 26    assign -> GLOBAL_VAR ASSIGN aritmeticExpresion
Rule 27    assign -> ID ASSIGN aritmeticExpresion
Rule 28    assign -> INSTANCE_VAR ASSIGN conditions
Rule 29    assign -> GLOBAL_VAR ASSIGN conditions
Rule 30    assign -> ID ASSIGN conditions
Rule 31    assign -> INSTANCE_VAR ASSIGN data_structure
Rule 32    assign -> GLOBAL_VAR ASSIGN data_structure
Rule 33    assign -> ID ASSIGN data_structure
Rule 34    aritmeticExpresion -> value operator value
Rule 35    aritmeticExpresion -> value operator function_call
Rule 36    aritmeticExpresion -> aritmeticExpresion operator value
Rule 37    aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN
Rule 38    aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value
Rule 39    operator -> PLUS
Rule 40    operator -> MINUS
Rule 41    operator -> TIMES
Rule 42    operator -> DIVIDE
Rule 43    operator -> MOD
Rule 44    conditions -> condition
Rule 45    conditions -> condition conector conditions
Rule 46    conditions -> condition conector LPAREN conditions RPAREN
Rule 47    condition -> value operComp value
Rule 48    condition -> value operComp aritmeticExpresion
Rule 49    conector -> AND
Rule 50    conector -> OR
Rule 51    operComp -> LESSTHAN
Rule 52    operComp -> GREATERTHAN
Rule 53    operComp -> GREATEROREQUAL
Rule 54    operComp -> LESSOREQUAL
Rule 55    operComp -> EQUAL
Rule 56    operComp -> NOTEQUAL
Rule 57    control_structures -> if_block
Rule 58    control_structures -> if_block elsif_blocks
Rule 59    control_structures -> if_block elsif_blocks else_block
Rule 60    control_structures -> if_block else_block
Rule 61    if_block -> IF conditions codigo
Rule 62    if_block -> IF conditions codigo END
Rule 63    if_block -> IF LPAREN conditions RPAREN codigo
Rule 64    if_block -> IF LPAREN conditions RPAREN codigo END
Rule 65    elsif_blocks -> elsif_block
Rule 66    elsif_blocks -> elsif_blocks elsif_block
Rule 67    elsif_block -> ELSIF conditions RPAREN codigo
Rule 68    elsif_block -> ELSIF LPAREN conditions RPAREN codigo
Rule 69    else_block -> ELSE codigo END
Rule 70    while_loop -> WHILE conditions codigo END
Rule 71    while_loop -> WHILE LPAREN conditions RPAREN codigo END
Rule 72    while_loop -> WHILE conditions DO codigo END
Rule 73    while_loop -> WHILE LPAREN conditions RPAREN DO codigo END
Rule 74    case -> CASE value whens END
Rule 75    whens -> whens when
Rule 76    whens -> when
Rule 77    when -> WHEN value codigo
Rule 78    when -> ELSE codigo
Rule 79    data_structure -> array
Rule 80    data_structure -> hash
Rule 81    data_structure -> set
Rule 82    array -> LBRACKET RBRACKET
Rule 83    array -> LBRACKET values RBRACKET
Rule 84    hash -> LBRACE RBRACE
Rule 85    hash -> LBRACE hash_contents RBRACE
Rule 86    hash_contents -> hash_pair
Rule 87    hash_contents -> hash_contents COMMA hash_pair
Rule 88    hash_pair -> value COLON value
Rule 89    set -> SET LPAREN LBRACKET RBRACKET RPAREN
Rule 90    set -> SET LPAREN LBRACKET values RBRACKET RPAREN
Rule 91    p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END
Rule 92    p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END
Rule 93    p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END
Rule 94    p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END
Rule 95    p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END
Rule 96    p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
Rule 97    p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END
Rule 98    p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END
Rule 99    p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END
Rule 100   p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END
Rule 101   p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END
Rule 102   p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
Rule 103   p_function_control_structures -> p_function_if_conditions
Rule 104   p_function_control_structures -> p_function_if_conditions p_function_else_conditions
Rule 105   p_function_if_conditions -> IF conditions RETURN p_expression
Rule 106   p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression
Rule 107   p_function_if_conditions -> IF conditions codigo RETURN p_expression
Rule 108   p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression
Rule 109   p_function_if_conditions -> IF conditions RETURN p_expression END
Rule 110   p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END
Rule 111   p_function_if_conditions -> IF conditions codigo RETURN p_expression END
Rule 112   p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END
Rule 113   p_function_else_conditions -> ELSE RETURN p_expression END
Rule 114   p_function_else_conditions -> ELSE codigo RETURN p_expression END
Rule 115   p_expression -> value
Rule 116   p_expression -> aritmeticExpresion
Rule 117   function_call -> ID LPAREN RPAREN
Rule 118   function_call -> ID LPAREN params RPAREN
Rule 119   function_call -> ID LPAREN param RPAREN
Rule 120   param -> value
Rule 121   param -> aritmeticExpresion
Rule 122   params -> value COMMA value
Rule 123   params -> aritmeticExpresion COMMA aritmeticExpresion
Rule 124   impression -> PRINT LPAREN value RPAREN
Rule 125   impression -> PRINT value
Rule 126   impression -> PUTS LPAREN value RPAREN
Rule 127   impression -> PUTS value
Rule 128   impression -> P LPAREN value RPAREN
Rule 129   impression -> P value
Rule 130   data_input -> ID ASSIGN GETS STRING
Rule 131   data_input -> INSTANCE_VAR ASSIGN GETS STRING
Rule 132   data_input -> GLOBAL_VAR ASSIGN GETS STRING
Rule 133   data_input -> ID ASSIGN GETS NUMBER
Rule 134   data_input -> INSTANCE_VAR ASSIGN GETS NUMBER
Rule 135   data_input -> GLOBAL_VAR ASSIGN GETS NUMBER

Terminals, with rules where they appear

AND                  : 49
APOSTROPHE           : 
ASSIGN               : 22 23 24 25 26 27 28 29 30 31 32 33 130 131 132 133 134 135
BREAK                : 
CASE                 : 74
CLASS                : 
COLON                : 88
COMMA                : 21 87 122 123
CONST                : 
DAPOSTROPHE          : 
DEF                  : 91 92 93 94 95 96 97 98 99 100 101 102
DIVIDE               : 42
DO                   : 72 73
DOT                  : 
DOTS                 : 
ELSE                 : 69 78 113 114
ELSIF                : 67 68
END                  : 62 64 69 70 71 72 73 74 91 92 93 94 95 96 97 98 99 100 101 102 109 110 111 112 113 114
EQUAL                : 55
FALSE                : 
FOR                  : 
GETS                 : 130 131 132 133 134 135
GLOBAL_VAR           : 18 23 26 29 32 132 135
GREATEROREQUAL       : 53
GREATERTHAN          : 52
ID                   : 19 24 27 30 33 91 92 93 94 95 96 97 98 99 100 101 102 117 118 119 130 133
IF                   : 61 62 63 64 105 106 107 108 109 110 111 112
IN                   : 
INSTANCE_VAR         : 17 22 25 28 31 131 134
LBRACE               : 84 85
LBRACKET             : 82 83 89 90
LESSOREQUAL          : 54
LESSTHAN             : 51
LPAREN               : 37 38 46 63 64 68 71 73 89 90 91 92 93 94 95 96 97 98 99 100 101 102 106 108 110 112 117 118 119 124 126 128
MINUS                : 40
MOD                  : 43
NIL                  : 
NONE                 : 
NOT                  : 
NOTEQUAL             : 56
NUMBER               : 15 133 134 135
OR                   : 50
P                    : 128 129
PLUS                 : 39
PRINT                : 124 125
PUTS                 : 126 127
RBRACE               : 84 85
RBRACKET             : 82 83 89 90
RETURN               : 93 96 99 102 105 106 107 108 109 110 111 112 113 114
RPAREN               : 37 38 46 63 64 67 68 71 73 89 90 91 92 93 94 95 96 97 98 99 100 101 102 106 108 110 112 117 118 119 124 126 128
SEMICOLON            : 
SET                  : 89 90
STRING               : 16 130 131 132
TIMES                : 41
TRUE                 : 
WHEN                 : 77
WHILE                : 70 71 72 73
error                : 

Nonterminals, with rules where they appear

aritmeticExpresion   : 4 25 26 27 36 37 38 48 116 121 123 123
array                : 79
assign               : 3
case                 : 8
codigo               : 2 61 62 63 64 67 68 69 70 71 72 73 77 78 91 92 93 94 95 98 99 101 107 108 111 112 114 0
condition            : 44 45 46
conditions           : 28 29 30 45 46 61 62 63 64 67 68 70 71 72 73 105 106 107 108 109 110 111 112
conector             : 45 46
control_structures   : 5
data_input           : 14
data_structure       : 6 31 32 33
else_block           : 59 60
elsif_block          : 65 66
elsif_blocks         : 58 59 66
function_call        : 12 35
hash                 : 80
hash_contents        : 85 87
hash_pair            : 86 87
if_block             : 57 58 59 60
impression           : 13
operComp             : 47 48
operator             : 34 35 36 38
p_expression         : 93 96 99 102 105 106 107 108 109 110 111 112 113 114
p_function_control_structures : 94 95 96 97 100 101 102
p_function_else_conditions : 104
p_function_if_conditions : 103 104
p_function_one_parameter : 10
p_function_two_parameter : 11
p_function_zero_parameter : 9
param                : 92 93 94 95 96 97 119
params               : 98 99 100 101 102 118
set                  : 81
statement            : 1 2
value                : 20 21 22 23 24 34 34 35 36 38 47 47 48 74 77 88 88 115 120 122 122 124 125 126 127 128 129
values               : 21 83 90
when                 : 75 76
whens                : 74 75
while_loop           : 7

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 1
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 1

    (0) S' -> codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 2

    (1) codigo -> statement .

    INSTANCE_VAR    reduce using rule 1 (codigo -> statement .)
    GLOBAL_VAR      reduce using rule 1 (codigo -> statement .)
    ID              reduce using rule 1 (codigo -> statement .)
    LPAREN          reduce using rule 1 (codigo -> statement .)
    WHILE           reduce using rule 1 (codigo -> statement .)
    CASE            reduce using rule 1 (codigo -> statement .)
    DEF             reduce using rule 1 (codigo -> statement .)
    PRINT           reduce using rule 1 (codigo -> statement .)
    PUTS            reduce using rule 1 (codigo -> statement .)
    P               reduce using rule 1 (codigo -> statement .)
    NUMBER          reduce using rule 1 (codigo -> statement .)
    STRING          reduce using rule 1 (codigo -> statement .)
    IF              reduce using rule 1 (codigo -> statement .)
    LBRACKET        reduce using rule 1 (codigo -> statement .)
    LBRACE          reduce using rule 1 (codigo -> statement .)
    SET             reduce using rule 1 (codigo -> statement .)
    $end            reduce using rule 1 (codigo -> statement .)
    END             reduce using rule 1 (codigo -> statement .)
    ELSE            reduce using rule 1 (codigo -> statement .)
    ELSIF           reduce using rule 1 (codigo -> statement .)
    WHEN            reduce using rule 1 (codigo -> statement .)
    RETURN          reduce using rule 1 (codigo -> statement .)


state 3

    (3) statement -> assign .

    INSTANCE_VAR    reduce using rule 3 (statement -> assign .)
    GLOBAL_VAR      reduce using rule 3 (statement -> assign .)
    ID              reduce using rule 3 (statement -> assign .)
    LPAREN          reduce using rule 3 (statement -> assign .)
    WHILE           reduce using rule 3 (statement -> assign .)
    CASE            reduce using rule 3 (statement -> assign .)
    DEF             reduce using rule 3 (statement -> assign .)
    PRINT           reduce using rule 3 (statement -> assign .)
    PUTS            reduce using rule 3 (statement -> assign .)
    P               reduce using rule 3 (statement -> assign .)
    NUMBER          reduce using rule 3 (statement -> assign .)
    STRING          reduce using rule 3 (statement -> assign .)
    IF              reduce using rule 3 (statement -> assign .)
    LBRACKET        reduce using rule 3 (statement -> assign .)
    LBRACE          reduce using rule 3 (statement -> assign .)
    SET             reduce using rule 3 (statement -> assign .)
    $end            reduce using rule 3 (statement -> assign .)
    END             reduce using rule 3 (statement -> assign .)
    ELSE            reduce using rule 3 (statement -> assign .)
    ELSIF           reduce using rule 3 (statement -> assign .)
    WHEN            reduce using rule 3 (statement -> assign .)
    RETURN          reduce using rule 3 (statement -> assign .)


state 4

    (4) statement -> aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    INSTANCE_VAR    reduce using rule 4 (statement -> aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 4 (statement -> aritmeticExpresion .)
    ID              reduce using rule 4 (statement -> aritmeticExpresion .)
    LPAREN          reduce using rule 4 (statement -> aritmeticExpresion .)
    WHILE           reduce using rule 4 (statement -> aritmeticExpresion .)
    CASE            reduce using rule 4 (statement -> aritmeticExpresion .)
    DEF             reduce using rule 4 (statement -> aritmeticExpresion .)
    PRINT           reduce using rule 4 (statement -> aritmeticExpresion .)
    PUTS            reduce using rule 4 (statement -> aritmeticExpresion .)
    P               reduce using rule 4 (statement -> aritmeticExpresion .)
    NUMBER          reduce using rule 4 (statement -> aritmeticExpresion .)
    STRING          reduce using rule 4 (statement -> aritmeticExpresion .)
    IF              reduce using rule 4 (statement -> aritmeticExpresion .)
    LBRACKET        reduce using rule 4 (statement -> aritmeticExpresion .)
    LBRACE          reduce using rule 4 (statement -> aritmeticExpresion .)
    SET             reduce using rule 4 (statement -> aritmeticExpresion .)
    $end            reduce using rule 4 (statement -> aritmeticExpresion .)
    END             reduce using rule 4 (statement -> aritmeticExpresion .)
    ELSE            reduce using rule 4 (statement -> aritmeticExpresion .)
    ELSIF           reduce using rule 4 (statement -> aritmeticExpresion .)
    WHEN            reduce using rule 4 (statement -> aritmeticExpresion .)
    RETURN          reduce using rule 4 (statement -> aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 5

    (5) statement -> control_structures .

    INSTANCE_VAR    reduce using rule 5 (statement -> control_structures .)
    GLOBAL_VAR      reduce using rule 5 (statement -> control_structures .)
    ID              reduce using rule 5 (statement -> control_structures .)
    LPAREN          reduce using rule 5 (statement -> control_structures .)
    WHILE           reduce using rule 5 (statement -> control_structures .)
    CASE            reduce using rule 5 (statement -> control_structures .)
    DEF             reduce using rule 5 (statement -> control_structures .)
    PRINT           reduce using rule 5 (statement -> control_structures .)
    PUTS            reduce using rule 5 (statement -> control_structures .)
    P               reduce using rule 5 (statement -> control_structures .)
    NUMBER          reduce using rule 5 (statement -> control_structures .)
    STRING          reduce using rule 5 (statement -> control_structures .)
    IF              reduce using rule 5 (statement -> control_structures .)
    LBRACKET        reduce using rule 5 (statement -> control_structures .)
    LBRACE          reduce using rule 5 (statement -> control_structures .)
    SET             reduce using rule 5 (statement -> control_structures .)
    $end            reduce using rule 5 (statement -> control_structures .)
    END             reduce using rule 5 (statement -> control_structures .)
    ELSE            reduce using rule 5 (statement -> control_structures .)
    ELSIF           reduce using rule 5 (statement -> control_structures .)
    WHEN            reduce using rule 5 (statement -> control_structures .)
    RETURN          reduce using rule 5 (statement -> control_structures .)


state 6

    (6) statement -> data_structure .

    INSTANCE_VAR    reduce using rule 6 (statement -> data_structure .)
    GLOBAL_VAR      reduce using rule 6 (statement -> data_structure .)
    ID              reduce using rule 6 (statement -> data_structure .)
    LPAREN          reduce using rule 6 (statement -> data_structure .)
    WHILE           reduce using rule 6 (statement -> data_structure .)
    CASE            reduce using rule 6 (statement -> data_structure .)
    DEF             reduce using rule 6 (statement -> data_structure .)
    PRINT           reduce using rule 6 (statement -> data_structure .)
    PUTS            reduce using rule 6 (statement -> data_structure .)
    P               reduce using rule 6 (statement -> data_structure .)
    NUMBER          reduce using rule 6 (statement -> data_structure .)
    STRING          reduce using rule 6 (statement -> data_structure .)
    IF              reduce using rule 6 (statement -> data_structure .)
    LBRACKET        reduce using rule 6 (statement -> data_structure .)
    LBRACE          reduce using rule 6 (statement -> data_structure .)
    SET             reduce using rule 6 (statement -> data_structure .)
    $end            reduce using rule 6 (statement -> data_structure .)
    END             reduce using rule 6 (statement -> data_structure .)
    ELSE            reduce using rule 6 (statement -> data_structure .)
    ELSIF           reduce using rule 6 (statement -> data_structure .)
    WHEN            reduce using rule 6 (statement -> data_structure .)
    RETURN          reduce using rule 6 (statement -> data_structure .)


state 7

    (7) statement -> while_loop .

    INSTANCE_VAR    reduce using rule 7 (statement -> while_loop .)
    GLOBAL_VAR      reduce using rule 7 (statement -> while_loop .)
    ID              reduce using rule 7 (statement -> while_loop .)
    LPAREN          reduce using rule 7 (statement -> while_loop .)
    WHILE           reduce using rule 7 (statement -> while_loop .)
    CASE            reduce using rule 7 (statement -> while_loop .)
    DEF             reduce using rule 7 (statement -> while_loop .)
    PRINT           reduce using rule 7 (statement -> while_loop .)
    PUTS            reduce using rule 7 (statement -> while_loop .)
    P               reduce using rule 7 (statement -> while_loop .)
    NUMBER          reduce using rule 7 (statement -> while_loop .)
    STRING          reduce using rule 7 (statement -> while_loop .)
    IF              reduce using rule 7 (statement -> while_loop .)
    LBRACKET        reduce using rule 7 (statement -> while_loop .)
    LBRACE          reduce using rule 7 (statement -> while_loop .)
    SET             reduce using rule 7 (statement -> while_loop .)
    $end            reduce using rule 7 (statement -> while_loop .)
    END             reduce using rule 7 (statement -> while_loop .)
    ELSE            reduce using rule 7 (statement -> while_loop .)
    ELSIF           reduce using rule 7 (statement -> while_loop .)
    WHEN            reduce using rule 7 (statement -> while_loop .)
    RETURN          reduce using rule 7 (statement -> while_loop .)


state 8

    (8) statement -> case .

    INSTANCE_VAR    reduce using rule 8 (statement -> case .)
    GLOBAL_VAR      reduce using rule 8 (statement -> case .)
    ID              reduce using rule 8 (statement -> case .)
    LPAREN          reduce using rule 8 (statement -> case .)
    WHILE           reduce using rule 8 (statement -> case .)
    CASE            reduce using rule 8 (statement -> case .)
    DEF             reduce using rule 8 (statement -> case .)
    PRINT           reduce using rule 8 (statement -> case .)
    PUTS            reduce using rule 8 (statement -> case .)
    P               reduce using rule 8 (statement -> case .)
    NUMBER          reduce using rule 8 (statement -> case .)
    STRING          reduce using rule 8 (statement -> case .)
    IF              reduce using rule 8 (statement -> case .)
    LBRACKET        reduce using rule 8 (statement -> case .)
    LBRACE          reduce using rule 8 (statement -> case .)
    SET             reduce using rule 8 (statement -> case .)
    $end            reduce using rule 8 (statement -> case .)
    END             reduce using rule 8 (statement -> case .)
    ELSE            reduce using rule 8 (statement -> case .)
    ELSIF           reduce using rule 8 (statement -> case .)
    WHEN            reduce using rule 8 (statement -> case .)
    RETURN          reduce using rule 8 (statement -> case .)


state 9

    (9) statement -> p_function_zero_parameter .

    INSTANCE_VAR    reduce using rule 9 (statement -> p_function_zero_parameter .)
    GLOBAL_VAR      reduce using rule 9 (statement -> p_function_zero_parameter .)
    ID              reduce using rule 9 (statement -> p_function_zero_parameter .)
    LPAREN          reduce using rule 9 (statement -> p_function_zero_parameter .)
    WHILE           reduce using rule 9 (statement -> p_function_zero_parameter .)
    CASE            reduce using rule 9 (statement -> p_function_zero_parameter .)
    DEF             reduce using rule 9 (statement -> p_function_zero_parameter .)
    PRINT           reduce using rule 9 (statement -> p_function_zero_parameter .)
    PUTS            reduce using rule 9 (statement -> p_function_zero_parameter .)
    P               reduce using rule 9 (statement -> p_function_zero_parameter .)
    NUMBER          reduce using rule 9 (statement -> p_function_zero_parameter .)
    STRING          reduce using rule 9 (statement -> p_function_zero_parameter .)
    IF              reduce using rule 9 (statement -> p_function_zero_parameter .)
    LBRACKET        reduce using rule 9 (statement -> p_function_zero_parameter .)
    LBRACE          reduce using rule 9 (statement -> p_function_zero_parameter .)
    SET             reduce using rule 9 (statement -> p_function_zero_parameter .)
    $end            reduce using rule 9 (statement -> p_function_zero_parameter .)
    END             reduce using rule 9 (statement -> p_function_zero_parameter .)
    ELSE            reduce using rule 9 (statement -> p_function_zero_parameter .)
    ELSIF           reduce using rule 9 (statement -> p_function_zero_parameter .)
    WHEN            reduce using rule 9 (statement -> p_function_zero_parameter .)
    RETURN          reduce using rule 9 (statement -> p_function_zero_parameter .)


state 10

    (10) statement -> p_function_one_parameter .

    INSTANCE_VAR    reduce using rule 10 (statement -> p_function_one_parameter .)
    GLOBAL_VAR      reduce using rule 10 (statement -> p_function_one_parameter .)
    ID              reduce using rule 10 (statement -> p_function_one_parameter .)
    LPAREN          reduce using rule 10 (statement -> p_function_one_parameter .)
    WHILE           reduce using rule 10 (statement -> p_function_one_parameter .)
    CASE            reduce using rule 10 (statement -> p_function_one_parameter .)
    DEF             reduce using rule 10 (statement -> p_function_one_parameter .)
    PRINT           reduce using rule 10 (statement -> p_function_one_parameter .)
    PUTS            reduce using rule 10 (statement -> p_function_one_parameter .)
    P               reduce using rule 10 (statement -> p_function_one_parameter .)
    NUMBER          reduce using rule 10 (statement -> p_function_one_parameter .)
    STRING          reduce using rule 10 (statement -> p_function_one_parameter .)
    IF              reduce using rule 10 (statement -> p_function_one_parameter .)
    LBRACKET        reduce using rule 10 (statement -> p_function_one_parameter .)
    LBRACE          reduce using rule 10 (statement -> p_function_one_parameter .)
    SET             reduce using rule 10 (statement -> p_function_one_parameter .)
    $end            reduce using rule 10 (statement -> p_function_one_parameter .)
    END             reduce using rule 10 (statement -> p_function_one_parameter .)
    ELSE            reduce using rule 10 (statement -> p_function_one_parameter .)
    ELSIF           reduce using rule 10 (statement -> p_function_one_parameter .)
    WHEN            reduce using rule 10 (statement -> p_function_one_parameter .)
    RETURN          reduce using rule 10 (statement -> p_function_one_parameter .)


state 11

    (11) statement -> p_function_two_parameter .

    INSTANCE_VAR    reduce using rule 11 (statement -> p_function_two_parameter .)
    GLOBAL_VAR      reduce using rule 11 (statement -> p_function_two_parameter .)
    ID              reduce using rule 11 (statement -> p_function_two_parameter .)
    LPAREN          reduce using rule 11 (statement -> p_function_two_parameter .)
    WHILE           reduce using rule 11 (statement -> p_function_two_parameter .)
    CASE            reduce using rule 11 (statement -> p_function_two_parameter .)
    DEF             reduce using rule 11 (statement -> p_function_two_parameter .)
    PRINT           reduce using rule 11 (statement -> p_function_two_parameter .)
    PUTS            reduce using rule 11 (statement -> p_function_two_parameter .)
    P               reduce using rule 11 (statement -> p_function_two_parameter .)
    NUMBER          reduce using rule 11 (statement -> p_function_two_parameter .)
    STRING          reduce using rule 11 (statement -> p_function_two_parameter .)
    IF              reduce using rule 11 (statement -> p_function_two_parameter .)
    LBRACKET        reduce using rule 11 (statement -> p_function_two_parameter .)
    LBRACE          reduce using rule 11 (statement -> p_function_two_parameter .)
    SET             reduce using rule 11 (statement -> p_function_two_parameter .)
    $end            reduce using rule 11 (statement -> p_function_two_parameter .)
    END             reduce using rule 11 (statement -> p_function_two_parameter .)
    ELSE            reduce using rule 11 (statement -> p_function_two_parameter .)
    ELSIF           reduce using rule 11 (statement -> p_function_two_parameter .)
    WHEN            reduce using rule 11 (statement -> p_function_two_parameter .)
    RETURN          reduce using rule 11 (statement -> p_function_two_parameter .)


state 12

    (12) statement -> function_call .

    INSTANCE_VAR    reduce using rule 12 (statement -> function_call .)
    GLOBAL_VAR      reduce using rule 12 (statement -> function_call .)
    ID              reduce using rule 12 (statement -> function_call .)
    LPAREN          reduce using rule 12 (statement -> function_call .)
    WHILE           reduce using rule 12 (statement -> function_call .)
    CASE            reduce using rule 12 (statement -> function_call .)
    DEF             reduce using rule 12 (statement -> function_call .)
    PRINT           reduce using rule 12 (statement -> function_call .)
    PUTS            reduce using rule 12 (statement -> function_call .)
    P               reduce using rule 12 (statement -> function_call .)
    NUMBER          reduce using rule 12 (statement -> function_call .)
    STRING          reduce using rule 12 (statement -> function_call .)
    IF              reduce using rule 12 (statement -> function_call .)
    LBRACKET        reduce using rule 12 (statement -> function_call .)
    LBRACE          reduce using rule 12 (statement -> function_call .)
    SET             reduce using rule 12 (statement -> function_call .)
    $end            reduce using rule 12 (statement -> function_call .)
    END             reduce using rule 12 (statement -> function_call .)
    ELSE            reduce using rule 12 (statement -> function_call .)
    ELSIF           reduce using rule 12 (statement -> function_call .)
    WHEN            reduce using rule 12 (statement -> function_call .)
    RETURN          reduce using rule 12 (statement -> function_call .)


state 13

    (13) statement -> impression .

    INSTANCE_VAR    reduce using rule 13 (statement -> impression .)
    GLOBAL_VAR      reduce using rule 13 (statement -> impression .)
    ID              reduce using rule 13 (statement -> impression .)
    LPAREN          reduce using rule 13 (statement -> impression .)
    WHILE           reduce using rule 13 (statement -> impression .)
    CASE            reduce using rule 13 (statement -> impression .)
    DEF             reduce using rule 13 (statement -> impression .)
    PRINT           reduce using rule 13 (statement -> impression .)
    PUTS            reduce using rule 13 (statement -> impression .)
    P               reduce using rule 13 (statement -> impression .)
    NUMBER          reduce using rule 13 (statement -> impression .)
    STRING          reduce using rule 13 (statement -> impression .)
    IF              reduce using rule 13 (statement -> impression .)
    LBRACKET        reduce using rule 13 (statement -> impression .)
    LBRACE          reduce using rule 13 (statement -> impression .)
    SET             reduce using rule 13 (statement -> impression .)
    $end            reduce using rule 13 (statement -> impression .)
    END             reduce using rule 13 (statement -> impression .)
    ELSE            reduce using rule 13 (statement -> impression .)
    ELSIF           reduce using rule 13 (statement -> impression .)
    WHEN            reduce using rule 13 (statement -> impression .)
    RETURN          reduce using rule 13 (statement -> impression .)


state 14

    (14) statement -> data_input .

    INSTANCE_VAR    reduce using rule 14 (statement -> data_input .)
    GLOBAL_VAR      reduce using rule 14 (statement -> data_input .)
    ID              reduce using rule 14 (statement -> data_input .)
    LPAREN          reduce using rule 14 (statement -> data_input .)
    WHILE           reduce using rule 14 (statement -> data_input .)
    CASE            reduce using rule 14 (statement -> data_input .)
    DEF             reduce using rule 14 (statement -> data_input .)
    PRINT           reduce using rule 14 (statement -> data_input .)
    PUTS            reduce using rule 14 (statement -> data_input .)
    P               reduce using rule 14 (statement -> data_input .)
    NUMBER          reduce using rule 14 (statement -> data_input .)
    STRING          reduce using rule 14 (statement -> data_input .)
    IF              reduce using rule 14 (statement -> data_input .)
    LBRACKET        reduce using rule 14 (statement -> data_input .)
    LBRACE          reduce using rule 14 (statement -> data_input .)
    SET             reduce using rule 14 (statement -> data_input .)
    $end            reduce using rule 14 (statement -> data_input .)
    END             reduce using rule 14 (statement -> data_input .)
    ELSE            reduce using rule 14 (statement -> data_input .)
    ELSIF           reduce using rule 14 (statement -> data_input .)
    WHEN            reduce using rule 14 (statement -> data_input .)
    RETURN          reduce using rule 14 (statement -> data_input .)


state 15

    (22) assign -> INSTANCE_VAR . ASSIGN value
    (25) assign -> INSTANCE_VAR . ASSIGN aritmeticExpresion
    (28) assign -> INSTANCE_VAR . ASSIGN conditions
    (31) assign -> INSTANCE_VAR . ASSIGN data_structure
    (131) data_input -> INSTANCE_VAR . ASSIGN GETS STRING
    (134) data_input -> INSTANCE_VAR . ASSIGN GETS NUMBER
    (17) value -> INSTANCE_VAR .

    ASSIGN          shift and go to state 43
    PLUS            reduce using rule 17 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 17 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 17 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 17 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 17 (value -> INSTANCE_VAR .)


state 16

    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 44

state 17

    (23) assign -> GLOBAL_VAR . ASSIGN value
    (26) assign -> GLOBAL_VAR . ASSIGN aritmeticExpresion
    (29) assign -> GLOBAL_VAR . ASSIGN conditions
    (32) assign -> GLOBAL_VAR . ASSIGN data_structure
    (132) data_input -> GLOBAL_VAR . ASSIGN GETS STRING
    (135) data_input -> GLOBAL_VAR . ASSIGN GETS NUMBER
    (18) value -> GLOBAL_VAR .

    ASSIGN          shift and go to state 45
    PLUS            reduce using rule 18 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 18 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 18 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 18 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 18 (value -> GLOBAL_VAR .)


state 18

    (24) assign -> ID . ASSIGN value
    (27) assign -> ID . ASSIGN aritmeticExpresion
    (30) assign -> ID . ASSIGN conditions
    (33) assign -> ID . ASSIGN data_structure
    (117) function_call -> ID . LPAREN RPAREN
    (118) function_call -> ID . LPAREN params RPAREN
    (119) function_call -> ID . LPAREN param RPAREN
    (130) data_input -> ID . ASSIGN GETS STRING
    (133) data_input -> ID . ASSIGN GETS NUMBER
    (19) value -> ID .

    ASSIGN          shift and go to state 46
    LPAREN          shift and go to state 47
    PLUS            reduce using rule 19 (value -> ID .)
    MINUS           reduce using rule 19 (value -> ID .)
    TIMES           reduce using rule 19 (value -> ID .)
    DIVIDE          reduce using rule 19 (value -> ID .)
    MOD             reduce using rule 19 (value -> ID .)


state 19

    (37) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> LPAREN . aritmeticExpresion RPAREN operator value
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    aritmeticExpresion             shift and go to state 48
    value                          shift and go to state 16

state 20

    (57) control_structures -> if_block .
    (58) control_structures -> if_block . elsif_blocks
    (59) control_structures -> if_block . elsif_blocks else_block
    (60) control_structures -> if_block . else_block
    (65) elsif_blocks -> . elsif_block
    (66) elsif_blocks -> . elsif_blocks elsif_block
    (69) else_block -> . ELSE codigo END
    (67) elsif_block -> . ELSIF conditions RPAREN codigo
    (68) elsif_block -> . ELSIF LPAREN conditions RPAREN codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    INSTANCE_VAR    reduce using rule 57 (control_structures -> if_block .)
    GLOBAL_VAR      reduce using rule 57 (control_structures -> if_block .)
    ID              reduce using rule 57 (control_structures -> if_block .)
    LPAREN          reduce using rule 57 (control_structures -> if_block .)
    WHILE           reduce using rule 57 (control_structures -> if_block .)
    CASE            reduce using rule 57 (control_structures -> if_block .)
    DEF             reduce using rule 57 (control_structures -> if_block .)
    PRINT           reduce using rule 57 (control_structures -> if_block .)
    PUTS            reduce using rule 57 (control_structures -> if_block .)
    P               reduce using rule 57 (control_structures -> if_block .)
    NUMBER          reduce using rule 57 (control_structures -> if_block .)
    STRING          reduce using rule 57 (control_structures -> if_block .)
    IF              reduce using rule 57 (control_structures -> if_block .)
    LBRACKET        reduce using rule 57 (control_structures -> if_block .)
    LBRACE          reduce using rule 57 (control_structures -> if_block .)
    SET             reduce using rule 57 (control_structures -> if_block .)
    $end            reduce using rule 57 (control_structures -> if_block .)
    END             reduce using rule 57 (control_structures -> if_block .)
    WHEN            reduce using rule 57 (control_structures -> if_block .)
    RETURN          reduce using rule 57 (control_structures -> if_block .)
    ELSE            shift and go to state 55
    ELSIF           shift and go to state 56

  ! ELSE            [ reduce using rule 57 (control_structures -> if_block .) ]
  ! ELSIF           [ reduce using rule 57 (control_structures -> if_block .) ]

    elsif_blocks                   shift and go to state 52
    else_block                     shift and go to state 53
    elsif_block                    shift and go to state 54

state 21

    (79) data_structure -> array .

    INSTANCE_VAR    reduce using rule 79 (data_structure -> array .)
    GLOBAL_VAR      reduce using rule 79 (data_structure -> array .)
    ID              reduce using rule 79 (data_structure -> array .)
    LPAREN          reduce using rule 79 (data_structure -> array .)
    WHILE           reduce using rule 79 (data_structure -> array .)
    CASE            reduce using rule 79 (data_structure -> array .)
    DEF             reduce using rule 79 (data_structure -> array .)
    PRINT           reduce using rule 79 (data_structure -> array .)
    PUTS            reduce using rule 79 (data_structure -> array .)
    P               reduce using rule 79 (data_structure -> array .)
    NUMBER          reduce using rule 79 (data_structure -> array .)
    STRING          reduce using rule 79 (data_structure -> array .)
    IF              reduce using rule 79 (data_structure -> array .)
    LBRACKET        reduce using rule 79 (data_structure -> array .)
    LBRACE          reduce using rule 79 (data_structure -> array .)
    SET             reduce using rule 79 (data_structure -> array .)
    $end            reduce using rule 79 (data_structure -> array .)
    END             reduce using rule 79 (data_structure -> array .)
    ELSE            reduce using rule 79 (data_structure -> array .)
    ELSIF           reduce using rule 79 (data_structure -> array .)
    WHEN            reduce using rule 79 (data_structure -> array .)
    RETURN          reduce using rule 79 (data_structure -> array .)


state 22

    (80) data_structure -> hash .

    INSTANCE_VAR    reduce using rule 80 (data_structure -> hash .)
    GLOBAL_VAR      reduce using rule 80 (data_structure -> hash .)
    ID              reduce using rule 80 (data_structure -> hash .)
    LPAREN          reduce using rule 80 (data_structure -> hash .)
    WHILE           reduce using rule 80 (data_structure -> hash .)
    CASE            reduce using rule 80 (data_structure -> hash .)
    DEF             reduce using rule 80 (data_structure -> hash .)
    PRINT           reduce using rule 80 (data_structure -> hash .)
    PUTS            reduce using rule 80 (data_structure -> hash .)
    P               reduce using rule 80 (data_structure -> hash .)
    NUMBER          reduce using rule 80 (data_structure -> hash .)
    STRING          reduce using rule 80 (data_structure -> hash .)
    IF              reduce using rule 80 (data_structure -> hash .)
    LBRACKET        reduce using rule 80 (data_structure -> hash .)
    LBRACE          reduce using rule 80 (data_structure -> hash .)
    SET             reduce using rule 80 (data_structure -> hash .)
    $end            reduce using rule 80 (data_structure -> hash .)
    END             reduce using rule 80 (data_structure -> hash .)
    ELSE            reduce using rule 80 (data_structure -> hash .)
    ELSIF           reduce using rule 80 (data_structure -> hash .)
    WHEN            reduce using rule 80 (data_structure -> hash .)
    RETURN          reduce using rule 80 (data_structure -> hash .)


state 23

    (81) data_structure -> set .

    INSTANCE_VAR    reduce using rule 81 (data_structure -> set .)
    GLOBAL_VAR      reduce using rule 81 (data_structure -> set .)
    ID              reduce using rule 81 (data_structure -> set .)
    LPAREN          reduce using rule 81 (data_structure -> set .)
    WHILE           reduce using rule 81 (data_structure -> set .)
    CASE            reduce using rule 81 (data_structure -> set .)
    DEF             reduce using rule 81 (data_structure -> set .)
    PRINT           reduce using rule 81 (data_structure -> set .)
    PUTS            reduce using rule 81 (data_structure -> set .)
    P               reduce using rule 81 (data_structure -> set .)
    NUMBER          reduce using rule 81 (data_structure -> set .)
    STRING          reduce using rule 81 (data_structure -> set .)
    IF              reduce using rule 81 (data_structure -> set .)
    LBRACKET        reduce using rule 81 (data_structure -> set .)
    LBRACE          reduce using rule 81 (data_structure -> set .)
    SET             reduce using rule 81 (data_structure -> set .)
    $end            reduce using rule 81 (data_structure -> set .)
    END             reduce using rule 81 (data_structure -> set .)
    ELSE            reduce using rule 81 (data_structure -> set .)
    ELSIF           reduce using rule 81 (data_structure -> set .)
    WHEN            reduce using rule 81 (data_structure -> set .)
    RETURN          reduce using rule 81 (data_structure -> set .)


state 24

    (70) while_loop -> WHILE . conditions codigo END
    (71) while_loop -> WHILE . LPAREN conditions RPAREN codigo END
    (72) while_loop -> WHILE . conditions DO codigo END
    (73) while_loop -> WHILE . LPAREN conditions RPAREN DO codigo END
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 58
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 57
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 25

    (74) case -> CASE . value whens END
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 61

state 26

    (91) p_function_zero_parameter -> DEF . ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> DEF . ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> DEF . ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> DEF . ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> DEF . ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> DEF . ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> DEF . ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> DEF . ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> DEF . ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> DEF . ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> DEF . ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> DEF . ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END

    ID              shift and go to state 62


state 27

    (124) impression -> PRINT . LPAREN value RPAREN
    (125) impression -> PRINT . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 63
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 64

state 28

    (126) impression -> PUTS . LPAREN value RPAREN
    (127) impression -> PUTS . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 65
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 66

state 29

    (128) impression -> P . LPAREN value RPAREN
    (129) impression -> P . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 67
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 68

state 30

    (16) value -> STRING .

    PLUS            reduce using rule 16 (value -> STRING .)
    MINUS           reduce using rule 16 (value -> STRING .)
    TIMES           reduce using rule 16 (value -> STRING .)
    DIVIDE          reduce using rule 16 (value -> STRING .)
    MOD             reduce using rule 16 (value -> STRING .)
    LESSTHAN        reduce using rule 16 (value -> STRING .)
    GREATERTHAN     reduce using rule 16 (value -> STRING .)
    GREATEROREQUAL  reduce using rule 16 (value -> STRING .)
    LESSOREQUAL     reduce using rule 16 (value -> STRING .)
    EQUAL           reduce using rule 16 (value -> STRING .)
    NOTEQUAL        reduce using rule 16 (value -> STRING .)
    WHEN            reduce using rule 16 (value -> STRING .)
    ELSE            reduce using rule 16 (value -> STRING .)
    INSTANCE_VAR    reduce using rule 16 (value -> STRING .)
    GLOBAL_VAR      reduce using rule 16 (value -> STRING .)
    ID              reduce using rule 16 (value -> STRING .)
    LPAREN          reduce using rule 16 (value -> STRING .)
    WHILE           reduce using rule 16 (value -> STRING .)
    CASE            reduce using rule 16 (value -> STRING .)
    DEF             reduce using rule 16 (value -> STRING .)
    PRINT           reduce using rule 16 (value -> STRING .)
    PUTS            reduce using rule 16 (value -> STRING .)
    P               reduce using rule 16 (value -> STRING .)
    NUMBER          reduce using rule 16 (value -> STRING .)
    STRING          reduce using rule 16 (value -> STRING .)
    IF              reduce using rule 16 (value -> STRING .)
    LBRACKET        reduce using rule 16 (value -> STRING .)
    LBRACE          reduce using rule 16 (value -> STRING .)
    SET             reduce using rule 16 (value -> STRING .)
    $end            reduce using rule 16 (value -> STRING .)
    END             reduce using rule 16 (value -> STRING .)
    ELSIF           reduce using rule 16 (value -> STRING .)
    RETURN          reduce using rule 16 (value -> STRING .)
    COMMA           reduce using rule 16 (value -> STRING .)
    RBRACKET        reduce using rule 16 (value -> STRING .)
    COLON           reduce using rule 16 (value -> STRING .)
    RPAREN          reduce using rule 16 (value -> STRING .)
    AND             reduce using rule 16 (value -> STRING .)
    OR              reduce using rule 16 (value -> STRING .)
    DO              reduce using rule 16 (value -> STRING .)
    RBRACE          reduce using rule 16 (value -> STRING .)


state 31

    (15) value -> NUMBER .

    PLUS            reduce using rule 15 (value -> NUMBER .)
    MINUS           reduce using rule 15 (value -> NUMBER .)
    TIMES           reduce using rule 15 (value -> NUMBER .)
    DIVIDE          reduce using rule 15 (value -> NUMBER .)
    MOD             reduce using rule 15 (value -> NUMBER .)
    LESSTHAN        reduce using rule 15 (value -> NUMBER .)
    GREATERTHAN     reduce using rule 15 (value -> NUMBER .)
    GREATEROREQUAL  reduce using rule 15 (value -> NUMBER .)
    LESSOREQUAL     reduce using rule 15 (value -> NUMBER .)
    EQUAL           reduce using rule 15 (value -> NUMBER .)
    NOTEQUAL        reduce using rule 15 (value -> NUMBER .)
    WHEN            reduce using rule 15 (value -> NUMBER .)
    ELSE            reduce using rule 15 (value -> NUMBER .)
    INSTANCE_VAR    reduce using rule 15 (value -> NUMBER .)
    GLOBAL_VAR      reduce using rule 15 (value -> NUMBER .)
    ID              reduce using rule 15 (value -> NUMBER .)
    LPAREN          reduce using rule 15 (value -> NUMBER .)
    WHILE           reduce using rule 15 (value -> NUMBER .)
    CASE            reduce using rule 15 (value -> NUMBER .)
    DEF             reduce using rule 15 (value -> NUMBER .)
    PRINT           reduce using rule 15 (value -> NUMBER .)
    PUTS            reduce using rule 15 (value -> NUMBER .)
    P               reduce using rule 15 (value -> NUMBER .)
    NUMBER          reduce using rule 15 (value -> NUMBER .)
    STRING          reduce using rule 15 (value -> NUMBER .)
    IF              reduce using rule 15 (value -> NUMBER .)
    LBRACKET        reduce using rule 15 (value -> NUMBER .)
    LBRACE          reduce using rule 15 (value -> NUMBER .)
    SET             reduce using rule 15 (value -> NUMBER .)
    $end            reduce using rule 15 (value -> NUMBER .)
    END             reduce using rule 15 (value -> NUMBER .)
    ELSIF           reduce using rule 15 (value -> NUMBER .)
    RETURN          reduce using rule 15 (value -> NUMBER .)
    COMMA           reduce using rule 15 (value -> NUMBER .)
    RBRACKET        reduce using rule 15 (value -> NUMBER .)
    COLON           reduce using rule 15 (value -> NUMBER .)
    RPAREN          reduce using rule 15 (value -> NUMBER .)
    AND             reduce using rule 15 (value -> NUMBER .)
    OR              reduce using rule 15 (value -> NUMBER .)
    DO              reduce using rule 15 (value -> NUMBER .)
    RBRACE          reduce using rule 15 (value -> NUMBER .)


state 32

    (61) if_block -> IF . conditions codigo
    (62) if_block -> IF . conditions codigo END
    (63) if_block -> IF . LPAREN conditions RPAREN codigo
    (64) if_block -> IF . LPAREN conditions RPAREN codigo END
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 70
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 69
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 33

    (82) array -> LBRACKET . RBRACKET
    (83) array -> LBRACKET . values RBRACKET
    (20) values -> . value
    (21) values -> . value COMMA values
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    RBRACKET        shift and go to state 71
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    values                         shift and go to state 72
    value                          shift and go to state 73

state 34

    (84) hash -> LBRACE . RBRACE
    (85) hash -> LBRACE . hash_contents RBRACE
    (86) hash_contents -> . hash_pair
    (87) hash_contents -> . hash_contents COMMA hash_pair
    (88) hash_pair -> . value COLON value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    RBRACE          shift and go to state 74
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    hash_contents                  shift and go to state 75
    hash_pair                      shift and go to state 76
    value                          shift and go to state 77

state 35

    (89) set -> SET . LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> SET . LPAREN LBRACKET values RBRACKET RPAREN

    LPAREN          shift and go to state 78


state 36

    (2) codigo -> codigo statement .

    INSTANCE_VAR    reduce using rule 2 (codigo -> codigo statement .)
    GLOBAL_VAR      reduce using rule 2 (codigo -> codigo statement .)
    ID              reduce using rule 2 (codigo -> codigo statement .)
    LPAREN          reduce using rule 2 (codigo -> codigo statement .)
    WHILE           reduce using rule 2 (codigo -> codigo statement .)
    CASE            reduce using rule 2 (codigo -> codigo statement .)
    DEF             reduce using rule 2 (codigo -> codigo statement .)
    PRINT           reduce using rule 2 (codigo -> codigo statement .)
    PUTS            reduce using rule 2 (codigo -> codigo statement .)
    P               reduce using rule 2 (codigo -> codigo statement .)
    NUMBER          reduce using rule 2 (codigo -> codigo statement .)
    STRING          reduce using rule 2 (codigo -> codigo statement .)
    IF              reduce using rule 2 (codigo -> codigo statement .)
    LBRACKET        reduce using rule 2 (codigo -> codigo statement .)
    LBRACE          reduce using rule 2 (codigo -> codigo statement .)
    SET             reduce using rule 2 (codigo -> codigo statement .)
    $end            reduce using rule 2 (codigo -> codigo statement .)
    END             reduce using rule 2 (codigo -> codigo statement .)
    ELSE            reduce using rule 2 (codigo -> codigo statement .)
    ELSIF           reduce using rule 2 (codigo -> codigo statement .)
    WHEN            reduce using rule 2 (codigo -> codigo statement .)
    RETURN          reduce using rule 2 (codigo -> codigo statement .)


state 37

    (36) aritmeticExpresion -> aritmeticExpresion operator . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 79

state 38

    (39) operator -> PLUS .

    NUMBER          reduce using rule 39 (operator -> PLUS .)
    STRING          reduce using rule 39 (operator -> PLUS .)
    INSTANCE_VAR    reduce using rule 39 (operator -> PLUS .)
    GLOBAL_VAR      reduce using rule 39 (operator -> PLUS .)
    ID              reduce using rule 39 (operator -> PLUS .)


state 39

    (40) operator -> MINUS .

    NUMBER          reduce using rule 40 (operator -> MINUS .)
    STRING          reduce using rule 40 (operator -> MINUS .)
    INSTANCE_VAR    reduce using rule 40 (operator -> MINUS .)
    GLOBAL_VAR      reduce using rule 40 (operator -> MINUS .)
    ID              reduce using rule 40 (operator -> MINUS .)


state 40

    (41) operator -> TIMES .

    NUMBER          reduce using rule 41 (operator -> TIMES .)
    STRING          reduce using rule 41 (operator -> TIMES .)
    INSTANCE_VAR    reduce using rule 41 (operator -> TIMES .)
    GLOBAL_VAR      reduce using rule 41 (operator -> TIMES .)
    ID              reduce using rule 41 (operator -> TIMES .)


state 41

    (42) operator -> DIVIDE .

    NUMBER          reduce using rule 42 (operator -> DIVIDE .)
    STRING          reduce using rule 42 (operator -> DIVIDE .)
    INSTANCE_VAR    reduce using rule 42 (operator -> DIVIDE .)
    GLOBAL_VAR      reduce using rule 42 (operator -> DIVIDE .)
    ID              reduce using rule 42 (operator -> DIVIDE .)


state 42

    (43) operator -> MOD .

    NUMBER          reduce using rule 43 (operator -> MOD .)
    STRING          reduce using rule 43 (operator -> MOD .)
    INSTANCE_VAR    reduce using rule 43 (operator -> MOD .)
    GLOBAL_VAR      reduce using rule 43 (operator -> MOD .)
    ID              reduce using rule 43 (operator -> MOD .)


state 43

    (22) assign -> INSTANCE_VAR ASSIGN . value
    (25) assign -> INSTANCE_VAR ASSIGN . aritmeticExpresion
    (28) assign -> INSTANCE_VAR ASSIGN . conditions
    (31) assign -> INSTANCE_VAR ASSIGN . data_structure
    (131) data_input -> INSTANCE_VAR ASSIGN . GETS STRING
    (134) data_input -> INSTANCE_VAR ASSIGN . GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    GETS            shift and go to state 84
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    value                          shift and go to state 80
    aritmeticExpresion             shift and go to state 81
    conditions                     shift and go to state 82
    data_structure                 shift and go to state 83
    condition                      shift and go to state 59
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 44

    (34) aritmeticExpresion -> value operator . value
    (35) aritmeticExpresion -> value operator . function_call
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 87

    value                          shift and go to state 85
    function_call                  shift and go to state 86

state 45

    (23) assign -> GLOBAL_VAR ASSIGN . value
    (26) assign -> GLOBAL_VAR ASSIGN . aritmeticExpresion
    (29) assign -> GLOBAL_VAR ASSIGN . conditions
    (32) assign -> GLOBAL_VAR ASSIGN . data_structure
    (132) data_input -> GLOBAL_VAR ASSIGN . GETS STRING
    (135) data_input -> GLOBAL_VAR ASSIGN . GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    GETS            shift and go to state 92
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    value                          shift and go to state 88
    aritmeticExpresion             shift and go to state 89
    conditions                     shift and go to state 90
    data_structure                 shift and go to state 91
    condition                      shift and go to state 59
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 46

    (24) assign -> ID ASSIGN . value
    (27) assign -> ID ASSIGN . aritmeticExpresion
    (30) assign -> ID ASSIGN . conditions
    (33) assign -> ID ASSIGN . data_structure
    (130) data_input -> ID ASSIGN . GETS STRING
    (133) data_input -> ID ASSIGN . GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    GETS            shift and go to state 97
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    value                          shift and go to state 93
    aritmeticExpresion             shift and go to state 94
    conditions                     shift and go to state 95
    data_structure                 shift and go to state 96
    condition                      shift and go to state 59
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 47

    (117) function_call -> ID LPAREN . RPAREN
    (118) function_call -> ID LPAREN . params RPAREN
    (119) function_call -> ID LPAREN . param RPAREN
    (122) params -> . value COMMA value
    (123) params -> . aritmeticExpresion COMMA aritmeticExpresion
    (120) param -> . value
    (121) param -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    RPAREN          shift and go to state 98
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    params                         shift and go to state 99
    param                          shift and go to state 100
    value                          shift and go to state 101
    aritmeticExpresion             shift and go to state 102

state 48

    (37) aritmeticExpresion -> LPAREN aritmeticExpresion . RPAREN
    (38) aritmeticExpresion -> LPAREN aritmeticExpresion . RPAREN operator value
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    RPAREN          shift and go to state 103
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 49

    (17) value -> INSTANCE_VAR .

    PLUS            reduce using rule 17 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 17 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 17 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 17 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 17 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 17 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 17 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 17 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 17 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 17 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 17 (value -> INSTANCE_VAR .)
    WHEN            reduce using rule 17 (value -> INSTANCE_VAR .)
    ELSE            reduce using rule 17 (value -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 17 (value -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 17 (value -> INSTANCE_VAR .)
    ID              reduce using rule 17 (value -> INSTANCE_VAR .)
    LPAREN          reduce using rule 17 (value -> INSTANCE_VAR .)
    WHILE           reduce using rule 17 (value -> INSTANCE_VAR .)
    CASE            reduce using rule 17 (value -> INSTANCE_VAR .)
    DEF             reduce using rule 17 (value -> INSTANCE_VAR .)
    PRINT           reduce using rule 17 (value -> INSTANCE_VAR .)
    PUTS            reduce using rule 17 (value -> INSTANCE_VAR .)
    P               reduce using rule 17 (value -> INSTANCE_VAR .)
    NUMBER          reduce using rule 17 (value -> INSTANCE_VAR .)
    STRING          reduce using rule 17 (value -> INSTANCE_VAR .)
    IF              reduce using rule 17 (value -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 17 (value -> INSTANCE_VAR .)
    LBRACE          reduce using rule 17 (value -> INSTANCE_VAR .)
    SET             reduce using rule 17 (value -> INSTANCE_VAR .)
    $end            reduce using rule 17 (value -> INSTANCE_VAR .)
    END             reduce using rule 17 (value -> INSTANCE_VAR .)
    ELSIF           reduce using rule 17 (value -> INSTANCE_VAR .)
    RETURN          reduce using rule 17 (value -> INSTANCE_VAR .)
    COMMA           reduce using rule 17 (value -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 17 (value -> INSTANCE_VAR .)
    COLON           reduce using rule 17 (value -> INSTANCE_VAR .)
    RPAREN          reduce using rule 17 (value -> INSTANCE_VAR .)
    AND             reduce using rule 17 (value -> INSTANCE_VAR .)
    OR              reduce using rule 17 (value -> INSTANCE_VAR .)
    DO              reduce using rule 17 (value -> INSTANCE_VAR .)
    RBRACE          reduce using rule 17 (value -> INSTANCE_VAR .)


state 50

    (18) value -> GLOBAL_VAR .

    PLUS            reduce using rule 18 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 18 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 18 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 18 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 18 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 18 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 18 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 18 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 18 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 18 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 18 (value -> GLOBAL_VAR .)
    WHEN            reduce using rule 18 (value -> GLOBAL_VAR .)
    ELSE            reduce using rule 18 (value -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 18 (value -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 18 (value -> GLOBAL_VAR .)
    ID              reduce using rule 18 (value -> GLOBAL_VAR .)
    LPAREN          reduce using rule 18 (value -> GLOBAL_VAR .)
    WHILE           reduce using rule 18 (value -> GLOBAL_VAR .)
    CASE            reduce using rule 18 (value -> GLOBAL_VAR .)
    DEF             reduce using rule 18 (value -> GLOBAL_VAR .)
    PRINT           reduce using rule 18 (value -> GLOBAL_VAR .)
    PUTS            reduce using rule 18 (value -> GLOBAL_VAR .)
    P               reduce using rule 18 (value -> GLOBAL_VAR .)
    NUMBER          reduce using rule 18 (value -> GLOBAL_VAR .)
    STRING          reduce using rule 18 (value -> GLOBAL_VAR .)
    IF              reduce using rule 18 (value -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 18 (value -> GLOBAL_VAR .)
    LBRACE          reduce using rule 18 (value -> GLOBAL_VAR .)
    SET             reduce using rule 18 (value -> GLOBAL_VAR .)
    $end            reduce using rule 18 (value -> GLOBAL_VAR .)
    END             reduce using rule 18 (value -> GLOBAL_VAR .)
    ELSIF           reduce using rule 18 (value -> GLOBAL_VAR .)
    RETURN          reduce using rule 18 (value -> GLOBAL_VAR .)
    COMMA           reduce using rule 18 (value -> GLOBAL_VAR .)
    RBRACKET        reduce using rule 18 (value -> GLOBAL_VAR .)
    COLON           reduce using rule 18 (value -> GLOBAL_VAR .)
    RPAREN          reduce using rule 18 (value -> GLOBAL_VAR .)
    AND             reduce using rule 18 (value -> GLOBAL_VAR .)
    OR              reduce using rule 18 (value -> GLOBAL_VAR .)
    DO              reduce using rule 18 (value -> GLOBAL_VAR .)
    RBRACE          reduce using rule 18 (value -> GLOBAL_VAR .)


state 51

    (19) value -> ID .

    PLUS            reduce using rule 19 (value -> ID .)
    MINUS           reduce using rule 19 (value -> ID .)
    TIMES           reduce using rule 19 (value -> ID .)
    DIVIDE          reduce using rule 19 (value -> ID .)
    MOD             reduce using rule 19 (value -> ID .)
    LESSTHAN        reduce using rule 19 (value -> ID .)
    GREATERTHAN     reduce using rule 19 (value -> ID .)
    GREATEROREQUAL  reduce using rule 19 (value -> ID .)
    LESSOREQUAL     reduce using rule 19 (value -> ID .)
    EQUAL           reduce using rule 19 (value -> ID .)
    NOTEQUAL        reduce using rule 19 (value -> ID .)
    WHEN            reduce using rule 19 (value -> ID .)
    ELSE            reduce using rule 19 (value -> ID .)
    INSTANCE_VAR    reduce using rule 19 (value -> ID .)
    GLOBAL_VAR      reduce using rule 19 (value -> ID .)
    ID              reduce using rule 19 (value -> ID .)
    LPAREN          reduce using rule 19 (value -> ID .)
    WHILE           reduce using rule 19 (value -> ID .)
    CASE            reduce using rule 19 (value -> ID .)
    DEF             reduce using rule 19 (value -> ID .)
    PRINT           reduce using rule 19 (value -> ID .)
    PUTS            reduce using rule 19 (value -> ID .)
    P               reduce using rule 19 (value -> ID .)
    NUMBER          reduce using rule 19 (value -> ID .)
    STRING          reduce using rule 19 (value -> ID .)
    IF              reduce using rule 19 (value -> ID .)
    LBRACKET        reduce using rule 19 (value -> ID .)
    LBRACE          reduce using rule 19 (value -> ID .)
    SET             reduce using rule 19 (value -> ID .)
    $end            reduce using rule 19 (value -> ID .)
    END             reduce using rule 19 (value -> ID .)
    ELSIF           reduce using rule 19 (value -> ID .)
    RETURN          reduce using rule 19 (value -> ID .)
    COMMA           reduce using rule 19 (value -> ID .)
    RBRACKET        reduce using rule 19 (value -> ID .)
    COLON           reduce using rule 19 (value -> ID .)
    RPAREN          reduce using rule 19 (value -> ID .)
    AND             reduce using rule 19 (value -> ID .)
    OR              reduce using rule 19 (value -> ID .)
    DO              reduce using rule 19 (value -> ID .)
    RBRACE          reduce using rule 19 (value -> ID .)


state 52

    (58) control_structures -> if_block elsif_blocks .
    (59) control_structures -> if_block elsif_blocks . else_block
    (66) elsif_blocks -> elsif_blocks . elsif_block
    (69) else_block -> . ELSE codigo END
    (67) elsif_block -> . ELSIF conditions RPAREN codigo
    (68) elsif_block -> . ELSIF LPAREN conditions RPAREN codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    INSTANCE_VAR    reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    GLOBAL_VAR      reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    ID              reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    LPAREN          reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    WHILE           reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    CASE            reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    DEF             reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    PRINT           reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    PUTS            reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    P               reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    NUMBER          reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    STRING          reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    IF              reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    LBRACKET        reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    LBRACE          reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    SET             reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    $end            reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    END             reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    WHEN            reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    RETURN          reduce using rule 58 (control_structures -> if_block elsif_blocks .)
    ELSE            shift and go to state 55
    ELSIF           shift and go to state 56

  ! ELSE            [ reduce using rule 58 (control_structures -> if_block elsif_blocks .) ]
  ! ELSIF           [ reduce using rule 58 (control_structures -> if_block elsif_blocks .) ]

    else_block                     shift and go to state 104
    elsif_block                    shift and go to state 105

state 53

    (60) control_structures -> if_block else_block .

    INSTANCE_VAR    reduce using rule 60 (control_structures -> if_block else_block .)
    GLOBAL_VAR      reduce using rule 60 (control_structures -> if_block else_block .)
    ID              reduce using rule 60 (control_structures -> if_block else_block .)
    LPAREN          reduce using rule 60 (control_structures -> if_block else_block .)
    WHILE           reduce using rule 60 (control_structures -> if_block else_block .)
    CASE            reduce using rule 60 (control_structures -> if_block else_block .)
    DEF             reduce using rule 60 (control_structures -> if_block else_block .)
    PRINT           reduce using rule 60 (control_structures -> if_block else_block .)
    PUTS            reduce using rule 60 (control_structures -> if_block else_block .)
    P               reduce using rule 60 (control_structures -> if_block else_block .)
    NUMBER          reduce using rule 60 (control_structures -> if_block else_block .)
    STRING          reduce using rule 60 (control_structures -> if_block else_block .)
    IF              reduce using rule 60 (control_structures -> if_block else_block .)
    LBRACKET        reduce using rule 60 (control_structures -> if_block else_block .)
    LBRACE          reduce using rule 60 (control_structures -> if_block else_block .)
    SET             reduce using rule 60 (control_structures -> if_block else_block .)
    $end            reduce using rule 60 (control_structures -> if_block else_block .)
    END             reduce using rule 60 (control_structures -> if_block else_block .)
    ELSE            reduce using rule 60 (control_structures -> if_block else_block .)
    ELSIF           reduce using rule 60 (control_structures -> if_block else_block .)
    WHEN            reduce using rule 60 (control_structures -> if_block else_block .)
    RETURN          reduce using rule 60 (control_structures -> if_block else_block .)


state 54

    (65) elsif_blocks -> elsif_block .

    ELSE            reduce using rule 65 (elsif_blocks -> elsif_block .)
    ELSIF           reduce using rule 65 (elsif_blocks -> elsif_block .)
    INSTANCE_VAR    reduce using rule 65 (elsif_blocks -> elsif_block .)
    GLOBAL_VAR      reduce using rule 65 (elsif_blocks -> elsif_block .)
    ID              reduce using rule 65 (elsif_blocks -> elsif_block .)
    LPAREN          reduce using rule 65 (elsif_blocks -> elsif_block .)
    WHILE           reduce using rule 65 (elsif_blocks -> elsif_block .)
    CASE            reduce using rule 65 (elsif_blocks -> elsif_block .)
    DEF             reduce using rule 65 (elsif_blocks -> elsif_block .)
    PRINT           reduce using rule 65 (elsif_blocks -> elsif_block .)
    PUTS            reduce using rule 65 (elsif_blocks -> elsif_block .)
    P               reduce using rule 65 (elsif_blocks -> elsif_block .)
    NUMBER          reduce using rule 65 (elsif_blocks -> elsif_block .)
    STRING          reduce using rule 65 (elsif_blocks -> elsif_block .)
    IF              reduce using rule 65 (elsif_blocks -> elsif_block .)
    LBRACKET        reduce using rule 65 (elsif_blocks -> elsif_block .)
    LBRACE          reduce using rule 65 (elsif_blocks -> elsif_block .)
    SET             reduce using rule 65 (elsif_blocks -> elsif_block .)
    $end            reduce using rule 65 (elsif_blocks -> elsif_block .)
    END             reduce using rule 65 (elsif_blocks -> elsif_block .)
    WHEN            reduce using rule 65 (elsif_blocks -> elsif_block .)
    RETURN          reduce using rule 65 (elsif_blocks -> elsif_block .)


state 55

    (69) else_block -> ELSE . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 106
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 56

    (67) elsif_block -> ELSIF . conditions RPAREN codigo
    (68) elsif_block -> ELSIF . LPAREN conditions RPAREN codigo
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 108
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 107
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 57

    (70) while_loop -> WHILE conditions . codigo END
    (72) while_loop -> WHILE conditions . DO codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    DO              shift and go to state 110
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 109
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 58

    (71) while_loop -> WHILE LPAREN . conditions RPAREN codigo END
    (73) while_loop -> WHILE LPAREN . conditions RPAREN DO codigo END
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 111
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 59

    (44) conditions -> condition .
    (45) conditions -> condition . conector conditions
    (46) conditions -> condition . conector LPAREN conditions RPAREN
    (49) conector -> . AND
    (50) conector -> . OR

    DO              reduce using rule 44 (conditions -> condition .)
    INSTANCE_VAR    reduce using rule 44 (conditions -> condition .)
    GLOBAL_VAR      reduce using rule 44 (conditions -> condition .)
    ID              reduce using rule 44 (conditions -> condition .)
    LPAREN          reduce using rule 44 (conditions -> condition .)
    WHILE           reduce using rule 44 (conditions -> condition .)
    CASE            reduce using rule 44 (conditions -> condition .)
    DEF             reduce using rule 44 (conditions -> condition .)
    PRINT           reduce using rule 44 (conditions -> condition .)
    PUTS            reduce using rule 44 (conditions -> condition .)
    P               reduce using rule 44 (conditions -> condition .)
    NUMBER          reduce using rule 44 (conditions -> condition .)
    STRING          reduce using rule 44 (conditions -> condition .)
    IF              reduce using rule 44 (conditions -> condition .)
    LBRACKET        reduce using rule 44 (conditions -> condition .)
    LBRACE          reduce using rule 44 (conditions -> condition .)
    SET             reduce using rule 44 (conditions -> condition .)
    $end            reduce using rule 44 (conditions -> condition .)
    END             reduce using rule 44 (conditions -> condition .)
    ELSE            reduce using rule 44 (conditions -> condition .)
    ELSIF           reduce using rule 44 (conditions -> condition .)
    WHEN            reduce using rule 44 (conditions -> condition .)
    RETURN          reduce using rule 44 (conditions -> condition .)
    RPAREN          reduce using rule 44 (conditions -> condition .)
    AND             shift and go to state 113
    OR              shift and go to state 114

    conector                       shift and go to state 112

state 60

    (47) condition -> value . operComp value
    (48) condition -> value . operComp aritmeticExpresion
    (51) operComp -> . LESSTHAN
    (52) operComp -> . GREATERTHAN
    (53) operComp -> . GREATEROREQUAL
    (54) operComp -> . LESSOREQUAL
    (55) operComp -> . EQUAL
    (56) operComp -> . NOTEQUAL

    LESSTHAN        shift and go to state 116
    GREATERTHAN     shift and go to state 117
    GREATEROREQUAL  shift and go to state 118
    LESSOREQUAL     shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121

    operComp                       shift and go to state 115

state 61

    (74) case -> CASE value . whens END
    (75) whens -> . whens when
    (76) whens -> . when
    (77) when -> . WHEN value codigo
    (78) when -> . ELSE codigo

    WHEN            shift and go to state 124
    ELSE            shift and go to state 125

    whens                          shift and go to state 122
    when                           shift and go to state 123

state 62

    (91) p_function_zero_parameter -> DEF ID . LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> DEF ID . LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> DEF ID . LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> DEF ID . LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> DEF ID . LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> DEF ID . LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> DEF ID . LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> DEF ID . LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> DEF ID . LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> DEF ID . LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> DEF ID . LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> DEF ID . LPAREN params RPAREN p_function_control_structures RETURN p_expression END

    LPAREN          shift and go to state 126


state 63

    (124) impression -> PRINT LPAREN . value RPAREN
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 127

state 64

    (125) impression -> PRINT value .

    INSTANCE_VAR    reduce using rule 125 (impression -> PRINT value .)
    GLOBAL_VAR      reduce using rule 125 (impression -> PRINT value .)
    ID              reduce using rule 125 (impression -> PRINT value .)
    LPAREN          reduce using rule 125 (impression -> PRINT value .)
    WHILE           reduce using rule 125 (impression -> PRINT value .)
    CASE            reduce using rule 125 (impression -> PRINT value .)
    DEF             reduce using rule 125 (impression -> PRINT value .)
    PRINT           reduce using rule 125 (impression -> PRINT value .)
    PUTS            reduce using rule 125 (impression -> PRINT value .)
    P               reduce using rule 125 (impression -> PRINT value .)
    NUMBER          reduce using rule 125 (impression -> PRINT value .)
    STRING          reduce using rule 125 (impression -> PRINT value .)
    IF              reduce using rule 125 (impression -> PRINT value .)
    LBRACKET        reduce using rule 125 (impression -> PRINT value .)
    LBRACE          reduce using rule 125 (impression -> PRINT value .)
    SET             reduce using rule 125 (impression -> PRINT value .)
    $end            reduce using rule 125 (impression -> PRINT value .)
    END             reduce using rule 125 (impression -> PRINT value .)
    ELSE            reduce using rule 125 (impression -> PRINT value .)
    ELSIF           reduce using rule 125 (impression -> PRINT value .)
    WHEN            reduce using rule 125 (impression -> PRINT value .)
    RETURN          reduce using rule 125 (impression -> PRINT value .)


state 65

    (126) impression -> PUTS LPAREN . value RPAREN
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 128

state 66

    (127) impression -> PUTS value .

    INSTANCE_VAR    reduce using rule 127 (impression -> PUTS value .)
    GLOBAL_VAR      reduce using rule 127 (impression -> PUTS value .)
    ID              reduce using rule 127 (impression -> PUTS value .)
    LPAREN          reduce using rule 127 (impression -> PUTS value .)
    WHILE           reduce using rule 127 (impression -> PUTS value .)
    CASE            reduce using rule 127 (impression -> PUTS value .)
    DEF             reduce using rule 127 (impression -> PUTS value .)
    PRINT           reduce using rule 127 (impression -> PUTS value .)
    PUTS            reduce using rule 127 (impression -> PUTS value .)
    P               reduce using rule 127 (impression -> PUTS value .)
    NUMBER          reduce using rule 127 (impression -> PUTS value .)
    STRING          reduce using rule 127 (impression -> PUTS value .)
    IF              reduce using rule 127 (impression -> PUTS value .)
    LBRACKET        reduce using rule 127 (impression -> PUTS value .)
    LBRACE          reduce using rule 127 (impression -> PUTS value .)
    SET             reduce using rule 127 (impression -> PUTS value .)
    $end            reduce using rule 127 (impression -> PUTS value .)
    END             reduce using rule 127 (impression -> PUTS value .)
    ELSE            reduce using rule 127 (impression -> PUTS value .)
    ELSIF           reduce using rule 127 (impression -> PUTS value .)
    WHEN            reduce using rule 127 (impression -> PUTS value .)
    RETURN          reduce using rule 127 (impression -> PUTS value .)


state 67

    (128) impression -> P LPAREN . value RPAREN
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 129

state 68

    (129) impression -> P value .

    INSTANCE_VAR    reduce using rule 129 (impression -> P value .)
    GLOBAL_VAR      reduce using rule 129 (impression -> P value .)
    ID              reduce using rule 129 (impression -> P value .)
    LPAREN          reduce using rule 129 (impression -> P value .)
    WHILE           reduce using rule 129 (impression -> P value .)
    CASE            reduce using rule 129 (impression -> P value .)
    DEF             reduce using rule 129 (impression -> P value .)
    PRINT           reduce using rule 129 (impression -> P value .)
    PUTS            reduce using rule 129 (impression -> P value .)
    P               reduce using rule 129 (impression -> P value .)
    NUMBER          reduce using rule 129 (impression -> P value .)
    STRING          reduce using rule 129 (impression -> P value .)
    IF              reduce using rule 129 (impression -> P value .)
    LBRACKET        reduce using rule 129 (impression -> P value .)
    LBRACE          reduce using rule 129 (impression -> P value .)
    SET             reduce using rule 129 (impression -> P value .)
    $end            reduce using rule 129 (impression -> P value .)
    END             reduce using rule 129 (impression -> P value .)
    ELSE            reduce using rule 129 (impression -> P value .)
    ELSIF           reduce using rule 129 (impression -> P value .)
    WHEN            reduce using rule 129 (impression -> P value .)
    RETURN          reduce using rule 129 (impression -> P value .)


state 69

    (61) if_block -> IF conditions . codigo
    (62) if_block -> IF conditions . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 130
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 70

    (63) if_block -> IF LPAREN . conditions RPAREN codigo
    (64) if_block -> IF LPAREN . conditions RPAREN codigo END
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 131
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 71

    (82) array -> LBRACKET RBRACKET .

    INSTANCE_VAR    reduce using rule 82 (array -> LBRACKET RBRACKET .)
    GLOBAL_VAR      reduce using rule 82 (array -> LBRACKET RBRACKET .)
    ID              reduce using rule 82 (array -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 82 (array -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 82 (array -> LBRACKET RBRACKET .)
    CASE            reduce using rule 82 (array -> LBRACKET RBRACKET .)
    DEF             reduce using rule 82 (array -> LBRACKET RBRACKET .)
    PRINT           reduce using rule 82 (array -> LBRACKET RBRACKET .)
    PUTS            reduce using rule 82 (array -> LBRACKET RBRACKET .)
    P               reduce using rule 82 (array -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 82 (array -> LBRACKET RBRACKET .)
    STRING          reduce using rule 82 (array -> LBRACKET RBRACKET .)
    IF              reduce using rule 82 (array -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 82 (array -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 82 (array -> LBRACKET RBRACKET .)
    SET             reduce using rule 82 (array -> LBRACKET RBRACKET .)
    $end            reduce using rule 82 (array -> LBRACKET RBRACKET .)
    END             reduce using rule 82 (array -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 82 (array -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 82 (array -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 82 (array -> LBRACKET RBRACKET .)
    RETURN          reduce using rule 82 (array -> LBRACKET RBRACKET .)


state 72

    (83) array -> LBRACKET values . RBRACKET

    RBRACKET        shift and go to state 132


state 73

    (20) values -> value .
    (21) values -> value . COMMA values

    RBRACKET        reduce using rule 20 (values -> value .)
    COMMA           shift and go to state 133


state 74

    (84) hash -> LBRACE RBRACE .

    INSTANCE_VAR    reduce using rule 84 (hash -> LBRACE RBRACE .)
    GLOBAL_VAR      reduce using rule 84 (hash -> LBRACE RBRACE .)
    ID              reduce using rule 84 (hash -> LBRACE RBRACE .)
    LPAREN          reduce using rule 84 (hash -> LBRACE RBRACE .)
    WHILE           reduce using rule 84 (hash -> LBRACE RBRACE .)
    CASE            reduce using rule 84 (hash -> LBRACE RBRACE .)
    DEF             reduce using rule 84 (hash -> LBRACE RBRACE .)
    PRINT           reduce using rule 84 (hash -> LBRACE RBRACE .)
    PUTS            reduce using rule 84 (hash -> LBRACE RBRACE .)
    P               reduce using rule 84 (hash -> LBRACE RBRACE .)
    NUMBER          reduce using rule 84 (hash -> LBRACE RBRACE .)
    STRING          reduce using rule 84 (hash -> LBRACE RBRACE .)
    IF              reduce using rule 84 (hash -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 84 (hash -> LBRACE RBRACE .)
    LBRACE          reduce using rule 84 (hash -> LBRACE RBRACE .)
    SET             reduce using rule 84 (hash -> LBRACE RBRACE .)
    $end            reduce using rule 84 (hash -> LBRACE RBRACE .)
    END             reduce using rule 84 (hash -> LBRACE RBRACE .)
    ELSE            reduce using rule 84 (hash -> LBRACE RBRACE .)
    ELSIF           reduce using rule 84 (hash -> LBRACE RBRACE .)
    WHEN            reduce using rule 84 (hash -> LBRACE RBRACE .)
    RETURN          reduce using rule 84 (hash -> LBRACE RBRACE .)


state 75

    (85) hash -> LBRACE hash_contents . RBRACE
    (87) hash_contents -> hash_contents . COMMA hash_pair

    RBRACE          shift and go to state 134
    COMMA           shift and go to state 135


state 76

    (86) hash_contents -> hash_pair .

    RBRACE          reduce using rule 86 (hash_contents -> hash_pair .)
    COMMA           reduce using rule 86 (hash_contents -> hash_pair .)


state 77

    (88) hash_pair -> value . COLON value

    COLON           shift and go to state 136


state 78

    (89) set -> SET LPAREN . LBRACKET RBRACKET RPAREN
    (90) set -> SET LPAREN . LBRACKET values RBRACKET RPAREN

    LBRACKET        shift and go to state 137


state 79

    (36) aritmeticExpresion -> aritmeticExpresion operator value .

    PLUS            reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MINUS           reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    TIMES           reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DIVIDE          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MOD             reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    INSTANCE_VAR    reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    GLOBAL_VAR      reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ID              reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LPAREN          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    WHILE           reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    CASE            reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DEF             reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    PRINT           reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    PUTS            reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    P               reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    NUMBER          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    STRING          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    IF              reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LBRACKET        reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LBRACE          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    SET             reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    $end            reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    RPAREN          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    END             reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSE            reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSIF           reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    WHEN            reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    RETURN          reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    COMMA           reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    AND             reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    OR              reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DO              reduce using rule 36 (aritmeticExpresion -> aritmeticExpresion operator value .)


state 80

    (22) assign -> INSTANCE_VAR ASSIGN value .
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (47) condition -> value . operComp value
    (48) condition -> value . operComp aritmeticExpresion
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD
    (51) operComp -> . LESSTHAN
    (52) operComp -> . GREATERTHAN
    (53) operComp -> . GREATEROREQUAL
    (54) operComp -> . LESSOREQUAL
    (55) operComp -> . EQUAL
    (56) operComp -> . NOTEQUAL

    INSTANCE_VAR    reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    ID              reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    LPAREN          reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    WHILE           reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    CASE            reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    DEF             reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    PRINT           reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    PUTS            reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    P               reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    NUMBER          reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    STRING          reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    IF              reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACKET        reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACE          reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    SET             reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    $end            reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    END             reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSE            reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSIF           reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    WHEN            reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    RETURN          reduce using rule 22 (assign -> INSTANCE_VAR ASSIGN value .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESSTHAN        shift and go to state 116
    GREATERTHAN     shift and go to state 117
    GREATEROREQUAL  shift and go to state 118
    LESSOREQUAL     shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121

    operator                       shift and go to state 44
    operComp                       shift and go to state 115

state 81

    (25) assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    INSTANCE_VAR    reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    ID              reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    LPAREN          reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    WHILE           reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    CASE            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    DEF             reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    PRINT           reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    PUTS            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    P               reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    NUMBER          reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    STRING          reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    IF              reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    LBRACKET        reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    LBRACE          reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    SET             reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    $end            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    END             reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    ELSE            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    ELSIF           reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    WHEN            reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    RETURN          reduce using rule 25 (assign -> INSTANCE_VAR ASSIGN aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 82

    (28) assign -> INSTANCE_VAR ASSIGN conditions .

    INSTANCE_VAR    reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    GLOBAL_VAR      reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    ID              reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    LPAREN          reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    WHILE           reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    CASE            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    DEF             reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    PRINT           reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    PUTS            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    P               reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    NUMBER          reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    STRING          reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    IF              reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    LBRACKET        reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    LBRACE          reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    SET             reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    $end            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    END             reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    ELSE            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    ELSIF           reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    WHEN            reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)
    RETURN          reduce using rule 28 (assign -> INSTANCE_VAR ASSIGN conditions .)


state 83

    (31) assign -> INSTANCE_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ID              reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    CASE            reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DEF             reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    P               reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    STRING          reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    IF              reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACE          reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    SET             reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    $end            reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    END             reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHEN            reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    RETURN          reduce using rule 31 (assign -> INSTANCE_VAR ASSIGN data_structure .)


state 84

    (131) data_input -> INSTANCE_VAR ASSIGN GETS . STRING
    (134) data_input -> INSTANCE_VAR ASSIGN GETS . NUMBER

    STRING          shift and go to state 138
    NUMBER          shift and go to state 139


state 85

    (34) aritmeticExpresion -> value operator value .

    PLUS            reduce using rule 34 (aritmeticExpresion -> value operator value .)
    MINUS           reduce using rule 34 (aritmeticExpresion -> value operator value .)
    TIMES           reduce using rule 34 (aritmeticExpresion -> value operator value .)
    DIVIDE          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    MOD             reduce using rule 34 (aritmeticExpresion -> value operator value .)
    INSTANCE_VAR    reduce using rule 34 (aritmeticExpresion -> value operator value .)
    GLOBAL_VAR      reduce using rule 34 (aritmeticExpresion -> value operator value .)
    ID              reduce using rule 34 (aritmeticExpresion -> value operator value .)
    LPAREN          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    WHILE           reduce using rule 34 (aritmeticExpresion -> value operator value .)
    CASE            reduce using rule 34 (aritmeticExpresion -> value operator value .)
    DEF             reduce using rule 34 (aritmeticExpresion -> value operator value .)
    PRINT           reduce using rule 34 (aritmeticExpresion -> value operator value .)
    PUTS            reduce using rule 34 (aritmeticExpresion -> value operator value .)
    P               reduce using rule 34 (aritmeticExpresion -> value operator value .)
    NUMBER          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    STRING          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    IF              reduce using rule 34 (aritmeticExpresion -> value operator value .)
    LBRACKET        reduce using rule 34 (aritmeticExpresion -> value operator value .)
    LBRACE          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    SET             reduce using rule 34 (aritmeticExpresion -> value operator value .)
    $end            reduce using rule 34 (aritmeticExpresion -> value operator value .)
    RPAREN          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    END             reduce using rule 34 (aritmeticExpresion -> value operator value .)
    ELSE            reduce using rule 34 (aritmeticExpresion -> value operator value .)
    ELSIF           reduce using rule 34 (aritmeticExpresion -> value operator value .)
    WHEN            reduce using rule 34 (aritmeticExpresion -> value operator value .)
    RETURN          reduce using rule 34 (aritmeticExpresion -> value operator value .)
    COMMA           reduce using rule 34 (aritmeticExpresion -> value operator value .)
    AND             reduce using rule 34 (aritmeticExpresion -> value operator value .)
    OR              reduce using rule 34 (aritmeticExpresion -> value operator value .)
    DO              reduce using rule 34 (aritmeticExpresion -> value operator value .)


state 86

    (35) aritmeticExpresion -> value operator function_call .

    PLUS            reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    MINUS           reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    TIMES           reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    DIVIDE          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    MOD             reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    INSTANCE_VAR    reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    GLOBAL_VAR      reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    ID              reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    LPAREN          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    WHILE           reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    CASE            reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    DEF             reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    PRINT           reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    PUTS            reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    P               reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    NUMBER          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    STRING          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    IF              reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    LBRACKET        reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    LBRACE          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    SET             reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    $end            reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    RPAREN          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    END             reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    ELSE            reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    ELSIF           reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    WHEN            reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    RETURN          reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    COMMA           reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    AND             reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    OR              reduce using rule 35 (aritmeticExpresion -> value operator function_call .)
    DO              reduce using rule 35 (aritmeticExpresion -> value operator function_call .)


state 87

    (19) value -> ID .
    (117) function_call -> ID . LPAREN RPAREN
    (118) function_call -> ID . LPAREN params RPAREN
    (119) function_call -> ID . LPAREN param RPAREN

  ! shift/reduce conflict for LPAREN resolved as shift
    PLUS            reduce using rule 19 (value -> ID .)
    MINUS           reduce using rule 19 (value -> ID .)
    TIMES           reduce using rule 19 (value -> ID .)
    DIVIDE          reduce using rule 19 (value -> ID .)
    MOD             reduce using rule 19 (value -> ID .)
    INSTANCE_VAR    reduce using rule 19 (value -> ID .)
    GLOBAL_VAR      reduce using rule 19 (value -> ID .)
    ID              reduce using rule 19 (value -> ID .)
    WHILE           reduce using rule 19 (value -> ID .)
    CASE            reduce using rule 19 (value -> ID .)
    DEF             reduce using rule 19 (value -> ID .)
    PRINT           reduce using rule 19 (value -> ID .)
    PUTS            reduce using rule 19 (value -> ID .)
    P               reduce using rule 19 (value -> ID .)
    NUMBER          reduce using rule 19 (value -> ID .)
    STRING          reduce using rule 19 (value -> ID .)
    IF              reduce using rule 19 (value -> ID .)
    LBRACKET        reduce using rule 19 (value -> ID .)
    LBRACE          reduce using rule 19 (value -> ID .)
    SET             reduce using rule 19 (value -> ID .)
    $end            reduce using rule 19 (value -> ID .)
    RPAREN          reduce using rule 19 (value -> ID .)
    END             reduce using rule 19 (value -> ID .)
    ELSE            reduce using rule 19 (value -> ID .)
    ELSIF           reduce using rule 19 (value -> ID .)
    WHEN            reduce using rule 19 (value -> ID .)
    RETURN          reduce using rule 19 (value -> ID .)
    COMMA           reduce using rule 19 (value -> ID .)
    AND             reduce using rule 19 (value -> ID .)
    OR              reduce using rule 19 (value -> ID .)
    DO              reduce using rule 19 (value -> ID .)
    LPAREN          shift and go to state 47

  ! LPAREN          [ reduce using rule 19 (value -> ID .) ]


state 88

    (23) assign -> GLOBAL_VAR ASSIGN value .
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (47) condition -> value . operComp value
    (48) condition -> value . operComp aritmeticExpresion
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD
    (51) operComp -> . LESSTHAN
    (52) operComp -> . GREATERTHAN
    (53) operComp -> . GREATEROREQUAL
    (54) operComp -> . LESSOREQUAL
    (55) operComp -> . EQUAL
    (56) operComp -> . NOTEQUAL

    INSTANCE_VAR    reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    ID              reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    LPAREN          reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    WHILE           reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    CASE            reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    DEF             reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    PRINT           reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    PUTS            reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    P               reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    NUMBER          reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    STRING          reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    IF              reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACKET        reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACE          reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    SET             reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    $end            reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    END             reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSE            reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSIF           reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    WHEN            reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    RETURN          reduce using rule 23 (assign -> GLOBAL_VAR ASSIGN value .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESSTHAN        shift and go to state 116
    GREATERTHAN     shift and go to state 117
    GREATEROREQUAL  shift and go to state 118
    LESSOREQUAL     shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121

    operator                       shift and go to state 44
    operComp                       shift and go to state 115

state 89

    (26) assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    INSTANCE_VAR    reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    ID              reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    LPAREN          reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    WHILE           reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    CASE            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    DEF             reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    PRINT           reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    PUTS            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    P               reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    NUMBER          reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    STRING          reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    IF              reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    LBRACKET        reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    LBRACE          reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    SET             reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    $end            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    END             reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    ELSE            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    ELSIF           reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    WHEN            reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    RETURN          reduce using rule 26 (assign -> GLOBAL_VAR ASSIGN aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 90

    (29) assign -> GLOBAL_VAR ASSIGN conditions .

    INSTANCE_VAR    reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    GLOBAL_VAR      reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    ID              reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    LPAREN          reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    WHILE           reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    CASE            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    DEF             reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    PRINT           reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    PUTS            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    P               reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    NUMBER          reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    STRING          reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    IF              reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    LBRACKET        reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    LBRACE          reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    SET             reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    $end            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    END             reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    ELSE            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    ELSIF           reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    WHEN            reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)
    RETURN          reduce using rule 29 (assign -> GLOBAL_VAR ASSIGN conditions .)


state 91

    (32) assign -> GLOBAL_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ID              reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    CASE            reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DEF             reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    P               reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    STRING          reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    IF              reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACE          reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    SET             reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    $end            reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    END             reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHEN            reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    RETURN          reduce using rule 32 (assign -> GLOBAL_VAR ASSIGN data_structure .)


state 92

    (132) data_input -> GLOBAL_VAR ASSIGN GETS . STRING
    (135) data_input -> GLOBAL_VAR ASSIGN GETS . NUMBER

    STRING          shift and go to state 140
    NUMBER          shift and go to state 141


state 93

    (24) assign -> ID ASSIGN value .
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (47) condition -> value . operComp value
    (48) condition -> value . operComp aritmeticExpresion
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD
    (51) operComp -> . LESSTHAN
    (52) operComp -> . GREATERTHAN
    (53) operComp -> . GREATEROREQUAL
    (54) operComp -> . LESSOREQUAL
    (55) operComp -> . EQUAL
    (56) operComp -> . NOTEQUAL

    INSTANCE_VAR    reduce using rule 24 (assign -> ID ASSIGN value .)
    GLOBAL_VAR      reduce using rule 24 (assign -> ID ASSIGN value .)
    ID              reduce using rule 24 (assign -> ID ASSIGN value .)
    LPAREN          reduce using rule 24 (assign -> ID ASSIGN value .)
    WHILE           reduce using rule 24 (assign -> ID ASSIGN value .)
    CASE            reduce using rule 24 (assign -> ID ASSIGN value .)
    DEF             reduce using rule 24 (assign -> ID ASSIGN value .)
    PRINT           reduce using rule 24 (assign -> ID ASSIGN value .)
    PUTS            reduce using rule 24 (assign -> ID ASSIGN value .)
    P               reduce using rule 24 (assign -> ID ASSIGN value .)
    NUMBER          reduce using rule 24 (assign -> ID ASSIGN value .)
    STRING          reduce using rule 24 (assign -> ID ASSIGN value .)
    IF              reduce using rule 24 (assign -> ID ASSIGN value .)
    LBRACKET        reduce using rule 24 (assign -> ID ASSIGN value .)
    LBRACE          reduce using rule 24 (assign -> ID ASSIGN value .)
    SET             reduce using rule 24 (assign -> ID ASSIGN value .)
    $end            reduce using rule 24 (assign -> ID ASSIGN value .)
    END             reduce using rule 24 (assign -> ID ASSIGN value .)
    ELSE            reduce using rule 24 (assign -> ID ASSIGN value .)
    ELSIF           reduce using rule 24 (assign -> ID ASSIGN value .)
    WHEN            reduce using rule 24 (assign -> ID ASSIGN value .)
    RETURN          reduce using rule 24 (assign -> ID ASSIGN value .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42
    LESSTHAN        shift and go to state 116
    GREATERTHAN     shift and go to state 117
    GREATEROREQUAL  shift and go to state 118
    LESSOREQUAL     shift and go to state 119
    EQUAL           shift and go to state 120
    NOTEQUAL        shift and go to state 121

    operator                       shift and go to state 44
    operComp                       shift and go to state 115

state 94

    (27) assign -> ID ASSIGN aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    INSTANCE_VAR    reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    ID              reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    LPAREN          reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    WHILE           reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    CASE            reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    DEF             reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    PRINT           reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    PUTS            reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    P               reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    NUMBER          reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    STRING          reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    IF              reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    LBRACKET        reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    LBRACE          reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    SET             reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    $end            reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    END             reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    ELSE            reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    ELSIF           reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    WHEN            reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    RETURN          reduce using rule 27 (assign -> ID ASSIGN aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 95

    (30) assign -> ID ASSIGN conditions .

    INSTANCE_VAR    reduce using rule 30 (assign -> ID ASSIGN conditions .)
    GLOBAL_VAR      reduce using rule 30 (assign -> ID ASSIGN conditions .)
    ID              reduce using rule 30 (assign -> ID ASSIGN conditions .)
    LPAREN          reduce using rule 30 (assign -> ID ASSIGN conditions .)
    WHILE           reduce using rule 30 (assign -> ID ASSIGN conditions .)
    CASE            reduce using rule 30 (assign -> ID ASSIGN conditions .)
    DEF             reduce using rule 30 (assign -> ID ASSIGN conditions .)
    PRINT           reduce using rule 30 (assign -> ID ASSIGN conditions .)
    PUTS            reduce using rule 30 (assign -> ID ASSIGN conditions .)
    P               reduce using rule 30 (assign -> ID ASSIGN conditions .)
    NUMBER          reduce using rule 30 (assign -> ID ASSIGN conditions .)
    STRING          reduce using rule 30 (assign -> ID ASSIGN conditions .)
    IF              reduce using rule 30 (assign -> ID ASSIGN conditions .)
    LBRACKET        reduce using rule 30 (assign -> ID ASSIGN conditions .)
    LBRACE          reduce using rule 30 (assign -> ID ASSIGN conditions .)
    SET             reduce using rule 30 (assign -> ID ASSIGN conditions .)
    $end            reduce using rule 30 (assign -> ID ASSIGN conditions .)
    END             reduce using rule 30 (assign -> ID ASSIGN conditions .)
    ELSE            reduce using rule 30 (assign -> ID ASSIGN conditions .)
    ELSIF           reduce using rule 30 (assign -> ID ASSIGN conditions .)
    WHEN            reduce using rule 30 (assign -> ID ASSIGN conditions .)
    RETURN          reduce using rule 30 (assign -> ID ASSIGN conditions .)


state 96

    (33) assign -> ID ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    ID              reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    LPAREN          reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    WHILE           reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    CASE            reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    DEF             reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    PRINT           reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    PUTS            reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    P               reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    NUMBER          reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    STRING          reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    IF              reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    LBRACKET        reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    LBRACE          reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    SET             reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    $end            reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    END             reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    ELSE            reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    ELSIF           reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    WHEN            reduce using rule 33 (assign -> ID ASSIGN data_structure .)
    RETURN          reduce using rule 33 (assign -> ID ASSIGN data_structure .)


state 97

    (130) data_input -> ID ASSIGN GETS . STRING
    (133) data_input -> ID ASSIGN GETS . NUMBER

    STRING          shift and go to state 142
    NUMBER          shift and go to state 143


state 98

    (117) function_call -> ID LPAREN RPAREN .

    INSTANCE_VAR    reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    GLOBAL_VAR      reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    ID              reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    LPAREN          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    WHILE           reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    CASE            reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    DEF             reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    PRINT           reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    PUTS            reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    P               reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    NUMBER          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    STRING          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    IF              reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    LBRACKET        reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    LBRACE          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    SET             reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    $end            reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    RPAREN          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    END             reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    ELSE            reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    ELSIF           reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    WHEN            reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    RETURN          reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    AND             reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    OR              reduce using rule 117 (function_call -> ID LPAREN RPAREN .)
    DO              reduce using rule 117 (function_call -> ID LPAREN RPAREN .)


state 99

    (118) function_call -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 144


state 100

    (119) function_call -> ID LPAREN param . RPAREN

    RPAREN          shift and go to state 145


state 101

    (122) params -> value . COMMA value
    (120) param -> value .
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    COMMA           shift and go to state 146
    RPAREN          reduce using rule 120 (param -> value .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 44

state 102

    (123) params -> aritmeticExpresion . COMMA aritmeticExpresion
    (121) param -> aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    COMMA           shift and go to state 147
    RPAREN          reduce using rule 121 (param -> aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 103

    (37) aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .
    (38) aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    INSTANCE_VAR    reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    GLOBAL_VAR      reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    ID              reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    LPAREN          reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    WHILE           reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    CASE            reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    DEF             reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    PRINT           reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    PUTS            reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    P               reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    NUMBER          reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    STRING          reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    IF              reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    LBRACKET        reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    LBRACE          reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    SET             reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    $end            reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    RPAREN          reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    END             reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    ELSE            reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    ELSIF           reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    WHEN            reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    RETURN          reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    COMMA           reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    AND             reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    OR              reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    DO              reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

  ! PLUS            [ reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .) ]
  ! MINUS           [ reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .) ]
  ! TIMES           [ reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .) ]
  ! DIVIDE          [ reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .) ]
  ! MOD             [ reduce using rule 37 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN .) ]

    operator                       shift and go to state 148

state 104

    (59) control_structures -> if_block elsif_blocks else_block .

    INSTANCE_VAR    reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    GLOBAL_VAR      reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    ID              reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    LPAREN          reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    WHILE           reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    CASE            reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    DEF             reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    PRINT           reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    PUTS            reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    P               reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    NUMBER          reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    STRING          reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    IF              reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    LBRACKET        reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    LBRACE          reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    SET             reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    $end            reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    END             reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    ELSE            reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    ELSIF           reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    WHEN            reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)
    RETURN          reduce using rule 59 (control_structures -> if_block elsif_blocks else_block .)


state 105

    (66) elsif_blocks -> elsif_blocks elsif_block .

    ELSE            reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSIF           reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    INSTANCE_VAR    reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    GLOBAL_VAR      reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    ID              reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    LPAREN          reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    WHILE           reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    CASE            reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    DEF             reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    PRINT           reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    PUTS            reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    P               reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    NUMBER          reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    STRING          reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    IF              reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    LBRACKET        reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    LBRACE          reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    SET             reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    $end            reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    END             reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    WHEN            reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)
    RETURN          reduce using rule 66 (elsif_blocks -> elsif_blocks elsif_block .)


state 106

    (69) else_block -> ELSE codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 149
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 107

    (67) elsif_block -> ELSIF conditions . RPAREN codigo

    RPAREN          shift and go to state 150


state 108

    (68) elsif_block -> ELSIF LPAREN . conditions RPAREN codigo
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 151
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 109

    (70) while_loop -> WHILE conditions codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 152
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 110

    (72) while_loop -> WHILE conditions DO . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 153
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 111

    (71) while_loop -> WHILE LPAREN conditions . RPAREN codigo END
    (73) while_loop -> WHILE LPAREN conditions . RPAREN DO codigo END

    RPAREN          shift and go to state 154


state 112

    (45) conditions -> condition conector . conditions
    (46) conditions -> condition conector . LPAREN conditions RPAREN
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 156
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    condition                      shift and go to state 59
    conditions                     shift and go to state 155
    value                          shift and go to state 60

state 113

    (49) conector -> AND .

    LPAREN          reduce using rule 49 (conector -> AND .)
    NUMBER          reduce using rule 49 (conector -> AND .)
    STRING          reduce using rule 49 (conector -> AND .)
    INSTANCE_VAR    reduce using rule 49 (conector -> AND .)
    GLOBAL_VAR      reduce using rule 49 (conector -> AND .)
    ID              reduce using rule 49 (conector -> AND .)


state 114

    (50) conector -> OR .

    LPAREN          reduce using rule 50 (conector -> OR .)
    NUMBER          reduce using rule 50 (conector -> OR .)
    STRING          reduce using rule 50 (conector -> OR .)
    INSTANCE_VAR    reduce using rule 50 (conector -> OR .)
    GLOBAL_VAR      reduce using rule 50 (conector -> OR .)
    ID              reduce using rule 50 (conector -> OR .)


state 115

    (47) condition -> value operComp . value
    (48) condition -> value operComp . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    value                          shift and go to state 157
    aritmeticExpresion             shift and go to state 158

state 116

    (51) operComp -> LESSTHAN .

    NUMBER          reduce using rule 51 (operComp -> LESSTHAN .)
    STRING          reduce using rule 51 (operComp -> LESSTHAN .)
    INSTANCE_VAR    reduce using rule 51 (operComp -> LESSTHAN .)
    GLOBAL_VAR      reduce using rule 51 (operComp -> LESSTHAN .)
    ID              reduce using rule 51 (operComp -> LESSTHAN .)
    LPAREN          reduce using rule 51 (operComp -> LESSTHAN .)


state 117

    (52) operComp -> GREATERTHAN .

    NUMBER          reduce using rule 52 (operComp -> GREATERTHAN .)
    STRING          reduce using rule 52 (operComp -> GREATERTHAN .)
    INSTANCE_VAR    reduce using rule 52 (operComp -> GREATERTHAN .)
    GLOBAL_VAR      reduce using rule 52 (operComp -> GREATERTHAN .)
    ID              reduce using rule 52 (operComp -> GREATERTHAN .)
    LPAREN          reduce using rule 52 (operComp -> GREATERTHAN .)


state 118

    (53) operComp -> GREATEROREQUAL .

    NUMBER          reduce using rule 53 (operComp -> GREATEROREQUAL .)
    STRING          reduce using rule 53 (operComp -> GREATEROREQUAL .)
    INSTANCE_VAR    reduce using rule 53 (operComp -> GREATEROREQUAL .)
    GLOBAL_VAR      reduce using rule 53 (operComp -> GREATEROREQUAL .)
    ID              reduce using rule 53 (operComp -> GREATEROREQUAL .)
    LPAREN          reduce using rule 53 (operComp -> GREATEROREQUAL .)


state 119

    (54) operComp -> LESSOREQUAL .

    NUMBER          reduce using rule 54 (operComp -> LESSOREQUAL .)
    STRING          reduce using rule 54 (operComp -> LESSOREQUAL .)
    INSTANCE_VAR    reduce using rule 54 (operComp -> LESSOREQUAL .)
    GLOBAL_VAR      reduce using rule 54 (operComp -> LESSOREQUAL .)
    ID              reduce using rule 54 (operComp -> LESSOREQUAL .)
    LPAREN          reduce using rule 54 (operComp -> LESSOREQUAL .)


state 120

    (55) operComp -> EQUAL .

    NUMBER          reduce using rule 55 (operComp -> EQUAL .)
    STRING          reduce using rule 55 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 55 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 55 (operComp -> EQUAL .)
    ID              reduce using rule 55 (operComp -> EQUAL .)
    LPAREN          reduce using rule 55 (operComp -> EQUAL .)


state 121

    (56) operComp -> NOTEQUAL .

    NUMBER          reduce using rule 56 (operComp -> NOTEQUAL .)
    STRING          reduce using rule 56 (operComp -> NOTEQUAL .)
    INSTANCE_VAR    reduce using rule 56 (operComp -> NOTEQUAL .)
    GLOBAL_VAR      reduce using rule 56 (operComp -> NOTEQUAL .)
    ID              reduce using rule 56 (operComp -> NOTEQUAL .)
    LPAREN          reduce using rule 56 (operComp -> NOTEQUAL .)


state 122

    (74) case -> CASE value whens . END
    (75) whens -> whens . when
    (77) when -> . WHEN value codigo
    (78) when -> . ELSE codigo

    END             shift and go to state 159
    WHEN            shift and go to state 124
    ELSE            shift and go to state 125

    when                           shift and go to state 160

state 123

    (76) whens -> when .

    END             reduce using rule 76 (whens -> when .)
    WHEN            reduce using rule 76 (whens -> when .)
    ELSE            reduce using rule 76 (whens -> when .)


state 124

    (77) when -> WHEN . value codigo
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 161

state 125

    (78) when -> ELSE . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 162
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 126

    (91) p_function_zero_parameter -> DEF ID LPAREN . RPAREN codigo END
    (92) p_function_one_parameter -> DEF ID LPAREN . param RPAREN codigo END
    (93) p_function_one_parameter -> DEF ID LPAREN . param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> DEF ID LPAREN . param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> DEF ID LPAREN . param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> DEF ID LPAREN . param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> DEF ID LPAREN . param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> DEF ID LPAREN . params RPAREN codigo END
    (99) p_function_two_parameter -> DEF ID LPAREN . params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> DEF ID LPAREN . params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> DEF ID LPAREN . params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> DEF ID LPAREN . params RPAREN p_function_control_structures RETURN p_expression END
    (120) param -> . value
    (121) param -> . aritmeticExpresion
    (122) params -> . value COMMA value
    (123) params -> . aritmeticExpresion COMMA aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    RPAREN          shift and go to state 163
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    param                          shift and go to state 164
    params                         shift and go to state 165
    value                          shift and go to state 166
    aritmeticExpresion             shift and go to state 167

state 127

    (124) impression -> PRINT LPAREN value . RPAREN

    RPAREN          shift and go to state 168


state 128

    (126) impression -> PUTS LPAREN value . RPAREN

    RPAREN          shift and go to state 169


state 129

    (128) impression -> P LPAREN value . RPAREN

    RPAREN          shift and go to state 170


state 130

    (61) if_block -> IF conditions codigo .
    (62) if_block -> IF conditions codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    ELSE            reduce using rule 61 (if_block -> IF conditions codigo .)
    ELSIF           reduce using rule 61 (if_block -> IF conditions codigo .)
    $end            reduce using rule 61 (if_block -> IF conditions codigo .)
    WHEN            reduce using rule 61 (if_block -> IF conditions codigo .)
    RETURN          reduce using rule 61 (if_block -> IF conditions codigo .)
    END             shift and go to state 171
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

  ! INSTANCE_VAR    [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! ID              [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! LPAREN          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! WHILE           [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! CASE            [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! DEF             [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! PRINT           [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! PUTS            [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! P               [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! NUMBER          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! STRING          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! IF              [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! LBRACKET        [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! LBRACE          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! SET             [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! END             [ reduce using rule 61 (if_block -> IF conditions codigo .) ]

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 131

    (63) if_block -> IF LPAREN conditions . RPAREN codigo
    (64) if_block -> IF LPAREN conditions . RPAREN codigo END

    RPAREN          shift and go to state 172


state 132

    (83) array -> LBRACKET values RBRACKET .

    INSTANCE_VAR    reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    GLOBAL_VAR      reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    ID              reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    LPAREN          reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    WHILE           reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    CASE            reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    DEF             reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    PRINT           reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    PUTS            reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    P               reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    NUMBER          reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    STRING          reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    IF              reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    LBRACKET        reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    LBRACE          reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    SET             reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    $end            reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    END             reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    ELSE            reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    ELSIF           reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    WHEN            reduce using rule 83 (array -> LBRACKET values RBRACKET .)
    RETURN          reduce using rule 83 (array -> LBRACKET values RBRACKET .)


state 133

    (21) values -> value COMMA . values
    (20) values -> . value
    (21) values -> . value COMMA values
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 73
    values                         shift and go to state 173

state 134

    (85) hash -> LBRACE hash_contents RBRACE .

    INSTANCE_VAR    reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    GLOBAL_VAR      reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    ID              reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    LPAREN          reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    WHILE           reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    CASE            reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    DEF             reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    PRINT           reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    PUTS            reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    P               reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    NUMBER          reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    STRING          reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    IF              reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    LBRACKET        reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    LBRACE          reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    SET             reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    $end            reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    END             reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    ELSE            reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    ELSIF           reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    WHEN            reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)
    RETURN          reduce using rule 85 (hash -> LBRACE hash_contents RBRACE .)


state 135

    (87) hash_contents -> hash_contents COMMA . hash_pair
    (88) hash_pair -> . value COLON value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    hash_pair                      shift and go to state 174
    value                          shift and go to state 77

state 136

    (88) hash_pair -> value COLON . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 175

state 137

    (89) set -> SET LPAREN LBRACKET . RBRACKET RPAREN
    (90) set -> SET LPAREN LBRACKET . values RBRACKET RPAREN
    (20) values -> . value
    (21) values -> . value COMMA values
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    RBRACKET        shift and go to state 176
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    values                         shift and go to state 177
    value                          shift and go to state 73

state 138

    (131) data_input -> INSTANCE_VAR ASSIGN GETS STRING .

    INSTANCE_VAR    reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    GLOBAL_VAR      reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    ID              reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    LPAREN          reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    WHILE           reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    CASE            reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    DEF             reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    PRINT           reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    PUTS            reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    P               reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    NUMBER          reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    STRING          reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    IF              reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    LBRACKET        reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    LBRACE          reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    SET             reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    $end            reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    END             reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    ELSE            reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    ELSIF           reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    WHEN            reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)
    RETURN          reduce using rule 131 (data_input -> INSTANCE_VAR ASSIGN GETS STRING .)


state 139

    (134) data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .

    INSTANCE_VAR    reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    GLOBAL_VAR      reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    ID              reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    LPAREN          reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    WHILE           reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    CASE            reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    DEF             reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    PRINT           reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    PUTS            reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    P               reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    NUMBER          reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    STRING          reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    IF              reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    LBRACKET        reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    LBRACE          reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    SET             reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    $end            reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    END             reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    ELSE            reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    ELSIF           reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    WHEN            reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)
    RETURN          reduce using rule 134 (data_input -> INSTANCE_VAR ASSIGN GETS NUMBER .)


state 140

    (132) data_input -> GLOBAL_VAR ASSIGN GETS STRING .

    INSTANCE_VAR    reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    GLOBAL_VAR      reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    ID              reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    LPAREN          reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    WHILE           reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    CASE            reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    DEF             reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    PRINT           reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    PUTS            reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    P               reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    NUMBER          reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    STRING          reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    IF              reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    LBRACKET        reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    LBRACE          reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    SET             reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    $end            reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    END             reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    ELSE            reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    ELSIF           reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    WHEN            reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)
    RETURN          reduce using rule 132 (data_input -> GLOBAL_VAR ASSIGN GETS STRING .)


state 141

    (135) data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .

    INSTANCE_VAR    reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    GLOBAL_VAR      reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    ID              reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    LPAREN          reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    WHILE           reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    CASE            reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    DEF             reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    PRINT           reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    PUTS            reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    P               reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    NUMBER          reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    STRING          reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    IF              reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    LBRACKET        reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    LBRACE          reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    SET             reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    $end            reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    END             reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    ELSE            reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    ELSIF           reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    WHEN            reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)
    RETURN          reduce using rule 135 (data_input -> GLOBAL_VAR ASSIGN GETS NUMBER .)


state 142

    (130) data_input -> ID ASSIGN GETS STRING .

    INSTANCE_VAR    reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    GLOBAL_VAR      reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    ID              reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    LPAREN          reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    WHILE           reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    CASE            reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    DEF             reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    PRINT           reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    PUTS            reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    P               reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    NUMBER          reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    STRING          reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    IF              reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    LBRACKET        reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    LBRACE          reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    SET             reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    $end            reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    END             reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    ELSE            reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    ELSIF           reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    WHEN            reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)
    RETURN          reduce using rule 130 (data_input -> ID ASSIGN GETS STRING .)


state 143

    (133) data_input -> ID ASSIGN GETS NUMBER .

    INSTANCE_VAR    reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    GLOBAL_VAR      reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    ID              reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    LPAREN          reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    WHILE           reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    CASE            reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    DEF             reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    PRINT           reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    PUTS            reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    P               reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    NUMBER          reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    STRING          reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    IF              reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    LBRACKET        reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    LBRACE          reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    SET             reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    $end            reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    END             reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    ELSE            reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    ELSIF           reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    WHEN            reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)
    RETURN          reduce using rule 133 (data_input -> ID ASSIGN GETS NUMBER .)


state 144

    (118) function_call -> ID LPAREN params RPAREN .

    INSTANCE_VAR    reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    GLOBAL_VAR      reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    ID              reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    LPAREN          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    WHILE           reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    CASE            reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    DEF             reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    PRINT           reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    PUTS            reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    P               reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    NUMBER          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    STRING          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    IF              reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    LBRACKET        reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    LBRACE          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    SET             reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    $end            reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    PLUS            reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    MINUS           reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    TIMES           reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    DIVIDE          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    MOD             reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    RPAREN          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    END             reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    ELSE            reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    ELSIF           reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    WHEN            reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    RETURN          reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    COMMA           reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    AND             reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    OR              reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)
    DO              reduce using rule 118 (function_call -> ID LPAREN params RPAREN .)


state 145

    (119) function_call -> ID LPAREN param RPAREN .

    INSTANCE_VAR    reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    GLOBAL_VAR      reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    ID              reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    LPAREN          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    WHILE           reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    CASE            reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    DEF             reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    PRINT           reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    PUTS            reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    P               reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    NUMBER          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    STRING          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    IF              reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    LBRACKET        reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    LBRACE          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    SET             reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    $end            reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    PLUS            reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    MINUS           reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    TIMES           reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    DIVIDE          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    MOD             reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    RPAREN          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    END             reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    ELSE            reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    ELSIF           reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    WHEN            reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    RETURN          reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    COMMA           reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    AND             reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    OR              reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)
    DO              reduce using rule 119 (function_call -> ID LPAREN param RPAREN .)


state 146

    (122) params -> value COMMA . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 178

state 147

    (123) params -> aritmeticExpresion COMMA . aritmeticExpresion
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 19
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    aritmeticExpresion             shift and go to state 179
    value                          shift and go to state 16

state 148

    (38) aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator . value
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    value                          shift and go to state 180

state 149

    (69) else_block -> ELSE codigo END .

    INSTANCE_VAR    reduce using rule 69 (else_block -> ELSE codigo END .)
    GLOBAL_VAR      reduce using rule 69 (else_block -> ELSE codigo END .)
    ID              reduce using rule 69 (else_block -> ELSE codigo END .)
    LPAREN          reduce using rule 69 (else_block -> ELSE codigo END .)
    WHILE           reduce using rule 69 (else_block -> ELSE codigo END .)
    CASE            reduce using rule 69 (else_block -> ELSE codigo END .)
    DEF             reduce using rule 69 (else_block -> ELSE codigo END .)
    PRINT           reduce using rule 69 (else_block -> ELSE codigo END .)
    PUTS            reduce using rule 69 (else_block -> ELSE codigo END .)
    P               reduce using rule 69 (else_block -> ELSE codigo END .)
    NUMBER          reduce using rule 69 (else_block -> ELSE codigo END .)
    STRING          reduce using rule 69 (else_block -> ELSE codigo END .)
    IF              reduce using rule 69 (else_block -> ELSE codigo END .)
    LBRACKET        reduce using rule 69 (else_block -> ELSE codigo END .)
    LBRACE          reduce using rule 69 (else_block -> ELSE codigo END .)
    SET             reduce using rule 69 (else_block -> ELSE codigo END .)
    $end            reduce using rule 69 (else_block -> ELSE codigo END .)
    END             reduce using rule 69 (else_block -> ELSE codigo END .)
    ELSE            reduce using rule 69 (else_block -> ELSE codigo END .)
    ELSIF           reduce using rule 69 (else_block -> ELSE codigo END .)
    WHEN            reduce using rule 69 (else_block -> ELSE codigo END .)
    RETURN          reduce using rule 69 (else_block -> ELSE codigo END .)


state 150

    (67) elsif_block -> ELSIF conditions RPAREN . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 181
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 151

    (68) elsif_block -> ELSIF LPAREN conditions . RPAREN codigo

    RPAREN          shift and go to state 182


state 152

    (70) while_loop -> WHILE conditions codigo END .

    INSTANCE_VAR    reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    GLOBAL_VAR      reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    ID              reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    LPAREN          reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    WHILE           reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    CASE            reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    DEF             reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    PRINT           reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    PUTS            reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    P               reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    NUMBER          reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    STRING          reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    IF              reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    LBRACKET        reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    LBRACE          reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    SET             reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    $end            reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    END             reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    ELSE            reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    ELSIF           reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    WHEN            reduce using rule 70 (while_loop -> WHILE conditions codigo END .)
    RETURN          reduce using rule 70 (while_loop -> WHILE conditions codigo END .)


state 153

    (72) while_loop -> WHILE conditions DO codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 183
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 154

    (71) while_loop -> WHILE LPAREN conditions RPAREN . codigo END
    (73) while_loop -> WHILE LPAREN conditions RPAREN . DO codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    DO              shift and go to state 185
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 184
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 155

    (45) conditions -> condition conector conditions .

    DO              reduce using rule 45 (conditions -> condition conector conditions .)
    INSTANCE_VAR    reduce using rule 45 (conditions -> condition conector conditions .)
    GLOBAL_VAR      reduce using rule 45 (conditions -> condition conector conditions .)
    ID              reduce using rule 45 (conditions -> condition conector conditions .)
    LPAREN          reduce using rule 45 (conditions -> condition conector conditions .)
    WHILE           reduce using rule 45 (conditions -> condition conector conditions .)
    CASE            reduce using rule 45 (conditions -> condition conector conditions .)
    DEF             reduce using rule 45 (conditions -> condition conector conditions .)
    PRINT           reduce using rule 45 (conditions -> condition conector conditions .)
    PUTS            reduce using rule 45 (conditions -> condition conector conditions .)
    P               reduce using rule 45 (conditions -> condition conector conditions .)
    NUMBER          reduce using rule 45 (conditions -> condition conector conditions .)
    STRING          reduce using rule 45 (conditions -> condition conector conditions .)
    IF              reduce using rule 45 (conditions -> condition conector conditions .)
    LBRACKET        reduce using rule 45 (conditions -> condition conector conditions .)
    LBRACE          reduce using rule 45 (conditions -> condition conector conditions .)
    SET             reduce using rule 45 (conditions -> condition conector conditions .)
    $end            reduce using rule 45 (conditions -> condition conector conditions .)
    END             reduce using rule 45 (conditions -> condition conector conditions .)
    ELSE            reduce using rule 45 (conditions -> condition conector conditions .)
    ELSIF           reduce using rule 45 (conditions -> condition conector conditions .)
    WHEN            reduce using rule 45 (conditions -> condition conector conditions .)
    RETURN          reduce using rule 45 (conditions -> condition conector conditions .)
    RPAREN          reduce using rule 45 (conditions -> condition conector conditions .)


state 156

    (46) conditions -> condition conector LPAREN . conditions RPAREN
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    condition                      shift and go to state 59
    conditions                     shift and go to state 186
    value                          shift and go to state 60

state 157

    (47) condition -> value operComp value .
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    AND             reduce using rule 47 (condition -> value operComp value .)
    OR              reduce using rule 47 (condition -> value operComp value .)
    DO              reduce using rule 47 (condition -> value operComp value .)
    INSTANCE_VAR    reduce using rule 47 (condition -> value operComp value .)
    GLOBAL_VAR      reduce using rule 47 (condition -> value operComp value .)
    ID              reduce using rule 47 (condition -> value operComp value .)
    LPAREN          reduce using rule 47 (condition -> value operComp value .)
    WHILE           reduce using rule 47 (condition -> value operComp value .)
    CASE            reduce using rule 47 (condition -> value operComp value .)
    DEF             reduce using rule 47 (condition -> value operComp value .)
    PRINT           reduce using rule 47 (condition -> value operComp value .)
    PUTS            reduce using rule 47 (condition -> value operComp value .)
    P               reduce using rule 47 (condition -> value operComp value .)
    NUMBER          reduce using rule 47 (condition -> value operComp value .)
    STRING          reduce using rule 47 (condition -> value operComp value .)
    IF              reduce using rule 47 (condition -> value operComp value .)
    LBRACKET        reduce using rule 47 (condition -> value operComp value .)
    LBRACE          reduce using rule 47 (condition -> value operComp value .)
    SET             reduce using rule 47 (condition -> value operComp value .)
    $end            reduce using rule 47 (condition -> value operComp value .)
    END             reduce using rule 47 (condition -> value operComp value .)
    ELSE            reduce using rule 47 (condition -> value operComp value .)
    ELSIF           reduce using rule 47 (condition -> value operComp value .)
    WHEN            reduce using rule 47 (condition -> value operComp value .)
    RETURN          reduce using rule 47 (condition -> value operComp value .)
    RPAREN          reduce using rule 47 (condition -> value operComp value .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 44

state 158

    (48) condition -> value operComp aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    AND             reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    OR              reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    DO              reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    INSTANCE_VAR    reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    ID              reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    LPAREN          reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    WHILE           reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    CASE            reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    DEF             reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    PRINT           reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    PUTS            reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    P               reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    NUMBER          reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    STRING          reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    IF              reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    LBRACKET        reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    LBRACE          reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    SET             reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    $end            reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    END             reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    ELSE            reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    ELSIF           reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    WHEN            reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    RETURN          reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    RPAREN          reduce using rule 48 (condition -> value operComp aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 159

    (74) case -> CASE value whens END .

    INSTANCE_VAR    reduce using rule 74 (case -> CASE value whens END .)
    GLOBAL_VAR      reduce using rule 74 (case -> CASE value whens END .)
    ID              reduce using rule 74 (case -> CASE value whens END .)
    LPAREN          reduce using rule 74 (case -> CASE value whens END .)
    WHILE           reduce using rule 74 (case -> CASE value whens END .)
    CASE            reduce using rule 74 (case -> CASE value whens END .)
    DEF             reduce using rule 74 (case -> CASE value whens END .)
    PRINT           reduce using rule 74 (case -> CASE value whens END .)
    PUTS            reduce using rule 74 (case -> CASE value whens END .)
    P               reduce using rule 74 (case -> CASE value whens END .)
    NUMBER          reduce using rule 74 (case -> CASE value whens END .)
    STRING          reduce using rule 74 (case -> CASE value whens END .)
    IF              reduce using rule 74 (case -> CASE value whens END .)
    LBRACKET        reduce using rule 74 (case -> CASE value whens END .)
    LBRACE          reduce using rule 74 (case -> CASE value whens END .)
    SET             reduce using rule 74 (case -> CASE value whens END .)
    $end            reduce using rule 74 (case -> CASE value whens END .)
    END             reduce using rule 74 (case -> CASE value whens END .)
    ELSE            reduce using rule 74 (case -> CASE value whens END .)
    ELSIF           reduce using rule 74 (case -> CASE value whens END .)
    WHEN            reduce using rule 74 (case -> CASE value whens END .)
    RETURN          reduce using rule 74 (case -> CASE value whens END .)


state 160

    (75) whens -> whens when .

    END             reduce using rule 75 (whens -> whens when .)
    WHEN            reduce using rule 75 (whens -> whens when .)
    ELSE            reduce using rule 75 (whens -> whens when .)


state 161

    (77) when -> WHEN value . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    value                          shift and go to state 16
    codigo                         shift and go to state 187
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 162

    (78) when -> ELSE codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             reduce using rule 78 (when -> ELSE codigo .)
    WHEN            reduce using rule 78 (when -> ELSE codigo .)
    ELSE            reduce using rule 78 (when -> ELSE codigo .)
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 163

    (91) p_function_zero_parameter -> DEF ID LPAREN RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 188
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 164

    (92) p_function_one_parameter -> DEF ID LPAREN param . RPAREN codigo END
    (93) p_function_one_parameter -> DEF ID LPAREN param . RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> DEF ID LPAREN param . RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> DEF ID LPAREN param . RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> DEF ID LPAREN param . RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> DEF ID LPAREN param . RPAREN p_function_control_structures END

    RPAREN          shift and go to state 189


state 165

    (98) p_function_two_parameter -> DEF ID LPAREN params . RPAREN codigo END
    (99) p_function_two_parameter -> DEF ID LPAREN params . RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> DEF ID LPAREN params . RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> DEF ID LPAREN params . RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> DEF ID LPAREN params . RPAREN p_function_control_structures RETURN p_expression END

    RPAREN          shift and go to state 190


state 166

    (120) param -> value .
    (122) params -> value . COMMA value
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    RPAREN          reduce using rule 120 (param -> value .)
    COMMA           shift and go to state 146
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 44

state 167

    (121) param -> aritmeticExpresion .
    (123) params -> aritmeticExpresion . COMMA aritmeticExpresion
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    RPAREN          reduce using rule 121 (param -> aritmeticExpresion .)
    COMMA           shift and go to state 147
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 168

    (124) impression -> PRINT LPAREN value RPAREN .

    INSTANCE_VAR    reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    GLOBAL_VAR      reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    ID              reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    LPAREN          reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    WHILE           reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    CASE            reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    DEF             reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    PRINT           reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    PUTS            reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    P               reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    NUMBER          reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    STRING          reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    IF              reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    LBRACKET        reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    LBRACE          reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    SET             reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    $end            reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    END             reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    ELSE            reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    ELSIF           reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    WHEN            reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)
    RETURN          reduce using rule 124 (impression -> PRINT LPAREN value RPAREN .)


state 169

    (126) impression -> PUTS LPAREN value RPAREN .

    INSTANCE_VAR    reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    GLOBAL_VAR      reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    ID              reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    LPAREN          reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    WHILE           reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    CASE            reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    DEF             reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    PRINT           reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    PUTS            reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    P               reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    NUMBER          reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    STRING          reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    IF              reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    LBRACKET        reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    LBRACE          reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    SET             reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    $end            reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    END             reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    ELSE            reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    ELSIF           reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    WHEN            reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)
    RETURN          reduce using rule 126 (impression -> PUTS LPAREN value RPAREN .)


state 170

    (128) impression -> P LPAREN value RPAREN .

    INSTANCE_VAR    reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    GLOBAL_VAR      reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    ID              reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    LPAREN          reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    WHILE           reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    CASE            reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    DEF             reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    PRINT           reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    PUTS            reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    P               reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    NUMBER          reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    STRING          reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    IF              reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    LBRACKET        reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    LBRACE          reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    SET             reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    $end            reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    END             reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    ELSE            reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    ELSIF           reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    WHEN            reduce using rule 128 (impression -> P LPAREN value RPAREN .)
    RETURN          reduce using rule 128 (impression -> P LPAREN value RPAREN .)


state 171

    (62) if_block -> IF conditions codigo END .

    ELSE            reduce using rule 62 (if_block -> IF conditions codigo END .)
    ELSIF           reduce using rule 62 (if_block -> IF conditions codigo END .)
    INSTANCE_VAR    reduce using rule 62 (if_block -> IF conditions codigo END .)
    GLOBAL_VAR      reduce using rule 62 (if_block -> IF conditions codigo END .)
    ID              reduce using rule 62 (if_block -> IF conditions codigo END .)
    LPAREN          reduce using rule 62 (if_block -> IF conditions codigo END .)
    WHILE           reduce using rule 62 (if_block -> IF conditions codigo END .)
    CASE            reduce using rule 62 (if_block -> IF conditions codigo END .)
    DEF             reduce using rule 62 (if_block -> IF conditions codigo END .)
    PRINT           reduce using rule 62 (if_block -> IF conditions codigo END .)
    PUTS            reduce using rule 62 (if_block -> IF conditions codigo END .)
    P               reduce using rule 62 (if_block -> IF conditions codigo END .)
    NUMBER          reduce using rule 62 (if_block -> IF conditions codigo END .)
    STRING          reduce using rule 62 (if_block -> IF conditions codigo END .)
    IF              reduce using rule 62 (if_block -> IF conditions codigo END .)
    LBRACKET        reduce using rule 62 (if_block -> IF conditions codigo END .)
    LBRACE          reduce using rule 62 (if_block -> IF conditions codigo END .)
    SET             reduce using rule 62 (if_block -> IF conditions codigo END .)
    $end            reduce using rule 62 (if_block -> IF conditions codigo END .)
    END             reduce using rule 62 (if_block -> IF conditions codigo END .)
    WHEN            reduce using rule 62 (if_block -> IF conditions codigo END .)
    RETURN          reduce using rule 62 (if_block -> IF conditions codigo END .)


state 172

    (63) if_block -> IF LPAREN conditions RPAREN . codigo
    (64) if_block -> IF LPAREN conditions RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 191
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 173

    (21) values -> value COMMA values .

    RBRACKET        reduce using rule 21 (values -> value COMMA values .)


state 174

    (87) hash_contents -> hash_contents COMMA hash_pair .

    RBRACE          reduce using rule 87 (hash_contents -> hash_contents COMMA hash_pair .)
    COMMA           reduce using rule 87 (hash_contents -> hash_contents COMMA hash_pair .)


state 175

    (88) hash_pair -> value COLON value .

    RBRACE          reduce using rule 88 (hash_pair -> value COLON value .)
    COMMA           reduce using rule 88 (hash_pair -> value COLON value .)


state 176

    (89) set -> SET LPAREN LBRACKET RBRACKET . RPAREN

    RPAREN          shift and go to state 192


state 177

    (90) set -> SET LPAREN LBRACKET values . RBRACKET RPAREN

    RBRACKET        shift and go to state 193


state 178

    (122) params -> value COMMA value .

    RPAREN          reduce using rule 122 (params -> value COMMA value .)


state 179

    (123) params -> aritmeticExpresion COMMA aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    RPAREN          reduce using rule 123 (params -> aritmeticExpresion COMMA aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 180

    (38) aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .

    PLUS            reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    MINUS           reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    TIMES           reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    DIVIDE          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    MOD             reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    INSTANCE_VAR    reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    GLOBAL_VAR      reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    ID              reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    LPAREN          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    WHILE           reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    CASE            reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    DEF             reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    PRINT           reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    PUTS            reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    P               reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    NUMBER          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    STRING          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    IF              reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    LBRACKET        reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    LBRACE          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    SET             reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    $end            reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    RPAREN          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    END             reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    ELSE            reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    ELSIF           reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    WHEN            reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    RETURN          reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    COMMA           reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    AND             reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    OR              reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)
    DO              reduce using rule 38 (aritmeticExpresion -> LPAREN aritmeticExpresion RPAREN operator value .)


state 181

    (67) elsif_block -> ELSIF conditions RPAREN codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    ELSE            reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .)
    ELSIF           reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .)
    $end            reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .)
    END             reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .)
    WHEN            reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .)
    RETURN          reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .)
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

  ! INSTANCE_VAR    [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]
  ! SET             [ reduce using rule 67 (elsif_block -> ELSIF conditions RPAREN codigo .) ]

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 182

    (68) elsif_block -> ELSIF LPAREN conditions RPAREN . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 194
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 183

    (72) while_loop -> WHILE conditions DO codigo END .

    INSTANCE_VAR    reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    GLOBAL_VAR      reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    ID              reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    LPAREN          reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    WHILE           reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    CASE            reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    DEF             reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    PRINT           reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    PUTS            reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    P               reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    NUMBER          reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    STRING          reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    IF              reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    LBRACKET        reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    LBRACE          reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    SET             reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    $end            reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    END             reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    ELSE            reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    ELSIF           reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    WHEN            reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)
    RETURN          reduce using rule 72 (while_loop -> WHILE conditions DO codigo END .)


state 184

    (71) while_loop -> WHILE LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 195
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 185

    (73) while_loop -> WHILE LPAREN conditions RPAREN DO . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 196
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 186

    (46) conditions -> condition conector LPAREN conditions . RPAREN

    RPAREN          shift and go to state 197


state 187

    (77) when -> WHEN value codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             reduce using rule 77 (when -> WHEN value codigo .)
    WHEN            reduce using rule 77 (when -> WHEN value codigo .)
    ELSE            reduce using rule 77 (when -> WHEN value codigo .)
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    value                          shift and go to state 16
    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 188

    (91) p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 198
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 189

    (92) p_function_one_parameter -> DEF ID LPAREN param RPAREN . codigo END
    (93) p_function_one_parameter -> DEF ID LPAREN param RPAREN . codigo RETURN p_expression END
    (94) p_function_one_parameter -> DEF ID LPAREN param RPAREN . codigo p_function_control_structures END
    (95) p_function_one_parameter -> DEF ID LPAREN param RPAREN . p_function_control_structures codigo END
    (96) p_function_one_parameter -> DEF ID LPAREN param RPAREN . p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> DEF ID LPAREN param RPAREN . p_function_control_structures END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (103) p_function_control_structures -> . p_function_if_conditions
    (104) p_function_control_structures -> . p_function_if_conditions p_function_else_conditions
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (105) p_function_if_conditions -> . IF conditions RETURN p_expression
    (106) p_function_if_conditions -> . IF LPAREN conditions RPAREN RETURN p_expression
    (107) p_function_if_conditions -> . IF conditions codigo RETURN p_expression
    (108) p_function_if_conditions -> . IF LPAREN conditions RPAREN codigo RETURN p_expression
    (109) p_function_if_conditions -> . IF conditions RETURN p_expression END
    (110) p_function_if_conditions -> . IF LPAREN conditions RPAREN RETURN p_expression END
    (111) p_function_if_conditions -> . IF conditions codigo RETURN p_expression END
    (112) p_function_if_conditions -> . IF LPAREN conditions RPAREN codigo RETURN p_expression END
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    IF              shift and go to state 202
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 199
    p_function_control_structures  shift and go to state 200
    statement                      shift and go to state 2
    p_function_if_conditions       shift and go to state 201
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 190

    (98) p_function_two_parameter -> DEF ID LPAREN params RPAREN . codigo END
    (99) p_function_two_parameter -> DEF ID LPAREN params RPAREN . codigo RETURN p_expression END
    (100) p_function_two_parameter -> DEF ID LPAREN params RPAREN . p_function_control_structures END
    (101) p_function_two_parameter -> DEF ID LPAREN params RPAREN . p_function_control_structures codigo END
    (102) p_function_two_parameter -> DEF ID LPAREN params RPAREN . p_function_control_structures RETURN p_expression END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (103) p_function_control_structures -> . p_function_if_conditions
    (104) p_function_control_structures -> . p_function_if_conditions p_function_else_conditions
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (105) p_function_if_conditions -> . IF conditions RETURN p_expression
    (106) p_function_if_conditions -> . IF LPAREN conditions RPAREN RETURN p_expression
    (107) p_function_if_conditions -> . IF conditions codigo RETURN p_expression
    (108) p_function_if_conditions -> . IF LPAREN conditions RPAREN codigo RETURN p_expression
    (109) p_function_if_conditions -> . IF conditions RETURN p_expression END
    (110) p_function_if_conditions -> . IF LPAREN conditions RPAREN RETURN p_expression END
    (111) p_function_if_conditions -> . IF conditions codigo RETURN p_expression END
    (112) p_function_if_conditions -> . IF LPAREN conditions RPAREN codigo RETURN p_expression END
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    IF              shift and go to state 202
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 203
    p_function_control_structures  shift and go to state 204
    statement                      shift and go to state 2
    p_function_if_conditions       shift and go to state 201
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 191

    (63) if_block -> IF LPAREN conditions RPAREN codigo .
    (64) if_block -> IF LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    ELSE            reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    $end            reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    WHEN            reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    RETURN          reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    END             shift and go to state 205
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

  ! INSTANCE_VAR    [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! SET             [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! END             [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 192

    (89) set -> SET LPAREN LBRACKET RBRACKET RPAREN .

    INSTANCE_VAR    reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    GLOBAL_VAR      reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    ID              reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    LPAREN          reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    WHILE           reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    CASE            reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    DEF             reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    PRINT           reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    PUTS            reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    P               reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    NUMBER          reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    STRING          reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    IF              reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    LBRACKET        reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    LBRACE          reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    SET             reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    $end            reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    END             reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    ELSE            reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    ELSIF           reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    WHEN            reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)
    RETURN          reduce using rule 89 (set -> SET LPAREN LBRACKET RBRACKET RPAREN .)


state 193

    (90) set -> SET LPAREN LBRACKET values RBRACKET . RPAREN

    RPAREN          shift and go to state 206


state 194

    (68) elsif_block -> ELSIF LPAREN conditions RPAREN codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    ELSE            reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    $end            reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    END             reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    WHEN            reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    RETURN          reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

  ! INSTANCE_VAR    [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! SET             [ reduce using rule 68 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 195

    (71) while_loop -> WHILE LPAREN conditions RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ID              reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LPAREN          reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    WHILE           reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    CASE            reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    DEF             reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PRINT           reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PUTS            reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    P               reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    NUMBER          reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    STRING          reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    IF              reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LBRACKET        reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LBRACE          reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    SET             reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    $end            reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    END             reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ELSE            reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ELSIF           reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    WHEN            reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    RETURN          reduce using rule 71 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)


state 196

    (73) while_loop -> WHILE LPAREN conditions RPAREN DO codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 207
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 197

    (46) conditions -> condition conector LPAREN conditions RPAREN .

    DO              reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    INSTANCE_VAR    reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    GLOBAL_VAR      reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    ID              reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    LPAREN          reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    WHILE           reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    CASE            reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    DEF             reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    PRINT           reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    PUTS            reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    P               reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    NUMBER          reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    STRING          reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    IF              reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    LBRACKET        reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    LBRACE          reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    SET             reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    $end            reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    END             reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    ELSE            reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    ELSIF           reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    WHEN            reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    RETURN          reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)
    RPAREN          reduce using rule 46 (conditions -> condition conector LPAREN conditions RPAREN .)


state 198

    (91) p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    ID              reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    LPAREN          reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    WHILE           reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    CASE            reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    DEF             reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    PRINT           reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    PUTS            reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    P               reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    NUMBER          reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    STRING          reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    IF              reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    LBRACKET        reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    LBRACE          reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    SET             reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    $end            reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    END             reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    ELSE            reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    ELSIF           reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    WHEN            reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)
    RETURN          reduce using rule 91 (p_function_zero_parameter -> DEF ID LPAREN RPAREN codigo END .)


state 199

    (92) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo . END
    (93) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo . RETURN p_expression END
    (94) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo . p_function_control_structures END
    (2) codigo -> codigo . statement
    (103) p_function_control_structures -> . p_function_if_conditions
    (104) p_function_control_structures -> . p_function_if_conditions p_function_else_conditions
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (105) p_function_if_conditions -> . IF conditions RETURN p_expression
    (106) p_function_if_conditions -> . IF LPAREN conditions RPAREN RETURN p_expression
    (107) p_function_if_conditions -> . IF conditions codigo RETURN p_expression
    (108) p_function_if_conditions -> . IF LPAREN conditions RPAREN codigo RETURN p_expression
    (109) p_function_if_conditions -> . IF conditions RETURN p_expression END
    (110) p_function_if_conditions -> . IF LPAREN conditions RPAREN RETURN p_expression END
    (111) p_function_if_conditions -> . IF conditions codigo RETURN p_expression END
    (112) p_function_if_conditions -> . IF LPAREN conditions RPAREN codigo RETURN p_expression END
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 208
    RETURN          shift and go to state 209
    IF              shift and go to state 202
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    p_function_control_structures  shift and go to state 210
    statement                      shift and go to state 36
    p_function_if_conditions       shift and go to state 201
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 200

    (95) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures . codigo END
    (96) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures . RETURN p_expression END
    (97) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures . END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    RETURN          shift and go to state 213
    END             shift and go to state 212
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 211
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 201

    (103) p_function_control_structures -> p_function_if_conditions .
    (104) p_function_control_structures -> p_function_if_conditions . p_function_else_conditions
    (113) p_function_else_conditions -> . ELSE RETURN p_expression END
    (114) p_function_else_conditions -> . ELSE codigo RETURN p_expression END

    RETURN          reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    END             reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    INSTANCE_VAR    reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    GLOBAL_VAR      reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    ID              reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    LPAREN          reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    WHILE           reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    CASE            reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    DEF             reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    PRINT           reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    PUTS            reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    P               reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    NUMBER          reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    STRING          reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    IF              reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    LBRACKET        reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    LBRACE          reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    SET             reduce using rule 103 (p_function_control_structures -> p_function_if_conditions .)
    ELSE            shift and go to state 215

    p_function_else_conditions     shift and go to state 214

state 202

    (105) p_function_if_conditions -> IF . conditions RETURN p_expression
    (106) p_function_if_conditions -> IF . LPAREN conditions RPAREN RETURN p_expression
    (107) p_function_if_conditions -> IF . conditions codigo RETURN p_expression
    (108) p_function_if_conditions -> IF . LPAREN conditions RPAREN codigo RETURN p_expression
    (109) p_function_if_conditions -> IF . conditions RETURN p_expression END
    (110) p_function_if_conditions -> IF . LPAREN conditions RPAREN RETURN p_expression END
    (111) p_function_if_conditions -> IF . conditions codigo RETURN p_expression END
    (112) p_function_if_conditions -> IF . LPAREN conditions RPAREN codigo RETURN p_expression END
    (61) if_block -> IF . conditions codigo
    (62) if_block -> IF . conditions codigo END
    (63) if_block -> IF . LPAREN conditions RPAREN codigo
    (64) if_block -> IF . LPAREN conditions RPAREN codigo END
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    LPAREN          shift and go to state 217
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 216
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 203

    (98) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo . END
    (99) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo . RETURN p_expression END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 218
    RETURN          shift and go to state 219
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 204

    (100) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures . END
    (101) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures . codigo END
    (102) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures . RETURN p_expression END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 220
    RETURN          shift and go to state 222
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 221
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 205

    (64) if_block -> IF LPAREN conditions RPAREN codigo END .

    ELSE            reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    ELSIF           reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    INSTANCE_VAR    reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    ID              reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LPAREN          reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    WHILE           reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    CASE            reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    DEF             reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PRINT           reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PUTS            reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    P               reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    NUMBER          reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    STRING          reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    IF              reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LBRACKET        reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LBRACE          reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    SET             reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    $end            reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    END             reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    WHEN            reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    RETURN          reduce using rule 64 (if_block -> IF LPAREN conditions RPAREN codigo END .)


state 206

    (90) set -> SET LPAREN LBRACKET values RBRACKET RPAREN .

    INSTANCE_VAR    reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    GLOBAL_VAR      reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    ID              reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    LPAREN          reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    WHILE           reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    CASE            reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    DEF             reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    PRINT           reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    PUTS            reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    P               reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    NUMBER          reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    STRING          reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    IF              reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    LBRACKET        reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    LBRACE          reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    SET             reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    $end            reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    END             reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    ELSE            reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    ELSIF           reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    WHEN            reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)
    RETURN          reduce using rule 90 (set -> SET LPAREN LBRACKET values RBRACKET RPAREN .)


state 207

    (73) while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .

    INSTANCE_VAR    reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    GLOBAL_VAR      reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    ID              reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    LPAREN          reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    WHILE           reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    CASE            reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    DEF             reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    PRINT           reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    PUTS            reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    P               reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    NUMBER          reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    STRING          reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    IF              reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    LBRACKET        reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    LBRACE          reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    SET             reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    $end            reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    END             reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    ELSE            reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    ELSIF           reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    WHEN            reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)
    RETURN          reduce using rule 73 (while_loop -> WHILE LPAREN conditions RPAREN DO codigo END .)


state 208

    (92) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ID              reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LPAREN          reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    WHILE           reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    CASE            reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    DEF             reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PRINT           reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PUTS            reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    P               reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    NUMBER          reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    STRING          reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    IF              reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LBRACKET        reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LBRACE          reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    SET             reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    $end            reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    END             reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ELSE            reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ELSIF           reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    WHEN            reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    RETURN          reduce using rule 92 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)


state 209

    (93) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 223
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 210

    (94) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures . END

    END             shift and go to state 226


state 211

    (95) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 227
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 212

    (97) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .

    INSTANCE_VAR    reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    GLOBAL_VAR      reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    ID              reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    LPAREN          reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    WHILE           reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    CASE            reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    DEF             reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    PRINT           reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    PUTS            reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    P               reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    NUMBER          reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    STRING          reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    IF              reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    LBRACKET        reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    LBRACE          reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    SET             reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    $end            reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    END             reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    ELSE            reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    ELSIF           reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    WHEN            reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)
    RETURN          reduce using rule 97 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures END .)


state 213

    (96) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 228
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 214

    (104) p_function_control_structures -> p_function_if_conditions p_function_else_conditions .

    RETURN          reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    END             reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    INSTANCE_VAR    reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    GLOBAL_VAR      reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    ID              reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    LPAREN          reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    WHILE           reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    CASE            reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    DEF             reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    PRINT           reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    PUTS            reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    P               reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    NUMBER          reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    STRING          reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    IF              reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    LBRACKET        reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    LBRACE          reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)
    SET             reduce using rule 104 (p_function_control_structures -> p_function_if_conditions p_function_else_conditions .)


state 215

    (113) p_function_else_conditions -> ELSE . RETURN p_expression END
    (114) p_function_else_conditions -> ELSE . codigo RETURN p_expression END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    RETURN          shift and go to state 229
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 230
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 216

    (105) p_function_if_conditions -> IF conditions . RETURN p_expression
    (107) p_function_if_conditions -> IF conditions . codigo RETURN p_expression
    (109) p_function_if_conditions -> IF conditions . RETURN p_expression END
    (111) p_function_if_conditions -> IF conditions . codigo RETURN p_expression END
    (61) if_block -> IF conditions . codigo
    (62) if_block -> IF conditions . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    RETURN          shift and go to state 231
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 232
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 217

    (106) p_function_if_conditions -> IF LPAREN . conditions RPAREN RETURN p_expression
    (108) p_function_if_conditions -> IF LPAREN . conditions RPAREN codigo RETURN p_expression
    (110) p_function_if_conditions -> IF LPAREN . conditions RPAREN RETURN p_expression END
    (112) p_function_if_conditions -> IF LPAREN . conditions RPAREN codigo RETURN p_expression END
    (63) if_block -> IF LPAREN . conditions RPAREN codigo
    (64) if_block -> IF LPAREN . conditions RPAREN codigo END
    (44) conditions -> . condition
    (45) conditions -> . condition conector conditions
    (46) conditions -> . condition conector LPAREN conditions RPAREN
    (47) condition -> . value operComp value
    (48) condition -> . value operComp aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51

    conditions                     shift and go to state 233
    condition                      shift and go to state 59
    value                          shift and go to state 60

state 218

    (98) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ID              reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LPAREN          reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    WHILE           reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    CASE            reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    DEF             reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PRINT           reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PUTS            reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    P               reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    NUMBER          reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    STRING          reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    IF              reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LBRACKET        reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LBRACE          reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    SET             reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    $end            reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    END             reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ELSE            reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ELSIF           reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    WHEN            reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    RETURN          reduce using rule 98 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)


state 219

    (99) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 234
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 220

    (100) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .

    INSTANCE_VAR    reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    GLOBAL_VAR      reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    ID              reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    LPAREN          reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    WHILE           reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    CASE            reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    DEF             reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    PRINT           reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    PUTS            reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    P               reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    NUMBER          reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    STRING          reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    IF              reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    LBRACKET        reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    LBRACE          reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    SET             reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    $end            reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    END             reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    ELSE            reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    ELSIF           reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    WHEN            reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)
    RETURN          reduce using rule 100 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures END .)


state 221

    (101) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    END             shift and go to state 235
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 222

    (102) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 236
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 223

    (93) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression . END

    END             shift and go to state 237


state 224

    (115) p_expression -> value .
    (34) aritmeticExpresion -> value . operator value
    (35) aritmeticExpresion -> value . operator function_call
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    END             reduce using rule 115 (p_expression -> value .)
    ELSE            reduce using rule 115 (p_expression -> value .)
    RETURN          reduce using rule 115 (p_expression -> value .)
    INSTANCE_VAR    reduce using rule 115 (p_expression -> value .)
    GLOBAL_VAR      reduce using rule 115 (p_expression -> value .)
    ID              reduce using rule 115 (p_expression -> value .)
    LPAREN          reduce using rule 115 (p_expression -> value .)
    WHILE           reduce using rule 115 (p_expression -> value .)
    CASE            reduce using rule 115 (p_expression -> value .)
    DEF             reduce using rule 115 (p_expression -> value .)
    PRINT           reduce using rule 115 (p_expression -> value .)
    PUTS            reduce using rule 115 (p_expression -> value .)
    P               reduce using rule 115 (p_expression -> value .)
    NUMBER          reduce using rule 115 (p_expression -> value .)
    STRING          reduce using rule 115 (p_expression -> value .)
    IF              reduce using rule 115 (p_expression -> value .)
    LBRACKET        reduce using rule 115 (p_expression -> value .)
    LBRACE          reduce using rule 115 (p_expression -> value .)
    SET             reduce using rule 115 (p_expression -> value .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 44

state 225

    (116) p_expression -> aritmeticExpresion .
    (36) aritmeticExpresion -> aritmeticExpresion . operator value
    (39) operator -> . PLUS
    (40) operator -> . MINUS
    (41) operator -> . TIMES
    (42) operator -> . DIVIDE
    (43) operator -> . MOD

    END             reduce using rule 116 (p_expression -> aritmeticExpresion .)
    ELSE            reduce using rule 116 (p_expression -> aritmeticExpresion .)
    RETURN          reduce using rule 116 (p_expression -> aritmeticExpresion .)
    INSTANCE_VAR    reduce using rule 116 (p_expression -> aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 116 (p_expression -> aritmeticExpresion .)
    ID              reduce using rule 116 (p_expression -> aritmeticExpresion .)
    LPAREN          reduce using rule 116 (p_expression -> aritmeticExpresion .)
    WHILE           reduce using rule 116 (p_expression -> aritmeticExpresion .)
    CASE            reduce using rule 116 (p_expression -> aritmeticExpresion .)
    DEF             reduce using rule 116 (p_expression -> aritmeticExpresion .)
    PRINT           reduce using rule 116 (p_expression -> aritmeticExpresion .)
    PUTS            reduce using rule 116 (p_expression -> aritmeticExpresion .)
    P               reduce using rule 116 (p_expression -> aritmeticExpresion .)
    NUMBER          reduce using rule 116 (p_expression -> aritmeticExpresion .)
    STRING          reduce using rule 116 (p_expression -> aritmeticExpresion .)
    IF              reduce using rule 116 (p_expression -> aritmeticExpresion .)
    LBRACKET        reduce using rule 116 (p_expression -> aritmeticExpresion .)
    LBRACE          reduce using rule 116 (p_expression -> aritmeticExpresion .)
    SET             reduce using rule 116 (p_expression -> aritmeticExpresion .)
    PLUS            shift and go to state 38
    MINUS           shift and go to state 39
    TIMES           shift and go to state 40
    DIVIDE          shift and go to state 41
    MOD             shift and go to state 42

    operator                       shift and go to state 37

state 226

    (94) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .

    INSTANCE_VAR    reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    GLOBAL_VAR      reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    ID              reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    LPAREN          reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    WHILE           reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    CASE            reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    DEF             reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    PRINT           reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    PUTS            reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    P               reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    NUMBER          reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    STRING          reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    IF              reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    LBRACKET        reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    LBRACE          reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    SET             reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    $end            reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    END             reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    ELSE            reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    ELSIF           reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    WHEN            reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)
    RETURN          reduce using rule 94 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo p_function_control_structures END .)


state 227

    (95) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .

    INSTANCE_VAR    reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    GLOBAL_VAR      reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    ID              reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    LPAREN          reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    WHILE           reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    CASE            reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    DEF             reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    PRINT           reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    PUTS            reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    P               reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    NUMBER          reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    STRING          reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    IF              reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    LBRACKET        reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    LBRACE          reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    SET             reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    $end            reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    END             reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    ELSE            reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    ELSIF           reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    WHEN            reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)
    RETURN          reduce using rule 95 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures codigo END .)


state 228

    (96) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression . END

    END             shift and go to state 238


state 229

    (113) p_function_else_conditions -> ELSE RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 239
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 230

    (114) p_function_else_conditions -> ELSE codigo . RETURN p_expression END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    RETURN          shift and go to state 240
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 231

    (105) p_function_if_conditions -> IF conditions RETURN . p_expression
    (109) p_function_if_conditions -> IF conditions RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 241
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 232

    (107) p_function_if_conditions -> IF conditions codigo . RETURN p_expression
    (111) p_function_if_conditions -> IF conditions codigo . RETURN p_expression END
    (61) if_block -> IF conditions codigo .
    (62) if_block -> IF conditions codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    RETURN          shift and go to state 242
    ELSE            reduce using rule 61 (if_block -> IF conditions codigo .)
    ELSIF           reduce using rule 61 (if_block -> IF conditions codigo .)
    END             shift and go to state 171
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

  ! END             [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! RETURN          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! IF              [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! INSTANCE_VAR    [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! ID              [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! LPAREN          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! WHILE           [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! CASE            [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! DEF             [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! PRINT           [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! PUTS            [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! P               [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! NUMBER          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! STRING          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! LBRACKET        [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! LBRACE          [ reduce using rule 61 (if_block -> IF conditions codigo .) ]
  ! SET             [ reduce using rule 61 (if_block -> IF conditions codigo .) ]

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 233

    (106) p_function_if_conditions -> IF LPAREN conditions . RPAREN RETURN p_expression
    (108) p_function_if_conditions -> IF LPAREN conditions . RPAREN codigo RETURN p_expression
    (110) p_function_if_conditions -> IF LPAREN conditions . RPAREN RETURN p_expression END
    (112) p_function_if_conditions -> IF LPAREN conditions . RPAREN codigo RETURN p_expression END
    (63) if_block -> IF LPAREN conditions . RPAREN codigo
    (64) if_block -> IF LPAREN conditions . RPAREN codigo END

    RPAREN          shift and go to state 243


state 234

    (99) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression . END

    END             shift and go to state 244


state 235

    (101) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .

    INSTANCE_VAR    reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    GLOBAL_VAR      reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    ID              reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    LPAREN          reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    WHILE           reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    CASE            reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    DEF             reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    PRINT           reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    PUTS            reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    P               reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    NUMBER          reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    STRING          reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    IF              reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    LBRACKET        reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    LBRACE          reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    SET             reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    $end            reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    END             reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    ELSE            reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    ELSIF           reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    WHEN            reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)
    RETURN          reduce using rule 101 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures codigo END .)


state 236

    (102) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression . END

    END             shift and go to state 245


state 237

    (93) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .

    INSTANCE_VAR    reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    ID              reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    LPAREN          reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    WHILE           reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    CASE            reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    DEF             reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    PRINT           reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    PUTS            reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    P               reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    NUMBER          reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    STRING          reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    IF              reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    LBRACKET        reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    LBRACE          reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    SET             reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    $end            reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    END             reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    ELSE            reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    ELSIF           reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    WHEN            reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)
    RETURN          reduce using rule 93 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo RETURN p_expression END .)


state 238

    (96) p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .

    INSTANCE_VAR    reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    ID              reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    LPAREN          reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    WHILE           reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    CASE            reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    DEF             reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    PRINT           reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    PUTS            reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    P               reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    NUMBER          reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    STRING          reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    IF              reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    LBRACKET        reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    LBRACE          reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    SET             reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    $end            reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    END             reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    ELSE            reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    ELSIF           reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    WHEN            reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)
    RETURN          reduce using rule 96 (p_function_one_parameter -> DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END .)


state 239

    (113) p_function_else_conditions -> ELSE RETURN p_expression . END

    END             shift and go to state 246


state 240

    (114) p_function_else_conditions -> ELSE codigo RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 247
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 241

    (105) p_function_if_conditions -> IF conditions RETURN p_expression .
    (109) p_function_if_conditions -> IF conditions RETURN p_expression . END

  ! shift/reduce conflict for END resolved as shift
    ELSE            reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    RETURN          reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    INSTANCE_VAR    reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    GLOBAL_VAR      reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    ID              reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    LPAREN          reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    WHILE           reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    CASE            reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    DEF             reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    PRINT           reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    PUTS            reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    P               reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    NUMBER          reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    STRING          reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    IF              reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    LBRACKET        reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    LBRACE          reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    SET             reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .)
    END             shift and go to state 248

  ! END             [ reduce using rule 105 (p_function_if_conditions -> IF conditions RETURN p_expression .) ]


state 242

    (107) p_function_if_conditions -> IF conditions codigo RETURN . p_expression
    (111) p_function_if_conditions -> IF conditions codigo RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 249
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 243

    (106) p_function_if_conditions -> IF LPAREN conditions RPAREN . RETURN p_expression
    (108) p_function_if_conditions -> IF LPAREN conditions RPAREN . codigo RETURN p_expression
    (110) p_function_if_conditions -> IF LPAREN conditions RPAREN . RETURN p_expression END
    (112) p_function_if_conditions -> IF LPAREN conditions RPAREN . codigo RETURN p_expression END
    (63) if_block -> IF LPAREN conditions RPAREN . codigo
    (64) if_block -> IF LPAREN conditions RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

    RETURN          shift and go to state 250
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

    codigo                         shift and go to state 251
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 244

    (99) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .

    INSTANCE_VAR    reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    ID              reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    LPAREN          reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    WHILE           reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    CASE            reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    DEF             reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    PRINT           reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    PUTS            reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    P               reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    NUMBER          reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    STRING          reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    IF              reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    LBRACKET        reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    LBRACE          reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    SET             reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    $end            reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    END             reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    ELSE            reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    ELSIF           reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    WHEN            reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)
    RETURN          reduce using rule 99 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo RETURN p_expression END .)


state 245

    (102) p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .

    INSTANCE_VAR    reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    ID              reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    LPAREN          reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    WHILE           reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    CASE            reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    DEF             reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    PRINT           reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    PUTS            reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    P               reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    NUMBER          reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    STRING          reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    IF              reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    LBRACKET        reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    LBRACE          reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    SET             reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    $end            reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    END             reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    ELSE            reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    ELSIF           reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    WHEN            reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)
    RETURN          reduce using rule 102 (p_function_two_parameter -> DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END .)


state 246

    (113) p_function_else_conditions -> ELSE RETURN p_expression END .

    RETURN          reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    END             reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    INSTANCE_VAR    reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    ID              reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    LPAREN          reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    WHILE           reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    CASE            reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    DEF             reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    PRINT           reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    PUTS            reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    P               reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    NUMBER          reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    STRING          reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    IF              reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    LBRACKET        reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    LBRACE          reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)
    SET             reduce using rule 113 (p_function_else_conditions -> ELSE RETURN p_expression END .)


state 247

    (114) p_function_else_conditions -> ELSE codigo RETURN p_expression . END

    END             shift and go to state 252


state 248

    (109) p_function_if_conditions -> IF conditions RETURN p_expression END .

    ELSE            reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    RETURN          reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    END             reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    INSTANCE_VAR    reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    ID              reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    LPAREN          reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    WHILE           reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    CASE            reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    DEF             reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    PRINT           reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    PUTS            reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    P               reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    NUMBER          reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    STRING          reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    IF              reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    LBRACKET        reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    LBRACE          reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)
    SET             reduce using rule 109 (p_function_if_conditions -> IF conditions RETURN p_expression END .)


state 249

    (107) p_function_if_conditions -> IF conditions codigo RETURN p_expression .
    (111) p_function_if_conditions -> IF conditions codigo RETURN p_expression . END

  ! shift/reduce conflict for END resolved as shift
    ELSE            reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    RETURN          reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    INSTANCE_VAR    reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    GLOBAL_VAR      reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    ID              reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    LPAREN          reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    WHILE           reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    CASE            reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    DEF             reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    PRINT           reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    PUTS            reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    P               reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    NUMBER          reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    STRING          reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    IF              reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    LBRACKET        reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    LBRACE          reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    SET             reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .)
    END             shift and go to state 253

  ! END             [ reduce using rule 107 (p_function_if_conditions -> IF conditions codigo RETURN p_expression .) ]


state 250

    (106) p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN . p_expression
    (110) p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 254
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 251

    (108) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo . RETURN p_expression
    (112) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo . RETURN p_expression END
    (63) if_block -> IF LPAREN conditions RPAREN codigo .
    (64) if_block -> IF LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . aritmeticExpresion
    (5) statement -> . control_structures
    (6) statement -> . data_structure
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . p_function_zero_parameter
    (10) statement -> . p_function_one_parameter
    (11) statement -> . p_function_two_parameter
    (12) statement -> . function_call
    (13) statement -> . impression
    (14) statement -> . data_input
    (22) assign -> . INSTANCE_VAR ASSIGN value
    (23) assign -> . GLOBAL_VAR ASSIGN value
    (24) assign -> . ID ASSIGN value
    (25) assign -> . INSTANCE_VAR ASSIGN aritmeticExpresion
    (26) assign -> . GLOBAL_VAR ASSIGN aritmeticExpresion
    (27) assign -> . ID ASSIGN aritmeticExpresion
    (28) assign -> . INSTANCE_VAR ASSIGN conditions
    (29) assign -> . GLOBAL_VAR ASSIGN conditions
    (30) assign -> . ID ASSIGN conditions
    (31) assign -> . INSTANCE_VAR ASSIGN data_structure
    (32) assign -> . GLOBAL_VAR ASSIGN data_structure
    (33) assign -> . ID ASSIGN data_structure
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value
    (57) control_structures -> . if_block
    (58) control_structures -> . if_block elsif_blocks
    (59) control_structures -> . if_block elsif_blocks else_block
    (60) control_structures -> . if_block else_block
    (79) data_structure -> . array
    (80) data_structure -> . hash
    (81) data_structure -> . set
    (70) while_loop -> . WHILE conditions codigo END
    (71) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (72) while_loop -> . WHILE conditions DO codigo END
    (73) while_loop -> . WHILE LPAREN conditions RPAREN DO codigo END
    (74) case -> . CASE value whens END
    (91) p_function_zero_parameter -> . DEF ID LPAREN RPAREN codigo END
    (92) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (93) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo RETURN p_expression END
    (94) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo p_function_control_structures END
    (95) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures codigo END
    (96) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures RETURN p_expression END
    (97) p_function_one_parameter -> . DEF ID LPAREN param RPAREN p_function_control_structures END
    (98) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (99) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo RETURN p_expression END
    (100) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures END
    (101) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures codigo END
    (102) p_function_two_parameter -> . DEF ID LPAREN params RPAREN p_function_control_structures RETURN p_expression END
    (117) function_call -> . ID LPAREN RPAREN
    (118) function_call -> . ID LPAREN params RPAREN
    (119) function_call -> . ID LPAREN param RPAREN
    (124) impression -> . PRINT LPAREN value RPAREN
    (125) impression -> . PRINT value
    (126) impression -> . PUTS LPAREN value RPAREN
    (127) impression -> . PUTS value
    (128) impression -> . P LPAREN value RPAREN
    (129) impression -> . P value
    (130) data_input -> . ID ASSIGN GETS STRING
    (131) data_input -> . INSTANCE_VAR ASSIGN GETS STRING
    (132) data_input -> . GLOBAL_VAR ASSIGN GETS STRING
    (133) data_input -> . ID ASSIGN GETS NUMBER
    (134) data_input -> . INSTANCE_VAR ASSIGN GETS NUMBER
    (135) data_input -> . GLOBAL_VAR ASSIGN GETS NUMBER
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (61) if_block -> . IF conditions codigo
    (62) if_block -> . IF conditions codigo END
    (63) if_block -> . IF LPAREN conditions RPAREN codigo
    (64) if_block -> . IF LPAREN conditions RPAREN codigo END
    (82) array -> . LBRACKET RBRACKET
    (83) array -> . LBRACKET values RBRACKET
    (84) hash -> . LBRACE RBRACE
    (85) hash -> . LBRACE hash_contents RBRACE
    (89) set -> . SET LPAREN LBRACKET RBRACKET RPAREN
    (90) set -> . SET LPAREN LBRACKET values RBRACKET RPAREN

  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for SET resolved as shift
    RETURN          shift and go to state 255
    ELSE            reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .)
    END             shift and go to state 205
    INSTANCE_VAR    shift and go to state 15
    GLOBAL_VAR      shift and go to state 17
    ID              shift and go to state 18
    LPAREN          shift and go to state 19
    WHILE           shift and go to state 24
    CASE            shift and go to state 25
    DEF             shift and go to state 26
    PRINT           shift and go to state 27
    PUTS            shift and go to state 28
    P               shift and go to state 29
    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    IF              shift and go to state 32
    LBRACKET        shift and go to state 33
    LBRACE          shift and go to state 34
    SET             shift and go to state 35

  ! END             [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! RETURN          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! INSTANCE_VAR    [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! SET             [ reduce using rule 63 (if_block -> IF LPAREN conditions RPAREN codigo .) ]

    statement                      shift and go to state 36
    assign                         shift and go to state 3
    aritmeticExpresion             shift and go to state 4
    control_structures             shift and go to state 5
    data_structure                 shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    p_function_zero_parameter      shift and go to state 9
    p_function_one_parameter       shift and go to state 10
    p_function_two_parameter       shift and go to state 11
    function_call                  shift and go to state 12
    impression                     shift and go to state 13
    data_input                     shift and go to state 14
    value                          shift and go to state 16
    if_block                       shift and go to state 20
    array                          shift and go to state 21
    hash                           shift and go to state 22
    set                            shift and go to state 23

state 252

    (114) p_function_else_conditions -> ELSE codigo RETURN p_expression END .

    RETURN          reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    END             reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    INSTANCE_VAR    reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    ID              reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    LPAREN          reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    WHILE           reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    CASE            reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    DEF             reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    PRINT           reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    PUTS            reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    P               reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    NUMBER          reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    STRING          reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    IF              reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    LBRACKET        reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    LBRACE          reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)
    SET             reduce using rule 114 (p_function_else_conditions -> ELSE codigo RETURN p_expression END .)


state 253

    (111) p_function_if_conditions -> IF conditions codigo RETURN p_expression END .

    ELSE            reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    RETURN          reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    END             reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    INSTANCE_VAR    reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    ID              reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    LPAREN          reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    WHILE           reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    CASE            reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    DEF             reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    PRINT           reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    PUTS            reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    P               reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    NUMBER          reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    STRING          reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    IF              reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    LBRACKET        reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    LBRACE          reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)
    SET             reduce using rule 111 (p_function_if_conditions -> IF conditions codigo RETURN p_expression END .)


state 254

    (106) p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .
    (110) p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression . END

  ! shift/reduce conflict for END resolved as shift
    ELSE            reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    RETURN          reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    INSTANCE_VAR    reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    GLOBAL_VAR      reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    ID              reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    LPAREN          reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    WHILE           reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    CASE            reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    DEF             reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    PRINT           reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    PUTS            reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    P               reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    NUMBER          reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    STRING          reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    IF              reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    LBRACKET        reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    LBRACE          reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    SET             reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .)
    END             shift and go to state 256

  ! END             [ reduce using rule 106 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression .) ]


state 255

    (108) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN . p_expression
    (112) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN . p_expression END
    (115) p_expression -> . value
    (116) p_expression -> . aritmeticExpresion
    (15) value -> . NUMBER
    (16) value -> . STRING
    (17) value -> . INSTANCE_VAR
    (18) value -> . GLOBAL_VAR
    (19) value -> . ID
    (34) aritmeticExpresion -> . value operator value
    (35) aritmeticExpresion -> . value operator function_call
    (36) aritmeticExpresion -> . aritmeticExpresion operator value
    (37) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN
    (38) aritmeticExpresion -> . LPAREN aritmeticExpresion RPAREN operator value

    NUMBER          shift and go to state 31
    STRING          shift and go to state 30
    INSTANCE_VAR    shift and go to state 49
    GLOBAL_VAR      shift and go to state 50
    ID              shift and go to state 51
    LPAREN          shift and go to state 19

    p_expression                   shift and go to state 257
    value                          shift and go to state 224
    aritmeticExpresion             shift and go to state 225

state 256

    (110) p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .

    ELSE            reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    RETURN          reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    END             reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    INSTANCE_VAR    reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    ID              reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    LPAREN          reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    WHILE           reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    CASE            reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    DEF             reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    PRINT           reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    PUTS            reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    P               reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    NUMBER          reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    STRING          reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    IF              reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    LBRACKET        reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    LBRACE          reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)
    SET             reduce using rule 110 (p_function_if_conditions -> IF LPAREN conditions RPAREN RETURN p_expression END .)


state 257

    (108) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .
    (112) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression . END

  ! shift/reduce conflict for END resolved as shift
    ELSE            reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    RETURN          reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    INSTANCE_VAR    reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    GLOBAL_VAR      reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    ID              reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    LPAREN          reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    WHILE           reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    CASE            reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    DEF             reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    PRINT           reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    PUTS            reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    P               reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    NUMBER          reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    STRING          reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    IF              reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    LBRACKET        reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    LBRACE          reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    SET             reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .)
    END             shift and go to state 258

  ! END             [ reduce using rule 108 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression .) ]


state 258

    (112) p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .

    ELSE            reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    RETURN          reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    END             reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    INSTANCE_VAR    reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    GLOBAL_VAR      reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    ID              reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    LPAREN          reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    WHILE           reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    CASE            reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    DEF             reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    PRINT           reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    PUTS            reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    P               reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    NUMBER          reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    STRING          reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    IF              reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    LBRACKET        reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    LBRACE          reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)
    SET             reduce using rule 112 (p_function_if_conditions -> IF LPAREN conditions RPAREN codigo RETURN p_expression END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 20 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 20 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 52 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 52 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 103 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 103 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 103 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 103 resolved as shift
WARNING: shift/reduce conflict for MOD in state 103 resolved as shift
WARNING: shift/reduce conflict for END in state 130 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 130 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 130 resolved as shift
WARNING: shift/reduce conflict for CASE in state 130 resolved as shift
WARNING: shift/reduce conflict for DEF in state 130 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 130 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 130 resolved as shift
WARNING: shift/reduce conflict for P in state 130 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 130 resolved as shift
WARNING: shift/reduce conflict for STRING in state 130 resolved as shift
WARNING: shift/reduce conflict for IF in state 130 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 130 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 130 resolved as shift
WARNING: shift/reduce conflict for SET in state 130 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 181 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 181 resolved as shift
WARNING: shift/reduce conflict for ID in state 181 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 181 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 181 resolved as shift
WARNING: shift/reduce conflict for CASE in state 181 resolved as shift
WARNING: shift/reduce conflict for DEF in state 181 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 181 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 181 resolved as shift
WARNING: shift/reduce conflict for P in state 181 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 181 resolved as shift
WARNING: shift/reduce conflict for STRING in state 181 resolved as shift
WARNING: shift/reduce conflict for IF in state 181 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 181 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 181 resolved as shift
WARNING: shift/reduce conflict for SET in state 181 resolved as shift
WARNING: shift/reduce conflict for END in state 191 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 191 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 191 resolved as shift
WARNING: shift/reduce conflict for ID in state 191 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 191 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 191 resolved as shift
WARNING: shift/reduce conflict for CASE in state 191 resolved as shift
WARNING: shift/reduce conflict for DEF in state 191 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 191 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 191 resolved as shift
WARNING: shift/reduce conflict for P in state 191 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 191 resolved as shift
WARNING: shift/reduce conflict for STRING in state 191 resolved as shift
WARNING: shift/reduce conflict for IF in state 191 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 191 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 191 resolved as shift
WARNING: shift/reduce conflict for SET in state 191 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 194 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 194 resolved as shift
WARNING: shift/reduce conflict for ID in state 194 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 194 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 194 resolved as shift
WARNING: shift/reduce conflict for CASE in state 194 resolved as shift
WARNING: shift/reduce conflict for DEF in state 194 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 194 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 194 resolved as shift
WARNING: shift/reduce conflict for P in state 194 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 194 resolved as shift
WARNING: shift/reduce conflict for STRING in state 194 resolved as shift
WARNING: shift/reduce conflict for IF in state 194 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 194 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 194 resolved as shift
WARNING: shift/reduce conflict for SET in state 194 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 232 resolved as shift
WARNING: shift/reduce conflict for END in state 232 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 232 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 232 resolved as shift
WARNING: shift/reduce conflict for ID in state 232 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 232 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 232 resolved as shift
WARNING: shift/reduce conflict for CASE in state 232 resolved as shift
WARNING: shift/reduce conflict for DEF in state 232 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 232 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 232 resolved as shift
WARNING: shift/reduce conflict for P in state 232 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 232 resolved as shift
WARNING: shift/reduce conflict for STRING in state 232 resolved as shift
WARNING: shift/reduce conflict for IF in state 232 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 232 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 232 resolved as shift
WARNING: shift/reduce conflict for SET in state 232 resolved as shift
WARNING: shift/reduce conflict for END in state 241 resolved as shift
WARNING: shift/reduce conflict for END in state 249 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 251 resolved as shift
WARNING: shift/reduce conflict for END in state 251 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 251 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 251 resolved as shift
WARNING: shift/reduce conflict for ID in state 251 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 251 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 251 resolved as shift
WARNING: shift/reduce conflict for CASE in state 251 resolved as shift
WARNING: shift/reduce conflict for DEF in state 251 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 251 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 251 resolved as shift
WARNING: shift/reduce conflict for P in state 251 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 251 resolved as shift
WARNING: shift/reduce conflict for STRING in state 251 resolved as shift
WARNING: shift/reduce conflict for IF in state 251 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 251 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 251 resolved as shift
WARNING: shift/reduce conflict for SET in state 251 resolved as shift
WARNING: shift/reduce conflict for END in state 254 resolved as shift
WARNING: shift/reduce conflict for END in state 257 resolved as shift
