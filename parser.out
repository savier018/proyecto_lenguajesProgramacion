Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    APOSTROPHE
    BREAK
    CLASS
    CONST
    DAPOSTROPHE
    DO
    DOT
    FALSE
    FOR
    IN
    NIL
    NONE
    NOT
    RETURN
    SEMICOLON
    TRUE

Grammar

Rule 0     S' -> codigo
Rule 1     codigo -> statement
Rule 2     codigo -> codigo statement
Rule 3     statement -> assign
Rule 4     statement -> impression
Rule 5     statement -> tupla
Rule 6     statement -> conditions
Rule 7     statement -> while_loop
Rule 8     statement -> case
Rule 9     statement -> Sfunction
Rule 10    statement -> array
Rule 11    statement -> p_SfunctionINV
Rule 12    statement -> p_function_one_parameter
Rule 13    statement -> p_function_two_parameter
Rule 14    statement -> aritmeticExpresion
Rule 15    statement -> operator
Rule 16    statement -> dataIn
Rule 17    statement -> control_structures
Rule 18    statement -> hash
Rule 19    value -> NUMBER
Rule 20    value -> STRING
Rule 21    value -> INSTANCE_VAR
Rule 22    value -> GLOBAL_VAR
Rule 23    value -> ID
Rule 24    values -> value
Rule 25    values -> value COMMA values
Rule 26    assign -> INSTANCE_VAR ASSIGN value
Rule 27    assign -> GLOBAL_VAR ASSIGN value
Rule 28    assign -> ID ASSIGN value
Rule 29    assign -> INSTANCE_VAR ASSIGN data_structure
Rule 30    assign -> GLOBAL_VAR ASSIGN data_structure
Rule 31    assign -> ID ASSIGN data_structure
Rule 32    aritmeticExpresion -> value operator value
Rule 33    aritmeticExpresion -> aritmeticExpresion operator value
Rule 34    operator -> PLUS
Rule 35    operator -> MINUS
Rule 36    operator -> TIMES
Rule 37    operator -> DIVIDE
Rule 38    operator -> MOD
Rule 39    operator -> LPAREN aritmeticExpresion RPAREN
Rule 40    data_structure -> array
Rule 41    data_structure -> tupla
Rule 42    data_structure -> hash
Rule 43    array -> LBRACKET RBRACKET
Rule 44    array -> LBRACKET values RBRACKET
Rule 45    hash -> LBRACE RBRACE
Rule 46    hash -> LBRACE hash_contents RBRACE
Rule 47    hash_contents -> hash_pair
Rule 48    hash_contents -> hash_contents COMMA hash_pair
Rule 49    hash_pair -> value COLON value
Rule 50    conditions -> condition
Rule 51    conditions -> condition conector conditions
Rule 52    condition -> value operComp value
Rule 53    condition -> value operComp aritmeticExpresion
Rule 54    conector -> AND
Rule 55    conector -> OR
Rule 56    operComp -> LESSTHAN
Rule 57    operComp -> GREATERTHAN
Rule 58    operComp -> GREATEROREQUAL
Rule 59    operComp -> LESSOREQUAL
Rule 60    operComp -> EQUAL
Rule 61    operComp -> NOTEQUAL
Rule 62    control_structures -> if_block
Rule 63    control_structures -> if_block elsif_blocks
Rule 64    control_structures -> if_block elsif_blocks else_block
Rule 65    control_structures -> if_block else_block
Rule 66    if_block -> IF LPAREN conditions RPAREN codigo
Rule 67    if_block -> IF LPAREN conditions RPAREN codigo END
Rule 68    elsif_blocks -> elsif_block
Rule 69    elsif_blocks -> elsif_blocks elsif_block
Rule 70    elsif_block -> ELSIF LPAREN conditions RPAREN codigo
Rule 71    else_block -> ELSE codigo END
Rule 72    when -> WHEN conditions codigo
Rule 73    whens -> when
Rule 74    whens -> whens when
Rule 75    case -> CASE whens END
Rule 76    Sfunction -> DEF ID LPAREN RPAREN codigo END
Rule 77    p_SfunctionINV -> ID
Rule 78    p_SfunctionINV -> ID LPAREN params RPAREN
Rule 79    p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END
Rule 80    p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END
Rule 81    param -> value
Rule 82    params -> value COMMA value
Rule 83    impression -> PRINT LPAREN values RPAREN
Rule 84    impression -> PRINT values
Rule 85    impression -> PUTS values
Rule 86    impression -> PUTS LPAREN values RPAREN
Rule 87    impression -> P LPAREN values RPAREN
Rule 88    impression -> P values
Rule 89    impression -> PRINT
Rule 90    impression -> PUTS
Rule 91    dataIn -> ID ASSIGN GETS
Rule 92    dataIn -> INSTANCE_VAR ASSIGN GETS
Rule 93    dataIn -> GLOBAL_VAR ASSIGN GETS
Rule 94    while_loop -> WHILE LPAREN conditions RPAREN codigo END
Rule 95    tupla -> LPAREN values RPAREN

Terminals, with rules where they appear

AND                  : 54
APOSTROPHE           : 
ASSIGN               : 26 27 28 29 30 31 91 92 93
BREAK                : 
CASE                 : 75
CLASS                : 
COLON                : 49
COMMA                : 25 48 82
CONST                : 
DAPOSTROPHE          : 
DEF                  : 76 79 80
DIVIDE               : 37
DO                   : 
DOT                  : 
ELSE                 : 71
ELSIF                : 70
END                  : 67 71 75 76 79 80 94
EQUAL                : 60
FALSE                : 
FOR                  : 
GETS                 : 91 92 93
GLOBAL_VAR           : 22 27 30 93
GREATEROREQUAL       : 58
GREATERTHAN          : 57
ID                   : 23 28 31 76 77 78 79 80 91
IF                   : 66 67
IN                   : 
INSTANCE_VAR         : 21 26 29 92
LBRACE               : 45 46
LBRACKET             : 43 44
LESSOREQUAL          : 59
LESSTHAN             : 56
LPAREN               : 39 66 67 70 76 78 79 80 83 86 87 94 95
MINUS                : 35
MOD                  : 38
NIL                  : 
NONE                 : 
NOT                  : 
NOTEQUAL             : 61
NUMBER               : 19
OR                   : 55
P                    : 87 88
PLUS                 : 34
PRINT                : 83 84 89
PUTS                 : 85 86 90
RBRACE               : 45 46
RBRACKET             : 43 44
RETURN               : 
RPAREN               : 39 66 67 70 76 78 79 80 83 86 87 94 95
SEMICOLON            : 
STRING               : 20
TIMES                : 36
TRUE                 : 
WHEN                 : 72
WHILE                : 94
error                : 

Nonterminals, with rules where they appear

Sfunction            : 9
aritmeticExpresion   : 14 33 39 53
array                : 10 40
assign               : 3
case                 : 8
codigo               : 2 66 67 70 71 72 76 79 80 94 0
condition            : 50 51
conditions           : 6 51 66 67 70 72 94
conector             : 51
control_structures   : 17
dataIn               : 16
data_structure       : 29 30 31
else_block           : 64 65
elsif_block          : 68 69
elsif_blocks         : 63 64 69
hash                 : 18 42
hash_contents        : 46 48
hash_pair            : 47 48
if_block             : 62 63 64 65
impression           : 4
operComp             : 52 53
operator             : 15 32 33
p_SfunctionINV       : 11
p_function_one_parameter : 12
p_function_two_parameter : 13
param                : 79
params               : 78 80
statement            : 1 2
tupla                : 5 41
value                : 24 25 26 27 28 32 32 33 49 49 52 52 53 81 82 82
values               : 25 44 83 84 85 86 87 88 95
when                 : 73 74
whens                : 74 75
while_loop           : 7

Parsing method: LALR

state 0

    (0) S' -> . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 1
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 1

    (0) S' -> codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 2

    (1) codigo -> statement .

    INSTANCE_VAR    reduce using rule 1 (codigo -> statement .)
    GLOBAL_VAR      reduce using rule 1 (codigo -> statement .)
    ID              reduce using rule 1 (codigo -> statement .)
    PRINT           reduce using rule 1 (codigo -> statement .)
    PUTS            reduce using rule 1 (codigo -> statement .)
    P               reduce using rule 1 (codigo -> statement .)
    LPAREN          reduce using rule 1 (codigo -> statement .)
    WHILE           reduce using rule 1 (codigo -> statement .)
    CASE            reduce using rule 1 (codigo -> statement .)
    DEF             reduce using rule 1 (codigo -> statement .)
    LBRACKET        reduce using rule 1 (codigo -> statement .)
    PLUS            reduce using rule 1 (codigo -> statement .)
    MINUS           reduce using rule 1 (codigo -> statement .)
    TIMES           reduce using rule 1 (codigo -> statement .)
    DIVIDE          reduce using rule 1 (codigo -> statement .)
    MOD             reduce using rule 1 (codigo -> statement .)
    LBRACE          reduce using rule 1 (codigo -> statement .)
    NUMBER          reduce using rule 1 (codigo -> statement .)
    STRING          reduce using rule 1 (codigo -> statement .)
    IF              reduce using rule 1 (codigo -> statement .)
    $end            reduce using rule 1 (codigo -> statement .)
    END             reduce using rule 1 (codigo -> statement .)
    WHEN            reduce using rule 1 (codigo -> statement .)
    ELSE            reduce using rule 1 (codigo -> statement .)
    ELSIF           reduce using rule 1 (codigo -> statement .)


state 3

    (3) statement -> assign .

    INSTANCE_VAR    reduce using rule 3 (statement -> assign .)
    GLOBAL_VAR      reduce using rule 3 (statement -> assign .)
    ID              reduce using rule 3 (statement -> assign .)
    PRINT           reduce using rule 3 (statement -> assign .)
    PUTS            reduce using rule 3 (statement -> assign .)
    P               reduce using rule 3 (statement -> assign .)
    LPAREN          reduce using rule 3 (statement -> assign .)
    WHILE           reduce using rule 3 (statement -> assign .)
    CASE            reduce using rule 3 (statement -> assign .)
    DEF             reduce using rule 3 (statement -> assign .)
    LBRACKET        reduce using rule 3 (statement -> assign .)
    PLUS            reduce using rule 3 (statement -> assign .)
    MINUS           reduce using rule 3 (statement -> assign .)
    TIMES           reduce using rule 3 (statement -> assign .)
    DIVIDE          reduce using rule 3 (statement -> assign .)
    MOD             reduce using rule 3 (statement -> assign .)
    LBRACE          reduce using rule 3 (statement -> assign .)
    NUMBER          reduce using rule 3 (statement -> assign .)
    STRING          reduce using rule 3 (statement -> assign .)
    IF              reduce using rule 3 (statement -> assign .)
    $end            reduce using rule 3 (statement -> assign .)
    END             reduce using rule 3 (statement -> assign .)
    WHEN            reduce using rule 3 (statement -> assign .)
    ELSE            reduce using rule 3 (statement -> assign .)
    ELSIF           reduce using rule 3 (statement -> assign .)


state 4

    (4) statement -> impression .

    INSTANCE_VAR    reduce using rule 4 (statement -> impression .)
    GLOBAL_VAR      reduce using rule 4 (statement -> impression .)
    ID              reduce using rule 4 (statement -> impression .)
    PRINT           reduce using rule 4 (statement -> impression .)
    PUTS            reduce using rule 4 (statement -> impression .)
    P               reduce using rule 4 (statement -> impression .)
    LPAREN          reduce using rule 4 (statement -> impression .)
    WHILE           reduce using rule 4 (statement -> impression .)
    CASE            reduce using rule 4 (statement -> impression .)
    DEF             reduce using rule 4 (statement -> impression .)
    LBRACKET        reduce using rule 4 (statement -> impression .)
    PLUS            reduce using rule 4 (statement -> impression .)
    MINUS           reduce using rule 4 (statement -> impression .)
    TIMES           reduce using rule 4 (statement -> impression .)
    DIVIDE          reduce using rule 4 (statement -> impression .)
    MOD             reduce using rule 4 (statement -> impression .)
    LBRACE          reduce using rule 4 (statement -> impression .)
    NUMBER          reduce using rule 4 (statement -> impression .)
    STRING          reduce using rule 4 (statement -> impression .)
    IF              reduce using rule 4 (statement -> impression .)
    $end            reduce using rule 4 (statement -> impression .)
    END             reduce using rule 4 (statement -> impression .)
    WHEN            reduce using rule 4 (statement -> impression .)
    ELSE            reduce using rule 4 (statement -> impression .)
    ELSIF           reduce using rule 4 (statement -> impression .)


state 5

    (5) statement -> tupla .

    INSTANCE_VAR    reduce using rule 5 (statement -> tupla .)
    GLOBAL_VAR      reduce using rule 5 (statement -> tupla .)
    ID              reduce using rule 5 (statement -> tupla .)
    PRINT           reduce using rule 5 (statement -> tupla .)
    PUTS            reduce using rule 5 (statement -> tupla .)
    P               reduce using rule 5 (statement -> tupla .)
    LPAREN          reduce using rule 5 (statement -> tupla .)
    WHILE           reduce using rule 5 (statement -> tupla .)
    CASE            reduce using rule 5 (statement -> tupla .)
    DEF             reduce using rule 5 (statement -> tupla .)
    LBRACKET        reduce using rule 5 (statement -> tupla .)
    PLUS            reduce using rule 5 (statement -> tupla .)
    MINUS           reduce using rule 5 (statement -> tupla .)
    TIMES           reduce using rule 5 (statement -> tupla .)
    DIVIDE          reduce using rule 5 (statement -> tupla .)
    MOD             reduce using rule 5 (statement -> tupla .)
    LBRACE          reduce using rule 5 (statement -> tupla .)
    NUMBER          reduce using rule 5 (statement -> tupla .)
    STRING          reduce using rule 5 (statement -> tupla .)
    IF              reduce using rule 5 (statement -> tupla .)
    $end            reduce using rule 5 (statement -> tupla .)
    END             reduce using rule 5 (statement -> tupla .)
    WHEN            reduce using rule 5 (statement -> tupla .)
    ELSE            reduce using rule 5 (statement -> tupla .)
    ELSIF           reduce using rule 5 (statement -> tupla .)


state 6

    (6) statement -> conditions .

    INSTANCE_VAR    reduce using rule 6 (statement -> conditions .)
    GLOBAL_VAR      reduce using rule 6 (statement -> conditions .)
    ID              reduce using rule 6 (statement -> conditions .)
    PRINT           reduce using rule 6 (statement -> conditions .)
    PUTS            reduce using rule 6 (statement -> conditions .)
    P               reduce using rule 6 (statement -> conditions .)
    LPAREN          reduce using rule 6 (statement -> conditions .)
    WHILE           reduce using rule 6 (statement -> conditions .)
    CASE            reduce using rule 6 (statement -> conditions .)
    DEF             reduce using rule 6 (statement -> conditions .)
    LBRACKET        reduce using rule 6 (statement -> conditions .)
    PLUS            reduce using rule 6 (statement -> conditions .)
    MINUS           reduce using rule 6 (statement -> conditions .)
    TIMES           reduce using rule 6 (statement -> conditions .)
    DIVIDE          reduce using rule 6 (statement -> conditions .)
    MOD             reduce using rule 6 (statement -> conditions .)
    LBRACE          reduce using rule 6 (statement -> conditions .)
    NUMBER          reduce using rule 6 (statement -> conditions .)
    STRING          reduce using rule 6 (statement -> conditions .)
    IF              reduce using rule 6 (statement -> conditions .)
    $end            reduce using rule 6 (statement -> conditions .)
    END             reduce using rule 6 (statement -> conditions .)
    WHEN            reduce using rule 6 (statement -> conditions .)
    ELSE            reduce using rule 6 (statement -> conditions .)
    ELSIF           reduce using rule 6 (statement -> conditions .)


state 7

    (7) statement -> while_loop .

    INSTANCE_VAR    reduce using rule 7 (statement -> while_loop .)
    GLOBAL_VAR      reduce using rule 7 (statement -> while_loop .)
    ID              reduce using rule 7 (statement -> while_loop .)
    PRINT           reduce using rule 7 (statement -> while_loop .)
    PUTS            reduce using rule 7 (statement -> while_loop .)
    P               reduce using rule 7 (statement -> while_loop .)
    LPAREN          reduce using rule 7 (statement -> while_loop .)
    WHILE           reduce using rule 7 (statement -> while_loop .)
    CASE            reduce using rule 7 (statement -> while_loop .)
    DEF             reduce using rule 7 (statement -> while_loop .)
    LBRACKET        reduce using rule 7 (statement -> while_loop .)
    PLUS            reduce using rule 7 (statement -> while_loop .)
    MINUS           reduce using rule 7 (statement -> while_loop .)
    TIMES           reduce using rule 7 (statement -> while_loop .)
    DIVIDE          reduce using rule 7 (statement -> while_loop .)
    MOD             reduce using rule 7 (statement -> while_loop .)
    LBRACE          reduce using rule 7 (statement -> while_loop .)
    NUMBER          reduce using rule 7 (statement -> while_loop .)
    STRING          reduce using rule 7 (statement -> while_loop .)
    IF              reduce using rule 7 (statement -> while_loop .)
    $end            reduce using rule 7 (statement -> while_loop .)
    END             reduce using rule 7 (statement -> while_loop .)
    WHEN            reduce using rule 7 (statement -> while_loop .)
    ELSE            reduce using rule 7 (statement -> while_loop .)
    ELSIF           reduce using rule 7 (statement -> while_loop .)


state 8

    (8) statement -> case .

    INSTANCE_VAR    reduce using rule 8 (statement -> case .)
    GLOBAL_VAR      reduce using rule 8 (statement -> case .)
    ID              reduce using rule 8 (statement -> case .)
    PRINT           reduce using rule 8 (statement -> case .)
    PUTS            reduce using rule 8 (statement -> case .)
    P               reduce using rule 8 (statement -> case .)
    LPAREN          reduce using rule 8 (statement -> case .)
    WHILE           reduce using rule 8 (statement -> case .)
    CASE            reduce using rule 8 (statement -> case .)
    DEF             reduce using rule 8 (statement -> case .)
    LBRACKET        reduce using rule 8 (statement -> case .)
    PLUS            reduce using rule 8 (statement -> case .)
    MINUS           reduce using rule 8 (statement -> case .)
    TIMES           reduce using rule 8 (statement -> case .)
    DIVIDE          reduce using rule 8 (statement -> case .)
    MOD             reduce using rule 8 (statement -> case .)
    LBRACE          reduce using rule 8 (statement -> case .)
    NUMBER          reduce using rule 8 (statement -> case .)
    STRING          reduce using rule 8 (statement -> case .)
    IF              reduce using rule 8 (statement -> case .)
    $end            reduce using rule 8 (statement -> case .)
    END             reduce using rule 8 (statement -> case .)
    WHEN            reduce using rule 8 (statement -> case .)
    ELSE            reduce using rule 8 (statement -> case .)
    ELSIF           reduce using rule 8 (statement -> case .)


state 9

    (9) statement -> Sfunction .

    INSTANCE_VAR    reduce using rule 9 (statement -> Sfunction .)
    GLOBAL_VAR      reduce using rule 9 (statement -> Sfunction .)
    ID              reduce using rule 9 (statement -> Sfunction .)
    PRINT           reduce using rule 9 (statement -> Sfunction .)
    PUTS            reduce using rule 9 (statement -> Sfunction .)
    P               reduce using rule 9 (statement -> Sfunction .)
    LPAREN          reduce using rule 9 (statement -> Sfunction .)
    WHILE           reduce using rule 9 (statement -> Sfunction .)
    CASE            reduce using rule 9 (statement -> Sfunction .)
    DEF             reduce using rule 9 (statement -> Sfunction .)
    LBRACKET        reduce using rule 9 (statement -> Sfunction .)
    PLUS            reduce using rule 9 (statement -> Sfunction .)
    MINUS           reduce using rule 9 (statement -> Sfunction .)
    TIMES           reduce using rule 9 (statement -> Sfunction .)
    DIVIDE          reduce using rule 9 (statement -> Sfunction .)
    MOD             reduce using rule 9 (statement -> Sfunction .)
    LBRACE          reduce using rule 9 (statement -> Sfunction .)
    NUMBER          reduce using rule 9 (statement -> Sfunction .)
    STRING          reduce using rule 9 (statement -> Sfunction .)
    IF              reduce using rule 9 (statement -> Sfunction .)
    $end            reduce using rule 9 (statement -> Sfunction .)
    END             reduce using rule 9 (statement -> Sfunction .)
    WHEN            reduce using rule 9 (statement -> Sfunction .)
    ELSE            reduce using rule 9 (statement -> Sfunction .)
    ELSIF           reduce using rule 9 (statement -> Sfunction .)


state 10

    (10) statement -> array .

    INSTANCE_VAR    reduce using rule 10 (statement -> array .)
    GLOBAL_VAR      reduce using rule 10 (statement -> array .)
    ID              reduce using rule 10 (statement -> array .)
    PRINT           reduce using rule 10 (statement -> array .)
    PUTS            reduce using rule 10 (statement -> array .)
    P               reduce using rule 10 (statement -> array .)
    LPAREN          reduce using rule 10 (statement -> array .)
    WHILE           reduce using rule 10 (statement -> array .)
    CASE            reduce using rule 10 (statement -> array .)
    DEF             reduce using rule 10 (statement -> array .)
    LBRACKET        reduce using rule 10 (statement -> array .)
    PLUS            reduce using rule 10 (statement -> array .)
    MINUS           reduce using rule 10 (statement -> array .)
    TIMES           reduce using rule 10 (statement -> array .)
    DIVIDE          reduce using rule 10 (statement -> array .)
    MOD             reduce using rule 10 (statement -> array .)
    LBRACE          reduce using rule 10 (statement -> array .)
    NUMBER          reduce using rule 10 (statement -> array .)
    STRING          reduce using rule 10 (statement -> array .)
    IF              reduce using rule 10 (statement -> array .)
    $end            reduce using rule 10 (statement -> array .)
    END             reduce using rule 10 (statement -> array .)
    WHEN            reduce using rule 10 (statement -> array .)
    ELSE            reduce using rule 10 (statement -> array .)
    ELSIF           reduce using rule 10 (statement -> array .)


state 11

    (11) statement -> p_SfunctionINV .

    INSTANCE_VAR    reduce using rule 11 (statement -> p_SfunctionINV .)
    GLOBAL_VAR      reduce using rule 11 (statement -> p_SfunctionINV .)
    ID              reduce using rule 11 (statement -> p_SfunctionINV .)
    PRINT           reduce using rule 11 (statement -> p_SfunctionINV .)
    PUTS            reduce using rule 11 (statement -> p_SfunctionINV .)
    P               reduce using rule 11 (statement -> p_SfunctionINV .)
    LPAREN          reduce using rule 11 (statement -> p_SfunctionINV .)
    WHILE           reduce using rule 11 (statement -> p_SfunctionINV .)
    CASE            reduce using rule 11 (statement -> p_SfunctionINV .)
    DEF             reduce using rule 11 (statement -> p_SfunctionINV .)
    LBRACKET        reduce using rule 11 (statement -> p_SfunctionINV .)
    PLUS            reduce using rule 11 (statement -> p_SfunctionINV .)
    MINUS           reduce using rule 11 (statement -> p_SfunctionINV .)
    TIMES           reduce using rule 11 (statement -> p_SfunctionINV .)
    DIVIDE          reduce using rule 11 (statement -> p_SfunctionINV .)
    MOD             reduce using rule 11 (statement -> p_SfunctionINV .)
    LBRACE          reduce using rule 11 (statement -> p_SfunctionINV .)
    NUMBER          reduce using rule 11 (statement -> p_SfunctionINV .)
    STRING          reduce using rule 11 (statement -> p_SfunctionINV .)
    IF              reduce using rule 11 (statement -> p_SfunctionINV .)
    $end            reduce using rule 11 (statement -> p_SfunctionINV .)
    END             reduce using rule 11 (statement -> p_SfunctionINV .)
    WHEN            reduce using rule 11 (statement -> p_SfunctionINV .)
    ELSE            reduce using rule 11 (statement -> p_SfunctionINV .)
    ELSIF           reduce using rule 11 (statement -> p_SfunctionINV .)


state 12

    (12) statement -> p_function_one_parameter .

    INSTANCE_VAR    reduce using rule 12 (statement -> p_function_one_parameter .)
    GLOBAL_VAR      reduce using rule 12 (statement -> p_function_one_parameter .)
    ID              reduce using rule 12 (statement -> p_function_one_parameter .)
    PRINT           reduce using rule 12 (statement -> p_function_one_parameter .)
    PUTS            reduce using rule 12 (statement -> p_function_one_parameter .)
    P               reduce using rule 12 (statement -> p_function_one_parameter .)
    LPAREN          reduce using rule 12 (statement -> p_function_one_parameter .)
    WHILE           reduce using rule 12 (statement -> p_function_one_parameter .)
    CASE            reduce using rule 12 (statement -> p_function_one_parameter .)
    DEF             reduce using rule 12 (statement -> p_function_one_parameter .)
    LBRACKET        reduce using rule 12 (statement -> p_function_one_parameter .)
    PLUS            reduce using rule 12 (statement -> p_function_one_parameter .)
    MINUS           reduce using rule 12 (statement -> p_function_one_parameter .)
    TIMES           reduce using rule 12 (statement -> p_function_one_parameter .)
    DIVIDE          reduce using rule 12 (statement -> p_function_one_parameter .)
    MOD             reduce using rule 12 (statement -> p_function_one_parameter .)
    LBRACE          reduce using rule 12 (statement -> p_function_one_parameter .)
    NUMBER          reduce using rule 12 (statement -> p_function_one_parameter .)
    STRING          reduce using rule 12 (statement -> p_function_one_parameter .)
    IF              reduce using rule 12 (statement -> p_function_one_parameter .)
    $end            reduce using rule 12 (statement -> p_function_one_parameter .)
    END             reduce using rule 12 (statement -> p_function_one_parameter .)
    WHEN            reduce using rule 12 (statement -> p_function_one_parameter .)
    ELSE            reduce using rule 12 (statement -> p_function_one_parameter .)
    ELSIF           reduce using rule 12 (statement -> p_function_one_parameter .)


state 13

    (13) statement -> p_function_two_parameter .

    INSTANCE_VAR    reduce using rule 13 (statement -> p_function_two_parameter .)
    GLOBAL_VAR      reduce using rule 13 (statement -> p_function_two_parameter .)
    ID              reduce using rule 13 (statement -> p_function_two_parameter .)
    PRINT           reduce using rule 13 (statement -> p_function_two_parameter .)
    PUTS            reduce using rule 13 (statement -> p_function_two_parameter .)
    P               reduce using rule 13 (statement -> p_function_two_parameter .)
    LPAREN          reduce using rule 13 (statement -> p_function_two_parameter .)
    WHILE           reduce using rule 13 (statement -> p_function_two_parameter .)
    CASE            reduce using rule 13 (statement -> p_function_two_parameter .)
    DEF             reduce using rule 13 (statement -> p_function_two_parameter .)
    LBRACKET        reduce using rule 13 (statement -> p_function_two_parameter .)
    PLUS            reduce using rule 13 (statement -> p_function_two_parameter .)
    MINUS           reduce using rule 13 (statement -> p_function_two_parameter .)
    TIMES           reduce using rule 13 (statement -> p_function_two_parameter .)
    DIVIDE          reduce using rule 13 (statement -> p_function_two_parameter .)
    MOD             reduce using rule 13 (statement -> p_function_two_parameter .)
    LBRACE          reduce using rule 13 (statement -> p_function_two_parameter .)
    NUMBER          reduce using rule 13 (statement -> p_function_two_parameter .)
    STRING          reduce using rule 13 (statement -> p_function_two_parameter .)
    IF              reduce using rule 13 (statement -> p_function_two_parameter .)
    $end            reduce using rule 13 (statement -> p_function_two_parameter .)
    END             reduce using rule 13 (statement -> p_function_two_parameter .)
    WHEN            reduce using rule 13 (statement -> p_function_two_parameter .)
    ELSE            reduce using rule 13 (statement -> p_function_two_parameter .)
    ELSIF           reduce using rule 13 (statement -> p_function_two_parameter .)


state 14

    (14) statement -> aritmeticExpresion .
    (33) aritmeticExpresion -> aritmeticExpresion . operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    INSTANCE_VAR    reduce using rule 14 (statement -> aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 14 (statement -> aritmeticExpresion .)
    ID              reduce using rule 14 (statement -> aritmeticExpresion .)
    PRINT           reduce using rule 14 (statement -> aritmeticExpresion .)
    PUTS            reduce using rule 14 (statement -> aritmeticExpresion .)
    P               reduce using rule 14 (statement -> aritmeticExpresion .)
    WHILE           reduce using rule 14 (statement -> aritmeticExpresion .)
    CASE            reduce using rule 14 (statement -> aritmeticExpresion .)
    DEF             reduce using rule 14 (statement -> aritmeticExpresion .)
    LBRACKET        reduce using rule 14 (statement -> aritmeticExpresion .)
    LBRACE          reduce using rule 14 (statement -> aritmeticExpresion .)
    NUMBER          reduce using rule 14 (statement -> aritmeticExpresion .)
    STRING          reduce using rule 14 (statement -> aritmeticExpresion .)
    IF              reduce using rule 14 (statement -> aritmeticExpresion .)
    $end            reduce using rule 14 (statement -> aritmeticExpresion .)
    END             reduce using rule 14 (statement -> aritmeticExpresion .)
    WHEN            reduce using rule 14 (statement -> aritmeticExpresion .)
    ELSE            reduce using rule 14 (statement -> aritmeticExpresion .)
    ELSIF           reduce using rule 14 (statement -> aritmeticExpresion .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44

  ! LPAREN          [ reduce using rule 14 (statement -> aritmeticExpresion .) ]
  ! PLUS            [ reduce using rule 14 (statement -> aritmeticExpresion .) ]
  ! MINUS           [ reduce using rule 14 (statement -> aritmeticExpresion .) ]
  ! TIMES           [ reduce using rule 14 (statement -> aritmeticExpresion .) ]
  ! DIVIDE          [ reduce using rule 14 (statement -> aritmeticExpresion .) ]
  ! MOD             [ reduce using rule 14 (statement -> aritmeticExpresion .) ]

    operator                       shift and go to state 43

state 15

    (15) statement -> operator .

    INSTANCE_VAR    reduce using rule 15 (statement -> operator .)
    GLOBAL_VAR      reduce using rule 15 (statement -> operator .)
    ID              reduce using rule 15 (statement -> operator .)
    PRINT           reduce using rule 15 (statement -> operator .)
    PUTS            reduce using rule 15 (statement -> operator .)
    P               reduce using rule 15 (statement -> operator .)
    LPAREN          reduce using rule 15 (statement -> operator .)
    WHILE           reduce using rule 15 (statement -> operator .)
    CASE            reduce using rule 15 (statement -> operator .)
    DEF             reduce using rule 15 (statement -> operator .)
    LBRACKET        reduce using rule 15 (statement -> operator .)
    PLUS            reduce using rule 15 (statement -> operator .)
    MINUS           reduce using rule 15 (statement -> operator .)
    TIMES           reduce using rule 15 (statement -> operator .)
    DIVIDE          reduce using rule 15 (statement -> operator .)
    MOD             reduce using rule 15 (statement -> operator .)
    LBRACE          reduce using rule 15 (statement -> operator .)
    NUMBER          reduce using rule 15 (statement -> operator .)
    STRING          reduce using rule 15 (statement -> operator .)
    IF              reduce using rule 15 (statement -> operator .)
    $end            reduce using rule 15 (statement -> operator .)
    END             reduce using rule 15 (statement -> operator .)
    WHEN            reduce using rule 15 (statement -> operator .)
    ELSE            reduce using rule 15 (statement -> operator .)
    ELSIF           reduce using rule 15 (statement -> operator .)


state 16

    (16) statement -> dataIn .

    INSTANCE_VAR    reduce using rule 16 (statement -> dataIn .)
    GLOBAL_VAR      reduce using rule 16 (statement -> dataIn .)
    ID              reduce using rule 16 (statement -> dataIn .)
    PRINT           reduce using rule 16 (statement -> dataIn .)
    PUTS            reduce using rule 16 (statement -> dataIn .)
    P               reduce using rule 16 (statement -> dataIn .)
    LPAREN          reduce using rule 16 (statement -> dataIn .)
    WHILE           reduce using rule 16 (statement -> dataIn .)
    CASE            reduce using rule 16 (statement -> dataIn .)
    DEF             reduce using rule 16 (statement -> dataIn .)
    LBRACKET        reduce using rule 16 (statement -> dataIn .)
    PLUS            reduce using rule 16 (statement -> dataIn .)
    MINUS           reduce using rule 16 (statement -> dataIn .)
    TIMES           reduce using rule 16 (statement -> dataIn .)
    DIVIDE          reduce using rule 16 (statement -> dataIn .)
    MOD             reduce using rule 16 (statement -> dataIn .)
    LBRACE          reduce using rule 16 (statement -> dataIn .)
    NUMBER          reduce using rule 16 (statement -> dataIn .)
    STRING          reduce using rule 16 (statement -> dataIn .)
    IF              reduce using rule 16 (statement -> dataIn .)
    $end            reduce using rule 16 (statement -> dataIn .)
    END             reduce using rule 16 (statement -> dataIn .)
    WHEN            reduce using rule 16 (statement -> dataIn .)
    ELSE            reduce using rule 16 (statement -> dataIn .)
    ELSIF           reduce using rule 16 (statement -> dataIn .)


state 17

    (17) statement -> control_structures .

    INSTANCE_VAR    reduce using rule 17 (statement -> control_structures .)
    GLOBAL_VAR      reduce using rule 17 (statement -> control_structures .)
    ID              reduce using rule 17 (statement -> control_structures .)
    PRINT           reduce using rule 17 (statement -> control_structures .)
    PUTS            reduce using rule 17 (statement -> control_structures .)
    P               reduce using rule 17 (statement -> control_structures .)
    LPAREN          reduce using rule 17 (statement -> control_structures .)
    WHILE           reduce using rule 17 (statement -> control_structures .)
    CASE            reduce using rule 17 (statement -> control_structures .)
    DEF             reduce using rule 17 (statement -> control_structures .)
    LBRACKET        reduce using rule 17 (statement -> control_structures .)
    PLUS            reduce using rule 17 (statement -> control_structures .)
    MINUS           reduce using rule 17 (statement -> control_structures .)
    TIMES           reduce using rule 17 (statement -> control_structures .)
    DIVIDE          reduce using rule 17 (statement -> control_structures .)
    MOD             reduce using rule 17 (statement -> control_structures .)
    LBRACE          reduce using rule 17 (statement -> control_structures .)
    NUMBER          reduce using rule 17 (statement -> control_structures .)
    STRING          reduce using rule 17 (statement -> control_structures .)
    IF              reduce using rule 17 (statement -> control_structures .)
    $end            reduce using rule 17 (statement -> control_structures .)
    END             reduce using rule 17 (statement -> control_structures .)
    WHEN            reduce using rule 17 (statement -> control_structures .)
    ELSE            reduce using rule 17 (statement -> control_structures .)
    ELSIF           reduce using rule 17 (statement -> control_structures .)


state 18

    (18) statement -> hash .

    INSTANCE_VAR    reduce using rule 18 (statement -> hash .)
    GLOBAL_VAR      reduce using rule 18 (statement -> hash .)
    ID              reduce using rule 18 (statement -> hash .)
    PRINT           reduce using rule 18 (statement -> hash .)
    PUTS            reduce using rule 18 (statement -> hash .)
    P               reduce using rule 18 (statement -> hash .)
    LPAREN          reduce using rule 18 (statement -> hash .)
    WHILE           reduce using rule 18 (statement -> hash .)
    CASE            reduce using rule 18 (statement -> hash .)
    DEF             reduce using rule 18 (statement -> hash .)
    LBRACKET        reduce using rule 18 (statement -> hash .)
    PLUS            reduce using rule 18 (statement -> hash .)
    MINUS           reduce using rule 18 (statement -> hash .)
    TIMES           reduce using rule 18 (statement -> hash .)
    DIVIDE          reduce using rule 18 (statement -> hash .)
    MOD             reduce using rule 18 (statement -> hash .)
    LBRACE          reduce using rule 18 (statement -> hash .)
    NUMBER          reduce using rule 18 (statement -> hash .)
    STRING          reduce using rule 18 (statement -> hash .)
    IF              reduce using rule 18 (statement -> hash .)
    $end            reduce using rule 18 (statement -> hash .)
    END             reduce using rule 18 (statement -> hash .)
    WHEN            reduce using rule 18 (statement -> hash .)
    ELSE            reduce using rule 18 (statement -> hash .)
    ELSIF           reduce using rule 18 (statement -> hash .)


state 19

    (26) assign -> INSTANCE_VAR . ASSIGN value
    (29) assign -> INSTANCE_VAR . ASSIGN data_structure
    (92) dataIn -> INSTANCE_VAR . ASSIGN GETS
    (21) value -> INSTANCE_VAR .

    ASSIGN          shift and go to state 45
    PLUS            reduce using rule 21 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 21 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 21 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 21 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 21 (value -> INSTANCE_VAR .)
    LPAREN          reduce using rule 21 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 21 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 21 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 21 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 21 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 21 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 21 (value -> INSTANCE_VAR .)


state 20

    (32) aritmeticExpresion -> value . operator value
    (52) condition -> value . operComp value
    (53) condition -> value . operComp aritmeticExpresion
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (56) operComp -> . LESSTHAN
    (57) operComp -> . GREATERTHAN
    (58) operComp -> . GREATEROREQUAL
    (59) operComp -> . LESSOREQUAL
    (60) operComp -> . EQUAL
    (61) operComp -> . NOTEQUAL

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44
    LESSTHAN        shift and go to state 48
    GREATERTHAN     shift and go to state 49
    GREATEROREQUAL  shift and go to state 50
    LESSOREQUAL     shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53

    operator                       shift and go to state 46
    operComp                       shift and go to state 47

state 21

    (27) assign -> GLOBAL_VAR . ASSIGN value
    (30) assign -> GLOBAL_VAR . ASSIGN data_structure
    (93) dataIn -> GLOBAL_VAR . ASSIGN GETS
    (22) value -> GLOBAL_VAR .

    ASSIGN          shift and go to state 54
    PLUS            reduce using rule 22 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 22 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 22 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 22 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 22 (value -> GLOBAL_VAR .)
    LPAREN          reduce using rule 22 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 22 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 22 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 22 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 22 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 22 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 22 (value -> GLOBAL_VAR .)


state 22

    (28) assign -> ID . ASSIGN value
    (31) assign -> ID . ASSIGN data_structure
    (77) p_SfunctionINV -> ID .
    (78) p_SfunctionINV -> ID . LPAREN params RPAREN
    (91) dataIn -> ID . ASSIGN GETS
    (23) value -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
  ! reduce/reduce conflict for PLUS resolved using rule 23 (value -> ID .)
  ! reduce/reduce conflict for MINUS resolved using rule 23 (value -> ID .)
  ! reduce/reduce conflict for TIMES resolved using rule 23 (value -> ID .)
  ! reduce/reduce conflict for DIVIDE resolved using rule 23 (value -> ID .)
  ! reduce/reduce conflict for MOD resolved using rule 23 (value -> ID .)
  ! shift/reduce conflict for LPAREN resolved as shift
    ASSIGN          shift and go to state 55
    INSTANCE_VAR    reduce using rule 77 (p_SfunctionINV -> ID .)
    GLOBAL_VAR      reduce using rule 77 (p_SfunctionINV -> ID .)
    ID              reduce using rule 77 (p_SfunctionINV -> ID .)
    PRINT           reduce using rule 77 (p_SfunctionINV -> ID .)
    PUTS            reduce using rule 77 (p_SfunctionINV -> ID .)
    P               reduce using rule 77 (p_SfunctionINV -> ID .)
    WHILE           reduce using rule 77 (p_SfunctionINV -> ID .)
    CASE            reduce using rule 77 (p_SfunctionINV -> ID .)
    DEF             reduce using rule 77 (p_SfunctionINV -> ID .)
    LBRACKET        reduce using rule 77 (p_SfunctionINV -> ID .)
    LBRACE          reduce using rule 77 (p_SfunctionINV -> ID .)
    NUMBER          reduce using rule 77 (p_SfunctionINV -> ID .)
    STRING          reduce using rule 77 (p_SfunctionINV -> ID .)
    IF              reduce using rule 77 (p_SfunctionINV -> ID .)
    $end            reduce using rule 77 (p_SfunctionINV -> ID .)
    END             reduce using rule 77 (p_SfunctionINV -> ID .)
    WHEN            reduce using rule 77 (p_SfunctionINV -> ID .)
    ELSE            reduce using rule 77 (p_SfunctionINV -> ID .)
    ELSIF           reduce using rule 77 (p_SfunctionINV -> ID .)
    LPAREN          shift and go to state 56
    PLUS            reduce using rule 23 (value -> ID .)
    MINUS           reduce using rule 23 (value -> ID .)
    TIMES           reduce using rule 23 (value -> ID .)
    DIVIDE          reduce using rule 23 (value -> ID .)
    MOD             reduce using rule 23 (value -> ID .)
    LESSTHAN        reduce using rule 23 (value -> ID .)
    GREATERTHAN     reduce using rule 23 (value -> ID .)
    GREATEROREQUAL  reduce using rule 23 (value -> ID .)
    LESSOREQUAL     reduce using rule 23 (value -> ID .)
    EQUAL           reduce using rule 23 (value -> ID .)
    NOTEQUAL        reduce using rule 23 (value -> ID .)

  ! LPAREN          [ reduce using rule 77 (p_SfunctionINV -> ID .) ]
  ! PLUS            [ reduce using rule 77 (p_SfunctionINV -> ID .) ]
  ! MINUS           [ reduce using rule 77 (p_SfunctionINV -> ID .) ]
  ! TIMES           [ reduce using rule 77 (p_SfunctionINV -> ID .) ]
  ! DIVIDE          [ reduce using rule 77 (p_SfunctionINV -> ID .) ]
  ! MOD             [ reduce using rule 77 (p_SfunctionINV -> ID .) ]
  ! LPAREN          [ reduce using rule 23 (value -> ID .) ]


state 23

    (83) impression -> PRINT . LPAREN values RPAREN
    (84) impression -> PRINT . values
    (89) impression -> PRINT .
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LPAREN          shift and go to state 57
    PRINT           reduce using rule 89 (impression -> PRINT .)
    PUTS            reduce using rule 89 (impression -> PRINT .)
    P               reduce using rule 89 (impression -> PRINT .)
    WHILE           reduce using rule 89 (impression -> PRINT .)
    CASE            reduce using rule 89 (impression -> PRINT .)
    DEF             reduce using rule 89 (impression -> PRINT .)
    LBRACKET        reduce using rule 89 (impression -> PRINT .)
    PLUS            reduce using rule 89 (impression -> PRINT .)
    MINUS           reduce using rule 89 (impression -> PRINT .)
    TIMES           reduce using rule 89 (impression -> PRINT .)
    DIVIDE          reduce using rule 89 (impression -> PRINT .)
    MOD             reduce using rule 89 (impression -> PRINT .)
    LBRACE          reduce using rule 89 (impression -> PRINT .)
    IF              reduce using rule 89 (impression -> PRINT .)
    $end            reduce using rule 89 (impression -> PRINT .)
    END             reduce using rule 89 (impression -> PRINT .)
    WHEN            reduce using rule 89 (impression -> PRINT .)
    ELSE            reduce using rule 89 (impression -> PRINT .)
    ELSIF           reduce using rule 89 (impression -> PRINT .)
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

  ! INSTANCE_VAR    [ reduce using rule 89 (impression -> PRINT .) ]
  ! GLOBAL_VAR      [ reduce using rule 89 (impression -> PRINT .) ]
  ! ID              [ reduce using rule 89 (impression -> PRINT .) ]
  ! LPAREN          [ reduce using rule 89 (impression -> PRINT .) ]
  ! NUMBER          [ reduce using rule 89 (impression -> PRINT .) ]
  ! STRING          [ reduce using rule 89 (impression -> PRINT .) ]

    values                         shift and go to state 58
    value                          shift and go to state 59

state 24

    (95) tupla -> LPAREN . values RPAREN
    (39) operator -> LPAREN . aritmeticExpresion RPAREN
    (24) values -> . value
    (25) values -> . value COMMA values
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 63
    aritmeticExpresion             shift and go to state 64
    value                          shift and go to state 65

state 25

    (85) impression -> PUTS . values
    (86) impression -> PUTS . LPAREN values RPAREN
    (90) impression -> PUTS .
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    LPAREN          shift and go to state 67
    PRINT           reduce using rule 90 (impression -> PUTS .)
    PUTS            reduce using rule 90 (impression -> PUTS .)
    P               reduce using rule 90 (impression -> PUTS .)
    WHILE           reduce using rule 90 (impression -> PUTS .)
    CASE            reduce using rule 90 (impression -> PUTS .)
    DEF             reduce using rule 90 (impression -> PUTS .)
    LBRACKET        reduce using rule 90 (impression -> PUTS .)
    PLUS            reduce using rule 90 (impression -> PUTS .)
    MINUS           reduce using rule 90 (impression -> PUTS .)
    TIMES           reduce using rule 90 (impression -> PUTS .)
    DIVIDE          reduce using rule 90 (impression -> PUTS .)
    MOD             reduce using rule 90 (impression -> PUTS .)
    LBRACE          reduce using rule 90 (impression -> PUTS .)
    IF              reduce using rule 90 (impression -> PUTS .)
    $end            reduce using rule 90 (impression -> PUTS .)
    END             reduce using rule 90 (impression -> PUTS .)
    WHEN            reduce using rule 90 (impression -> PUTS .)
    ELSE            reduce using rule 90 (impression -> PUTS .)
    ELSIF           reduce using rule 90 (impression -> PUTS .)
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

  ! INSTANCE_VAR    [ reduce using rule 90 (impression -> PUTS .) ]
  ! GLOBAL_VAR      [ reduce using rule 90 (impression -> PUTS .) ]
  ! ID              [ reduce using rule 90 (impression -> PUTS .) ]
  ! LPAREN          [ reduce using rule 90 (impression -> PUTS .) ]
  ! NUMBER          [ reduce using rule 90 (impression -> PUTS .) ]
  ! STRING          [ reduce using rule 90 (impression -> PUTS .) ]

    values                         shift and go to state 66
    value                          shift and go to state 59

state 26

    (87) impression -> P . LPAREN values RPAREN
    (88) impression -> P . values
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    LPAREN          shift and go to state 68
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 69
    value                          shift and go to state 59

state 27

    (50) conditions -> condition .
    (51) conditions -> condition . conector conditions
    (54) conector -> . AND
    (55) conector -> . OR

    INSTANCE_VAR    reduce using rule 50 (conditions -> condition .)
    GLOBAL_VAR      reduce using rule 50 (conditions -> condition .)
    ID              reduce using rule 50 (conditions -> condition .)
    PRINT           reduce using rule 50 (conditions -> condition .)
    PUTS            reduce using rule 50 (conditions -> condition .)
    P               reduce using rule 50 (conditions -> condition .)
    LPAREN          reduce using rule 50 (conditions -> condition .)
    WHILE           reduce using rule 50 (conditions -> condition .)
    CASE            reduce using rule 50 (conditions -> condition .)
    DEF             reduce using rule 50 (conditions -> condition .)
    LBRACKET        reduce using rule 50 (conditions -> condition .)
    PLUS            reduce using rule 50 (conditions -> condition .)
    MINUS           reduce using rule 50 (conditions -> condition .)
    TIMES           reduce using rule 50 (conditions -> condition .)
    DIVIDE          reduce using rule 50 (conditions -> condition .)
    MOD             reduce using rule 50 (conditions -> condition .)
    LBRACE          reduce using rule 50 (conditions -> condition .)
    NUMBER          reduce using rule 50 (conditions -> condition .)
    STRING          reduce using rule 50 (conditions -> condition .)
    IF              reduce using rule 50 (conditions -> condition .)
    $end            reduce using rule 50 (conditions -> condition .)
    RPAREN          reduce using rule 50 (conditions -> condition .)
    END             reduce using rule 50 (conditions -> condition .)
    WHEN            reduce using rule 50 (conditions -> condition .)
    ELSE            reduce using rule 50 (conditions -> condition .)
    ELSIF           reduce using rule 50 (conditions -> condition .)
    AND             shift and go to state 71
    OR              shift and go to state 72

    conector                       shift and go to state 70

state 28

    (94) while_loop -> WHILE . LPAREN conditions RPAREN codigo END

    LPAREN          shift and go to state 73


state 29

    (75) case -> CASE . whens END
    (73) whens -> . when
    (74) whens -> . whens when
    (72) when -> . WHEN conditions codigo

    WHEN            shift and go to state 76

    whens                          shift and go to state 74
    when                           shift and go to state 75

state 30

    (76) Sfunction -> DEF . ID LPAREN RPAREN codigo END
    (79) p_function_one_parameter -> DEF . ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> DEF . ID LPAREN params RPAREN codigo END

    ID              shift and go to state 77


state 31

    (43) array -> LBRACKET . RBRACKET
    (44) array -> LBRACKET . values RBRACKET
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    RBRACKET        shift and go to state 78
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 79
    value                          shift and go to state 59

state 32

    (34) operator -> PLUS .

    INSTANCE_VAR    reduce using rule 34 (operator -> PLUS .)
    GLOBAL_VAR      reduce using rule 34 (operator -> PLUS .)
    ID              reduce using rule 34 (operator -> PLUS .)
    PRINT           reduce using rule 34 (operator -> PLUS .)
    PUTS            reduce using rule 34 (operator -> PLUS .)
    P               reduce using rule 34 (operator -> PLUS .)
    LPAREN          reduce using rule 34 (operator -> PLUS .)
    WHILE           reduce using rule 34 (operator -> PLUS .)
    CASE            reduce using rule 34 (operator -> PLUS .)
    DEF             reduce using rule 34 (operator -> PLUS .)
    LBRACKET        reduce using rule 34 (operator -> PLUS .)
    PLUS            reduce using rule 34 (operator -> PLUS .)
    MINUS           reduce using rule 34 (operator -> PLUS .)
    TIMES           reduce using rule 34 (operator -> PLUS .)
    DIVIDE          reduce using rule 34 (operator -> PLUS .)
    MOD             reduce using rule 34 (operator -> PLUS .)
    LBRACE          reduce using rule 34 (operator -> PLUS .)
    NUMBER          reduce using rule 34 (operator -> PLUS .)
    STRING          reduce using rule 34 (operator -> PLUS .)
    IF              reduce using rule 34 (operator -> PLUS .)
    $end            reduce using rule 34 (operator -> PLUS .)
    END             reduce using rule 34 (operator -> PLUS .)
    WHEN            reduce using rule 34 (operator -> PLUS .)
    ELSE            reduce using rule 34 (operator -> PLUS .)
    ELSIF           reduce using rule 34 (operator -> PLUS .)


state 33

    (35) operator -> MINUS .

    INSTANCE_VAR    reduce using rule 35 (operator -> MINUS .)
    GLOBAL_VAR      reduce using rule 35 (operator -> MINUS .)
    ID              reduce using rule 35 (operator -> MINUS .)
    PRINT           reduce using rule 35 (operator -> MINUS .)
    PUTS            reduce using rule 35 (operator -> MINUS .)
    P               reduce using rule 35 (operator -> MINUS .)
    LPAREN          reduce using rule 35 (operator -> MINUS .)
    WHILE           reduce using rule 35 (operator -> MINUS .)
    CASE            reduce using rule 35 (operator -> MINUS .)
    DEF             reduce using rule 35 (operator -> MINUS .)
    LBRACKET        reduce using rule 35 (operator -> MINUS .)
    PLUS            reduce using rule 35 (operator -> MINUS .)
    MINUS           reduce using rule 35 (operator -> MINUS .)
    TIMES           reduce using rule 35 (operator -> MINUS .)
    DIVIDE          reduce using rule 35 (operator -> MINUS .)
    MOD             reduce using rule 35 (operator -> MINUS .)
    LBRACE          reduce using rule 35 (operator -> MINUS .)
    NUMBER          reduce using rule 35 (operator -> MINUS .)
    STRING          reduce using rule 35 (operator -> MINUS .)
    IF              reduce using rule 35 (operator -> MINUS .)
    $end            reduce using rule 35 (operator -> MINUS .)
    END             reduce using rule 35 (operator -> MINUS .)
    WHEN            reduce using rule 35 (operator -> MINUS .)
    ELSE            reduce using rule 35 (operator -> MINUS .)
    ELSIF           reduce using rule 35 (operator -> MINUS .)


state 34

    (36) operator -> TIMES .

    INSTANCE_VAR    reduce using rule 36 (operator -> TIMES .)
    GLOBAL_VAR      reduce using rule 36 (operator -> TIMES .)
    ID              reduce using rule 36 (operator -> TIMES .)
    PRINT           reduce using rule 36 (operator -> TIMES .)
    PUTS            reduce using rule 36 (operator -> TIMES .)
    P               reduce using rule 36 (operator -> TIMES .)
    LPAREN          reduce using rule 36 (operator -> TIMES .)
    WHILE           reduce using rule 36 (operator -> TIMES .)
    CASE            reduce using rule 36 (operator -> TIMES .)
    DEF             reduce using rule 36 (operator -> TIMES .)
    LBRACKET        reduce using rule 36 (operator -> TIMES .)
    PLUS            reduce using rule 36 (operator -> TIMES .)
    MINUS           reduce using rule 36 (operator -> TIMES .)
    TIMES           reduce using rule 36 (operator -> TIMES .)
    DIVIDE          reduce using rule 36 (operator -> TIMES .)
    MOD             reduce using rule 36 (operator -> TIMES .)
    LBRACE          reduce using rule 36 (operator -> TIMES .)
    NUMBER          reduce using rule 36 (operator -> TIMES .)
    STRING          reduce using rule 36 (operator -> TIMES .)
    IF              reduce using rule 36 (operator -> TIMES .)
    $end            reduce using rule 36 (operator -> TIMES .)
    END             reduce using rule 36 (operator -> TIMES .)
    WHEN            reduce using rule 36 (operator -> TIMES .)
    ELSE            reduce using rule 36 (operator -> TIMES .)
    ELSIF           reduce using rule 36 (operator -> TIMES .)


state 35

    (37) operator -> DIVIDE .

    INSTANCE_VAR    reduce using rule 37 (operator -> DIVIDE .)
    GLOBAL_VAR      reduce using rule 37 (operator -> DIVIDE .)
    ID              reduce using rule 37 (operator -> DIVIDE .)
    PRINT           reduce using rule 37 (operator -> DIVIDE .)
    PUTS            reduce using rule 37 (operator -> DIVIDE .)
    P               reduce using rule 37 (operator -> DIVIDE .)
    LPAREN          reduce using rule 37 (operator -> DIVIDE .)
    WHILE           reduce using rule 37 (operator -> DIVIDE .)
    CASE            reduce using rule 37 (operator -> DIVIDE .)
    DEF             reduce using rule 37 (operator -> DIVIDE .)
    LBRACKET        reduce using rule 37 (operator -> DIVIDE .)
    PLUS            reduce using rule 37 (operator -> DIVIDE .)
    MINUS           reduce using rule 37 (operator -> DIVIDE .)
    TIMES           reduce using rule 37 (operator -> DIVIDE .)
    DIVIDE          reduce using rule 37 (operator -> DIVIDE .)
    MOD             reduce using rule 37 (operator -> DIVIDE .)
    LBRACE          reduce using rule 37 (operator -> DIVIDE .)
    NUMBER          reduce using rule 37 (operator -> DIVIDE .)
    STRING          reduce using rule 37 (operator -> DIVIDE .)
    IF              reduce using rule 37 (operator -> DIVIDE .)
    $end            reduce using rule 37 (operator -> DIVIDE .)
    END             reduce using rule 37 (operator -> DIVIDE .)
    WHEN            reduce using rule 37 (operator -> DIVIDE .)
    ELSE            reduce using rule 37 (operator -> DIVIDE .)
    ELSIF           reduce using rule 37 (operator -> DIVIDE .)


state 36

    (38) operator -> MOD .

    INSTANCE_VAR    reduce using rule 38 (operator -> MOD .)
    GLOBAL_VAR      reduce using rule 38 (operator -> MOD .)
    ID              reduce using rule 38 (operator -> MOD .)
    PRINT           reduce using rule 38 (operator -> MOD .)
    PUTS            reduce using rule 38 (operator -> MOD .)
    P               reduce using rule 38 (operator -> MOD .)
    LPAREN          reduce using rule 38 (operator -> MOD .)
    WHILE           reduce using rule 38 (operator -> MOD .)
    CASE            reduce using rule 38 (operator -> MOD .)
    DEF             reduce using rule 38 (operator -> MOD .)
    LBRACKET        reduce using rule 38 (operator -> MOD .)
    PLUS            reduce using rule 38 (operator -> MOD .)
    MINUS           reduce using rule 38 (operator -> MOD .)
    TIMES           reduce using rule 38 (operator -> MOD .)
    DIVIDE          reduce using rule 38 (operator -> MOD .)
    MOD             reduce using rule 38 (operator -> MOD .)
    LBRACE          reduce using rule 38 (operator -> MOD .)
    NUMBER          reduce using rule 38 (operator -> MOD .)
    STRING          reduce using rule 38 (operator -> MOD .)
    IF              reduce using rule 38 (operator -> MOD .)
    $end            reduce using rule 38 (operator -> MOD .)
    END             reduce using rule 38 (operator -> MOD .)
    WHEN            reduce using rule 38 (operator -> MOD .)
    ELSE            reduce using rule 38 (operator -> MOD .)
    ELSIF           reduce using rule 38 (operator -> MOD .)


state 37

    (62) control_structures -> if_block .
    (63) control_structures -> if_block . elsif_blocks
    (64) control_structures -> if_block . elsif_blocks else_block
    (65) control_structures -> if_block . else_block
    (68) elsif_blocks -> . elsif_block
    (69) elsif_blocks -> . elsif_blocks elsif_block
    (71) else_block -> . ELSE codigo END
    (70) elsif_block -> . ELSIF LPAREN conditions RPAREN codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    INSTANCE_VAR    reduce using rule 62 (control_structures -> if_block .)
    GLOBAL_VAR      reduce using rule 62 (control_structures -> if_block .)
    ID              reduce using rule 62 (control_structures -> if_block .)
    PRINT           reduce using rule 62 (control_structures -> if_block .)
    PUTS            reduce using rule 62 (control_structures -> if_block .)
    P               reduce using rule 62 (control_structures -> if_block .)
    LPAREN          reduce using rule 62 (control_structures -> if_block .)
    WHILE           reduce using rule 62 (control_structures -> if_block .)
    CASE            reduce using rule 62 (control_structures -> if_block .)
    DEF             reduce using rule 62 (control_structures -> if_block .)
    LBRACKET        reduce using rule 62 (control_structures -> if_block .)
    PLUS            reduce using rule 62 (control_structures -> if_block .)
    MINUS           reduce using rule 62 (control_structures -> if_block .)
    TIMES           reduce using rule 62 (control_structures -> if_block .)
    DIVIDE          reduce using rule 62 (control_structures -> if_block .)
    MOD             reduce using rule 62 (control_structures -> if_block .)
    LBRACE          reduce using rule 62 (control_structures -> if_block .)
    NUMBER          reduce using rule 62 (control_structures -> if_block .)
    STRING          reduce using rule 62 (control_structures -> if_block .)
    IF              reduce using rule 62 (control_structures -> if_block .)
    $end            reduce using rule 62 (control_structures -> if_block .)
    END             reduce using rule 62 (control_structures -> if_block .)
    WHEN            reduce using rule 62 (control_structures -> if_block .)
    ELSE            shift and go to state 83
    ELSIF           shift and go to state 84

  ! ELSE            [ reduce using rule 62 (control_structures -> if_block .) ]
  ! ELSIF           [ reduce using rule 62 (control_structures -> if_block .) ]

    elsif_blocks                   shift and go to state 80
    else_block                     shift and go to state 81
    elsif_block                    shift and go to state 82

state 38

    (45) hash -> LBRACE . RBRACE
    (46) hash -> LBRACE . hash_contents RBRACE
    (47) hash_contents -> . hash_pair
    (48) hash_contents -> . hash_contents COMMA hash_pair
    (49) hash_pair -> . value COLON value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    RBRACE          shift and go to state 85
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    hash_contents                  shift and go to state 86
    hash_pair                      shift and go to state 87
    value                          shift and go to state 88

state 39

    (19) value -> NUMBER .

    PLUS            reduce using rule 19 (value -> NUMBER .)
    MINUS           reduce using rule 19 (value -> NUMBER .)
    TIMES           reduce using rule 19 (value -> NUMBER .)
    DIVIDE          reduce using rule 19 (value -> NUMBER .)
    MOD             reduce using rule 19 (value -> NUMBER .)
    LPAREN          reduce using rule 19 (value -> NUMBER .)
    LESSTHAN        reduce using rule 19 (value -> NUMBER .)
    GREATERTHAN     reduce using rule 19 (value -> NUMBER .)
    GREATEROREQUAL  reduce using rule 19 (value -> NUMBER .)
    LESSOREQUAL     reduce using rule 19 (value -> NUMBER .)
    EQUAL           reduce using rule 19 (value -> NUMBER .)
    NOTEQUAL        reduce using rule 19 (value -> NUMBER .)
    COMMA           reduce using rule 19 (value -> NUMBER .)
    INSTANCE_VAR    reduce using rule 19 (value -> NUMBER .)
    GLOBAL_VAR      reduce using rule 19 (value -> NUMBER .)
    ID              reduce using rule 19 (value -> NUMBER .)
    PRINT           reduce using rule 19 (value -> NUMBER .)
    PUTS            reduce using rule 19 (value -> NUMBER .)
    P               reduce using rule 19 (value -> NUMBER .)
    WHILE           reduce using rule 19 (value -> NUMBER .)
    CASE            reduce using rule 19 (value -> NUMBER .)
    DEF             reduce using rule 19 (value -> NUMBER .)
    LBRACKET        reduce using rule 19 (value -> NUMBER .)
    LBRACE          reduce using rule 19 (value -> NUMBER .)
    NUMBER          reduce using rule 19 (value -> NUMBER .)
    STRING          reduce using rule 19 (value -> NUMBER .)
    IF              reduce using rule 19 (value -> NUMBER .)
    $end            reduce using rule 19 (value -> NUMBER .)
    END             reduce using rule 19 (value -> NUMBER .)
    WHEN            reduce using rule 19 (value -> NUMBER .)
    ELSE            reduce using rule 19 (value -> NUMBER .)
    ELSIF           reduce using rule 19 (value -> NUMBER .)
    RPAREN          reduce using rule 19 (value -> NUMBER .)
    RBRACKET        reduce using rule 19 (value -> NUMBER .)
    COLON           reduce using rule 19 (value -> NUMBER .)
    AND             reduce using rule 19 (value -> NUMBER .)
    OR              reduce using rule 19 (value -> NUMBER .)
    RBRACE          reduce using rule 19 (value -> NUMBER .)


state 40

    (20) value -> STRING .

    PLUS            reduce using rule 20 (value -> STRING .)
    MINUS           reduce using rule 20 (value -> STRING .)
    TIMES           reduce using rule 20 (value -> STRING .)
    DIVIDE          reduce using rule 20 (value -> STRING .)
    MOD             reduce using rule 20 (value -> STRING .)
    LPAREN          reduce using rule 20 (value -> STRING .)
    LESSTHAN        reduce using rule 20 (value -> STRING .)
    GREATERTHAN     reduce using rule 20 (value -> STRING .)
    GREATEROREQUAL  reduce using rule 20 (value -> STRING .)
    LESSOREQUAL     reduce using rule 20 (value -> STRING .)
    EQUAL           reduce using rule 20 (value -> STRING .)
    NOTEQUAL        reduce using rule 20 (value -> STRING .)
    COMMA           reduce using rule 20 (value -> STRING .)
    INSTANCE_VAR    reduce using rule 20 (value -> STRING .)
    GLOBAL_VAR      reduce using rule 20 (value -> STRING .)
    ID              reduce using rule 20 (value -> STRING .)
    PRINT           reduce using rule 20 (value -> STRING .)
    PUTS            reduce using rule 20 (value -> STRING .)
    P               reduce using rule 20 (value -> STRING .)
    WHILE           reduce using rule 20 (value -> STRING .)
    CASE            reduce using rule 20 (value -> STRING .)
    DEF             reduce using rule 20 (value -> STRING .)
    LBRACKET        reduce using rule 20 (value -> STRING .)
    LBRACE          reduce using rule 20 (value -> STRING .)
    NUMBER          reduce using rule 20 (value -> STRING .)
    STRING          reduce using rule 20 (value -> STRING .)
    IF              reduce using rule 20 (value -> STRING .)
    $end            reduce using rule 20 (value -> STRING .)
    END             reduce using rule 20 (value -> STRING .)
    WHEN            reduce using rule 20 (value -> STRING .)
    ELSE            reduce using rule 20 (value -> STRING .)
    ELSIF           reduce using rule 20 (value -> STRING .)
    RPAREN          reduce using rule 20 (value -> STRING .)
    RBRACKET        reduce using rule 20 (value -> STRING .)
    COLON           reduce using rule 20 (value -> STRING .)
    AND             reduce using rule 20 (value -> STRING .)
    OR              reduce using rule 20 (value -> STRING .)
    RBRACE          reduce using rule 20 (value -> STRING .)


state 41

    (66) if_block -> IF . LPAREN conditions RPAREN codigo
    (67) if_block -> IF . LPAREN conditions RPAREN codigo END

    LPAREN          shift and go to state 89


state 42

    (2) codigo -> codigo statement .

    INSTANCE_VAR    reduce using rule 2 (codigo -> codigo statement .)
    GLOBAL_VAR      reduce using rule 2 (codigo -> codigo statement .)
    ID              reduce using rule 2 (codigo -> codigo statement .)
    PRINT           reduce using rule 2 (codigo -> codigo statement .)
    PUTS            reduce using rule 2 (codigo -> codigo statement .)
    P               reduce using rule 2 (codigo -> codigo statement .)
    LPAREN          reduce using rule 2 (codigo -> codigo statement .)
    WHILE           reduce using rule 2 (codigo -> codigo statement .)
    CASE            reduce using rule 2 (codigo -> codigo statement .)
    DEF             reduce using rule 2 (codigo -> codigo statement .)
    LBRACKET        reduce using rule 2 (codigo -> codigo statement .)
    PLUS            reduce using rule 2 (codigo -> codigo statement .)
    MINUS           reduce using rule 2 (codigo -> codigo statement .)
    TIMES           reduce using rule 2 (codigo -> codigo statement .)
    DIVIDE          reduce using rule 2 (codigo -> codigo statement .)
    MOD             reduce using rule 2 (codigo -> codigo statement .)
    LBRACE          reduce using rule 2 (codigo -> codigo statement .)
    NUMBER          reduce using rule 2 (codigo -> codigo statement .)
    STRING          reduce using rule 2 (codigo -> codigo statement .)
    IF              reduce using rule 2 (codigo -> codigo statement .)
    $end            reduce using rule 2 (codigo -> codigo statement .)
    END             reduce using rule 2 (codigo -> codigo statement .)
    WHEN            reduce using rule 2 (codigo -> codigo statement .)
    ELSE            reduce using rule 2 (codigo -> codigo statement .)
    ELSIF           reduce using rule 2 (codigo -> codigo statement .)


state 43

    (33) aritmeticExpresion -> aritmeticExpresion operator . value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 90

state 44

    (39) operator -> LPAREN . aritmeticExpresion RPAREN
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    aritmeticExpresion             shift and go to state 64
    value                          shift and go to state 91

state 45

    (26) assign -> INSTANCE_VAR ASSIGN . value
    (29) assign -> INSTANCE_VAR ASSIGN . data_structure
    (92) dataIn -> INSTANCE_VAR ASSIGN . GETS
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (40) data_structure -> . array
    (41) data_structure -> . tupla
    (42) data_structure -> . hash
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (95) tupla -> . LPAREN values RPAREN
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 94
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 98
    LBRACE          shift and go to state 38

    value                          shift and go to state 92
    data_structure                 shift and go to state 93
    array                          shift and go to state 95
    tupla                          shift and go to state 96
    hash                           shift and go to state 97

state 46

    (32) aritmeticExpresion -> value operator . value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 99

state 47

    (52) condition -> value operComp . value
    (53) condition -> value operComp . aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 100
    aritmeticExpresion             shift and go to state 101

state 48

    (56) operComp -> LESSTHAN .

    NUMBER          reduce using rule 56 (operComp -> LESSTHAN .)
    STRING          reduce using rule 56 (operComp -> LESSTHAN .)
    INSTANCE_VAR    reduce using rule 56 (operComp -> LESSTHAN .)
    GLOBAL_VAR      reduce using rule 56 (operComp -> LESSTHAN .)
    ID              reduce using rule 56 (operComp -> LESSTHAN .)


state 49

    (57) operComp -> GREATERTHAN .

    NUMBER          reduce using rule 57 (operComp -> GREATERTHAN .)
    STRING          reduce using rule 57 (operComp -> GREATERTHAN .)
    INSTANCE_VAR    reduce using rule 57 (operComp -> GREATERTHAN .)
    GLOBAL_VAR      reduce using rule 57 (operComp -> GREATERTHAN .)
    ID              reduce using rule 57 (operComp -> GREATERTHAN .)


state 50

    (58) operComp -> GREATEROREQUAL .

    NUMBER          reduce using rule 58 (operComp -> GREATEROREQUAL .)
    STRING          reduce using rule 58 (operComp -> GREATEROREQUAL .)
    INSTANCE_VAR    reduce using rule 58 (operComp -> GREATEROREQUAL .)
    GLOBAL_VAR      reduce using rule 58 (operComp -> GREATEROREQUAL .)
    ID              reduce using rule 58 (operComp -> GREATEROREQUAL .)


state 51

    (59) operComp -> LESSOREQUAL .

    NUMBER          reduce using rule 59 (operComp -> LESSOREQUAL .)
    STRING          reduce using rule 59 (operComp -> LESSOREQUAL .)
    INSTANCE_VAR    reduce using rule 59 (operComp -> LESSOREQUAL .)
    GLOBAL_VAR      reduce using rule 59 (operComp -> LESSOREQUAL .)
    ID              reduce using rule 59 (operComp -> LESSOREQUAL .)


state 52

    (60) operComp -> EQUAL .

    NUMBER          reduce using rule 60 (operComp -> EQUAL .)
    STRING          reduce using rule 60 (operComp -> EQUAL .)
    INSTANCE_VAR    reduce using rule 60 (operComp -> EQUAL .)
    GLOBAL_VAR      reduce using rule 60 (operComp -> EQUAL .)
    ID              reduce using rule 60 (operComp -> EQUAL .)


state 53

    (61) operComp -> NOTEQUAL .

    NUMBER          reduce using rule 61 (operComp -> NOTEQUAL .)
    STRING          reduce using rule 61 (operComp -> NOTEQUAL .)
    INSTANCE_VAR    reduce using rule 61 (operComp -> NOTEQUAL .)
    GLOBAL_VAR      reduce using rule 61 (operComp -> NOTEQUAL .)
    ID              reduce using rule 61 (operComp -> NOTEQUAL .)


state 54

    (27) assign -> GLOBAL_VAR ASSIGN . value
    (30) assign -> GLOBAL_VAR ASSIGN . data_structure
    (93) dataIn -> GLOBAL_VAR ASSIGN . GETS
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (40) data_structure -> . array
    (41) data_structure -> . tupla
    (42) data_structure -> . hash
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (95) tupla -> . LPAREN values RPAREN
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 104
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 98
    LBRACE          shift and go to state 38

    value                          shift and go to state 102
    data_structure                 shift and go to state 103
    array                          shift and go to state 95
    tupla                          shift and go to state 96
    hash                           shift and go to state 97

state 55

    (28) assign -> ID ASSIGN . value
    (31) assign -> ID ASSIGN . data_structure
    (91) dataIn -> ID ASSIGN . GETS
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (40) data_structure -> . array
    (41) data_structure -> . tupla
    (42) data_structure -> . hash
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (95) tupla -> . LPAREN values RPAREN
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE

    GETS            shift and go to state 107
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62
    LBRACKET        shift and go to state 31
    LPAREN          shift and go to state 98
    LBRACE          shift and go to state 38

    value                          shift and go to state 105
    data_structure                 shift and go to state 106
    array                          shift and go to state 95
    tupla                          shift and go to state 96
    hash                           shift and go to state 97

state 56

    (78) p_SfunctionINV -> ID LPAREN . params RPAREN
    (82) params -> . value COMMA value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    params                         shift and go to state 108
    value                          shift and go to state 109

state 57

    (83) impression -> PRINT LPAREN . values RPAREN
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 110
    value                          shift and go to state 59

state 58

    (84) impression -> PRINT values .

    INSTANCE_VAR    reduce using rule 84 (impression -> PRINT values .)
    GLOBAL_VAR      reduce using rule 84 (impression -> PRINT values .)
    ID              reduce using rule 84 (impression -> PRINT values .)
    PRINT           reduce using rule 84 (impression -> PRINT values .)
    PUTS            reduce using rule 84 (impression -> PRINT values .)
    P               reduce using rule 84 (impression -> PRINT values .)
    LPAREN          reduce using rule 84 (impression -> PRINT values .)
    WHILE           reduce using rule 84 (impression -> PRINT values .)
    CASE            reduce using rule 84 (impression -> PRINT values .)
    DEF             reduce using rule 84 (impression -> PRINT values .)
    LBRACKET        reduce using rule 84 (impression -> PRINT values .)
    PLUS            reduce using rule 84 (impression -> PRINT values .)
    MINUS           reduce using rule 84 (impression -> PRINT values .)
    TIMES           reduce using rule 84 (impression -> PRINT values .)
    DIVIDE          reduce using rule 84 (impression -> PRINT values .)
    MOD             reduce using rule 84 (impression -> PRINT values .)
    LBRACE          reduce using rule 84 (impression -> PRINT values .)
    NUMBER          reduce using rule 84 (impression -> PRINT values .)
    STRING          reduce using rule 84 (impression -> PRINT values .)
    IF              reduce using rule 84 (impression -> PRINT values .)
    $end            reduce using rule 84 (impression -> PRINT values .)
    END             reduce using rule 84 (impression -> PRINT values .)
    WHEN            reduce using rule 84 (impression -> PRINT values .)
    ELSE            reduce using rule 84 (impression -> PRINT values .)
    ELSIF           reduce using rule 84 (impression -> PRINT values .)


state 59

    (24) values -> value .
    (25) values -> value . COMMA values

    INSTANCE_VAR    reduce using rule 24 (values -> value .)
    GLOBAL_VAR      reduce using rule 24 (values -> value .)
    ID              reduce using rule 24 (values -> value .)
    PRINT           reduce using rule 24 (values -> value .)
    PUTS            reduce using rule 24 (values -> value .)
    P               reduce using rule 24 (values -> value .)
    LPAREN          reduce using rule 24 (values -> value .)
    WHILE           reduce using rule 24 (values -> value .)
    CASE            reduce using rule 24 (values -> value .)
    DEF             reduce using rule 24 (values -> value .)
    LBRACKET        reduce using rule 24 (values -> value .)
    PLUS            reduce using rule 24 (values -> value .)
    MINUS           reduce using rule 24 (values -> value .)
    TIMES           reduce using rule 24 (values -> value .)
    DIVIDE          reduce using rule 24 (values -> value .)
    MOD             reduce using rule 24 (values -> value .)
    LBRACE          reduce using rule 24 (values -> value .)
    NUMBER          reduce using rule 24 (values -> value .)
    STRING          reduce using rule 24 (values -> value .)
    IF              reduce using rule 24 (values -> value .)
    $end            reduce using rule 24 (values -> value .)
    END             reduce using rule 24 (values -> value .)
    WHEN            reduce using rule 24 (values -> value .)
    ELSE            reduce using rule 24 (values -> value .)
    ELSIF           reduce using rule 24 (values -> value .)
    RBRACKET        reduce using rule 24 (values -> value .)
    RPAREN          reduce using rule 24 (values -> value .)
    COMMA           shift and go to state 111


state 60

    (21) value -> INSTANCE_VAR .

    COMMA           reduce using rule 21 (value -> INSTANCE_VAR .)
    INSTANCE_VAR    reduce using rule 21 (value -> INSTANCE_VAR .)
    GLOBAL_VAR      reduce using rule 21 (value -> INSTANCE_VAR .)
    ID              reduce using rule 21 (value -> INSTANCE_VAR .)
    PRINT           reduce using rule 21 (value -> INSTANCE_VAR .)
    PUTS            reduce using rule 21 (value -> INSTANCE_VAR .)
    P               reduce using rule 21 (value -> INSTANCE_VAR .)
    LPAREN          reduce using rule 21 (value -> INSTANCE_VAR .)
    WHILE           reduce using rule 21 (value -> INSTANCE_VAR .)
    CASE            reduce using rule 21 (value -> INSTANCE_VAR .)
    DEF             reduce using rule 21 (value -> INSTANCE_VAR .)
    LBRACKET        reduce using rule 21 (value -> INSTANCE_VAR .)
    PLUS            reduce using rule 21 (value -> INSTANCE_VAR .)
    MINUS           reduce using rule 21 (value -> INSTANCE_VAR .)
    TIMES           reduce using rule 21 (value -> INSTANCE_VAR .)
    DIVIDE          reduce using rule 21 (value -> INSTANCE_VAR .)
    MOD             reduce using rule 21 (value -> INSTANCE_VAR .)
    LBRACE          reduce using rule 21 (value -> INSTANCE_VAR .)
    NUMBER          reduce using rule 21 (value -> INSTANCE_VAR .)
    STRING          reduce using rule 21 (value -> INSTANCE_VAR .)
    IF              reduce using rule 21 (value -> INSTANCE_VAR .)
    $end            reduce using rule 21 (value -> INSTANCE_VAR .)
    END             reduce using rule 21 (value -> INSTANCE_VAR .)
    WHEN            reduce using rule 21 (value -> INSTANCE_VAR .)
    ELSE            reduce using rule 21 (value -> INSTANCE_VAR .)
    ELSIF           reduce using rule 21 (value -> INSTANCE_VAR .)
    RPAREN          reduce using rule 21 (value -> INSTANCE_VAR .)
    RBRACKET        reduce using rule 21 (value -> INSTANCE_VAR .)
    COLON           reduce using rule 21 (value -> INSTANCE_VAR .)
    AND             reduce using rule 21 (value -> INSTANCE_VAR .)
    OR              reduce using rule 21 (value -> INSTANCE_VAR .)
    LESSTHAN        reduce using rule 21 (value -> INSTANCE_VAR .)
    GREATERTHAN     reduce using rule 21 (value -> INSTANCE_VAR .)
    GREATEROREQUAL  reduce using rule 21 (value -> INSTANCE_VAR .)
    LESSOREQUAL     reduce using rule 21 (value -> INSTANCE_VAR .)
    EQUAL           reduce using rule 21 (value -> INSTANCE_VAR .)
    NOTEQUAL        reduce using rule 21 (value -> INSTANCE_VAR .)
    RBRACE          reduce using rule 21 (value -> INSTANCE_VAR .)


state 61

    (22) value -> GLOBAL_VAR .

    COMMA           reduce using rule 22 (value -> GLOBAL_VAR .)
    INSTANCE_VAR    reduce using rule 22 (value -> GLOBAL_VAR .)
    GLOBAL_VAR      reduce using rule 22 (value -> GLOBAL_VAR .)
    ID              reduce using rule 22 (value -> GLOBAL_VAR .)
    PRINT           reduce using rule 22 (value -> GLOBAL_VAR .)
    PUTS            reduce using rule 22 (value -> GLOBAL_VAR .)
    P               reduce using rule 22 (value -> GLOBAL_VAR .)
    LPAREN          reduce using rule 22 (value -> GLOBAL_VAR .)
    WHILE           reduce using rule 22 (value -> GLOBAL_VAR .)
    CASE            reduce using rule 22 (value -> GLOBAL_VAR .)
    DEF             reduce using rule 22 (value -> GLOBAL_VAR .)
    LBRACKET        reduce using rule 22 (value -> GLOBAL_VAR .)
    PLUS            reduce using rule 22 (value -> GLOBAL_VAR .)
    MINUS           reduce using rule 22 (value -> GLOBAL_VAR .)
    TIMES           reduce using rule 22 (value -> GLOBAL_VAR .)
    DIVIDE          reduce using rule 22 (value -> GLOBAL_VAR .)
    MOD             reduce using rule 22 (value -> GLOBAL_VAR .)
    LBRACE          reduce using rule 22 (value -> GLOBAL_VAR .)
    NUMBER          reduce using rule 22 (value -> GLOBAL_VAR .)
    STRING          reduce using rule 22 (value -> GLOBAL_VAR .)
    IF              reduce using rule 22 (value -> GLOBAL_VAR .)
    $end            reduce using rule 22 (value -> GLOBAL_VAR .)
    END             reduce using rule 22 (value -> GLOBAL_VAR .)
    WHEN            reduce using rule 22 (value -> GLOBAL_VAR .)
    ELSE            reduce using rule 22 (value -> GLOBAL_VAR .)
    ELSIF           reduce using rule 22 (value -> GLOBAL_VAR .)
    RPAREN          reduce using rule 22 (value -> GLOBAL_VAR .)
    RBRACKET        reduce using rule 22 (value -> GLOBAL_VAR .)
    COLON           reduce using rule 22 (value -> GLOBAL_VAR .)
    AND             reduce using rule 22 (value -> GLOBAL_VAR .)
    OR              reduce using rule 22 (value -> GLOBAL_VAR .)
    LESSTHAN        reduce using rule 22 (value -> GLOBAL_VAR .)
    GREATERTHAN     reduce using rule 22 (value -> GLOBAL_VAR .)
    GREATEROREQUAL  reduce using rule 22 (value -> GLOBAL_VAR .)
    LESSOREQUAL     reduce using rule 22 (value -> GLOBAL_VAR .)
    EQUAL           reduce using rule 22 (value -> GLOBAL_VAR .)
    NOTEQUAL        reduce using rule 22 (value -> GLOBAL_VAR .)
    RBRACE          reduce using rule 22 (value -> GLOBAL_VAR .)


state 62

    (23) value -> ID .

    COMMA           reduce using rule 23 (value -> ID .)
    INSTANCE_VAR    reduce using rule 23 (value -> ID .)
    GLOBAL_VAR      reduce using rule 23 (value -> ID .)
    ID              reduce using rule 23 (value -> ID .)
    PRINT           reduce using rule 23 (value -> ID .)
    PUTS            reduce using rule 23 (value -> ID .)
    P               reduce using rule 23 (value -> ID .)
    LPAREN          reduce using rule 23 (value -> ID .)
    WHILE           reduce using rule 23 (value -> ID .)
    CASE            reduce using rule 23 (value -> ID .)
    DEF             reduce using rule 23 (value -> ID .)
    LBRACKET        reduce using rule 23 (value -> ID .)
    PLUS            reduce using rule 23 (value -> ID .)
    MINUS           reduce using rule 23 (value -> ID .)
    TIMES           reduce using rule 23 (value -> ID .)
    DIVIDE          reduce using rule 23 (value -> ID .)
    MOD             reduce using rule 23 (value -> ID .)
    LBRACE          reduce using rule 23 (value -> ID .)
    NUMBER          reduce using rule 23 (value -> ID .)
    STRING          reduce using rule 23 (value -> ID .)
    IF              reduce using rule 23 (value -> ID .)
    $end            reduce using rule 23 (value -> ID .)
    END             reduce using rule 23 (value -> ID .)
    WHEN            reduce using rule 23 (value -> ID .)
    ELSE            reduce using rule 23 (value -> ID .)
    ELSIF           reduce using rule 23 (value -> ID .)
    RPAREN          reduce using rule 23 (value -> ID .)
    RBRACKET        reduce using rule 23 (value -> ID .)
    COLON           reduce using rule 23 (value -> ID .)
    AND             reduce using rule 23 (value -> ID .)
    OR              reduce using rule 23 (value -> ID .)
    LESSTHAN        reduce using rule 23 (value -> ID .)
    GREATERTHAN     reduce using rule 23 (value -> ID .)
    GREATEROREQUAL  reduce using rule 23 (value -> ID .)
    LESSOREQUAL     reduce using rule 23 (value -> ID .)
    EQUAL           reduce using rule 23 (value -> ID .)
    NOTEQUAL        reduce using rule 23 (value -> ID .)
    RBRACE          reduce using rule 23 (value -> ID .)


state 63

    (95) tupla -> LPAREN values . RPAREN

    RPAREN          shift and go to state 112


state 64

    (39) operator -> LPAREN aritmeticExpresion . RPAREN
    (33) aritmeticExpresion -> aritmeticExpresion . operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN

    RPAREN          shift and go to state 113
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44

    operator                       shift and go to state 43

state 65

    (24) values -> value .
    (25) values -> value . COMMA values
    (32) aritmeticExpresion -> value . operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN

    RPAREN          reduce using rule 24 (values -> value .)
    COMMA           shift and go to state 111
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44

    operator                       shift and go to state 46

state 66

    (85) impression -> PUTS values .

    INSTANCE_VAR    reduce using rule 85 (impression -> PUTS values .)
    GLOBAL_VAR      reduce using rule 85 (impression -> PUTS values .)
    ID              reduce using rule 85 (impression -> PUTS values .)
    PRINT           reduce using rule 85 (impression -> PUTS values .)
    PUTS            reduce using rule 85 (impression -> PUTS values .)
    P               reduce using rule 85 (impression -> PUTS values .)
    LPAREN          reduce using rule 85 (impression -> PUTS values .)
    WHILE           reduce using rule 85 (impression -> PUTS values .)
    CASE            reduce using rule 85 (impression -> PUTS values .)
    DEF             reduce using rule 85 (impression -> PUTS values .)
    LBRACKET        reduce using rule 85 (impression -> PUTS values .)
    PLUS            reduce using rule 85 (impression -> PUTS values .)
    MINUS           reduce using rule 85 (impression -> PUTS values .)
    TIMES           reduce using rule 85 (impression -> PUTS values .)
    DIVIDE          reduce using rule 85 (impression -> PUTS values .)
    MOD             reduce using rule 85 (impression -> PUTS values .)
    LBRACE          reduce using rule 85 (impression -> PUTS values .)
    NUMBER          reduce using rule 85 (impression -> PUTS values .)
    STRING          reduce using rule 85 (impression -> PUTS values .)
    IF              reduce using rule 85 (impression -> PUTS values .)
    $end            reduce using rule 85 (impression -> PUTS values .)
    END             reduce using rule 85 (impression -> PUTS values .)
    WHEN            reduce using rule 85 (impression -> PUTS values .)
    ELSE            reduce using rule 85 (impression -> PUTS values .)
    ELSIF           reduce using rule 85 (impression -> PUTS values .)


state 67

    (86) impression -> PUTS LPAREN . values RPAREN
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 114
    value                          shift and go to state 59

state 68

    (87) impression -> P LPAREN . values RPAREN
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 115
    value                          shift and go to state 59

state 69

    (88) impression -> P values .

    INSTANCE_VAR    reduce using rule 88 (impression -> P values .)
    GLOBAL_VAR      reduce using rule 88 (impression -> P values .)
    ID              reduce using rule 88 (impression -> P values .)
    PRINT           reduce using rule 88 (impression -> P values .)
    PUTS            reduce using rule 88 (impression -> P values .)
    P               reduce using rule 88 (impression -> P values .)
    LPAREN          reduce using rule 88 (impression -> P values .)
    WHILE           reduce using rule 88 (impression -> P values .)
    CASE            reduce using rule 88 (impression -> P values .)
    DEF             reduce using rule 88 (impression -> P values .)
    LBRACKET        reduce using rule 88 (impression -> P values .)
    PLUS            reduce using rule 88 (impression -> P values .)
    MINUS           reduce using rule 88 (impression -> P values .)
    TIMES           reduce using rule 88 (impression -> P values .)
    DIVIDE          reduce using rule 88 (impression -> P values .)
    MOD             reduce using rule 88 (impression -> P values .)
    LBRACE          reduce using rule 88 (impression -> P values .)
    NUMBER          reduce using rule 88 (impression -> P values .)
    STRING          reduce using rule 88 (impression -> P values .)
    IF              reduce using rule 88 (impression -> P values .)
    $end            reduce using rule 88 (impression -> P values .)
    END             reduce using rule 88 (impression -> P values .)
    WHEN            reduce using rule 88 (impression -> P values .)
    ELSE            reduce using rule 88 (impression -> P values .)
    ELSIF           reduce using rule 88 (impression -> P values .)


state 70

    (51) conditions -> condition conector . conditions
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    condition                      shift and go to state 27
    conditions                     shift and go to state 116
    value                          shift and go to state 117

state 71

    (54) conector -> AND .

    NUMBER          reduce using rule 54 (conector -> AND .)
    STRING          reduce using rule 54 (conector -> AND .)
    INSTANCE_VAR    reduce using rule 54 (conector -> AND .)
    GLOBAL_VAR      reduce using rule 54 (conector -> AND .)
    ID              reduce using rule 54 (conector -> AND .)


state 72

    (55) conector -> OR .

    NUMBER          reduce using rule 55 (conector -> OR .)
    STRING          reduce using rule 55 (conector -> OR .)
    INSTANCE_VAR    reduce using rule 55 (conector -> OR .)
    GLOBAL_VAR      reduce using rule 55 (conector -> OR .)
    ID              reduce using rule 55 (conector -> OR .)


state 73

    (94) while_loop -> WHILE LPAREN . conditions RPAREN codigo END
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 118
    condition                      shift and go to state 27
    value                          shift and go to state 117

state 74

    (75) case -> CASE whens . END
    (74) whens -> whens . when
    (72) when -> . WHEN conditions codigo

    END             shift and go to state 119
    WHEN            shift and go to state 76

    when                           shift and go to state 120

state 75

    (73) whens -> when .

    END             reduce using rule 73 (whens -> when .)
    WHEN            reduce using rule 73 (whens -> when .)


state 76

    (72) when -> WHEN . conditions codigo
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 121
    condition                      shift and go to state 27
    value                          shift and go to state 117

state 77

    (76) Sfunction -> DEF ID . LPAREN RPAREN codigo END
    (79) p_function_one_parameter -> DEF ID . LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> DEF ID . LPAREN params RPAREN codigo END

    LPAREN          shift and go to state 122


state 78

    (43) array -> LBRACKET RBRACKET .

    INSTANCE_VAR    reduce using rule 43 (array -> LBRACKET RBRACKET .)
    GLOBAL_VAR      reduce using rule 43 (array -> LBRACKET RBRACKET .)
    ID              reduce using rule 43 (array -> LBRACKET RBRACKET .)
    PRINT           reduce using rule 43 (array -> LBRACKET RBRACKET .)
    PUTS            reduce using rule 43 (array -> LBRACKET RBRACKET .)
    P               reduce using rule 43 (array -> LBRACKET RBRACKET .)
    LPAREN          reduce using rule 43 (array -> LBRACKET RBRACKET .)
    WHILE           reduce using rule 43 (array -> LBRACKET RBRACKET .)
    CASE            reduce using rule 43 (array -> LBRACKET RBRACKET .)
    DEF             reduce using rule 43 (array -> LBRACKET RBRACKET .)
    LBRACKET        reduce using rule 43 (array -> LBRACKET RBRACKET .)
    PLUS            reduce using rule 43 (array -> LBRACKET RBRACKET .)
    MINUS           reduce using rule 43 (array -> LBRACKET RBRACKET .)
    TIMES           reduce using rule 43 (array -> LBRACKET RBRACKET .)
    DIVIDE          reduce using rule 43 (array -> LBRACKET RBRACKET .)
    MOD             reduce using rule 43 (array -> LBRACKET RBRACKET .)
    LBRACE          reduce using rule 43 (array -> LBRACKET RBRACKET .)
    NUMBER          reduce using rule 43 (array -> LBRACKET RBRACKET .)
    STRING          reduce using rule 43 (array -> LBRACKET RBRACKET .)
    IF              reduce using rule 43 (array -> LBRACKET RBRACKET .)
    $end            reduce using rule 43 (array -> LBRACKET RBRACKET .)
    END             reduce using rule 43 (array -> LBRACKET RBRACKET .)
    WHEN            reduce using rule 43 (array -> LBRACKET RBRACKET .)
    ELSE            reduce using rule 43 (array -> LBRACKET RBRACKET .)
    ELSIF           reduce using rule 43 (array -> LBRACKET RBRACKET .)


state 79

    (44) array -> LBRACKET values . RBRACKET

    RBRACKET        shift and go to state 123


state 80

    (63) control_structures -> if_block elsif_blocks .
    (64) control_structures -> if_block elsif_blocks . else_block
    (69) elsif_blocks -> elsif_blocks . elsif_block
    (71) else_block -> . ELSE codigo END
    (70) elsif_block -> . ELSIF LPAREN conditions RPAREN codigo

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSIF resolved as shift
    INSTANCE_VAR    reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    GLOBAL_VAR      reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    ID              reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    PRINT           reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    PUTS            reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    P               reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    LPAREN          reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    WHILE           reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    CASE            reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    DEF             reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    LBRACKET        reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    PLUS            reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    MINUS           reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    TIMES           reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    DIVIDE          reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    MOD             reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    LBRACE          reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    NUMBER          reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    STRING          reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    IF              reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    $end            reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    END             reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    WHEN            reduce using rule 63 (control_structures -> if_block elsif_blocks .)
    ELSE            shift and go to state 83
    ELSIF           shift and go to state 84

  ! ELSE            [ reduce using rule 63 (control_structures -> if_block elsif_blocks .) ]
  ! ELSIF           [ reduce using rule 63 (control_structures -> if_block elsif_blocks .) ]

    else_block                     shift and go to state 124
    elsif_block                    shift and go to state 125

state 81

    (65) control_structures -> if_block else_block .

    INSTANCE_VAR    reduce using rule 65 (control_structures -> if_block else_block .)
    GLOBAL_VAR      reduce using rule 65 (control_structures -> if_block else_block .)
    ID              reduce using rule 65 (control_structures -> if_block else_block .)
    PRINT           reduce using rule 65 (control_structures -> if_block else_block .)
    PUTS            reduce using rule 65 (control_structures -> if_block else_block .)
    P               reduce using rule 65 (control_structures -> if_block else_block .)
    LPAREN          reduce using rule 65 (control_structures -> if_block else_block .)
    WHILE           reduce using rule 65 (control_structures -> if_block else_block .)
    CASE            reduce using rule 65 (control_structures -> if_block else_block .)
    DEF             reduce using rule 65 (control_structures -> if_block else_block .)
    LBRACKET        reduce using rule 65 (control_structures -> if_block else_block .)
    PLUS            reduce using rule 65 (control_structures -> if_block else_block .)
    MINUS           reduce using rule 65 (control_structures -> if_block else_block .)
    TIMES           reduce using rule 65 (control_structures -> if_block else_block .)
    DIVIDE          reduce using rule 65 (control_structures -> if_block else_block .)
    MOD             reduce using rule 65 (control_structures -> if_block else_block .)
    LBRACE          reduce using rule 65 (control_structures -> if_block else_block .)
    NUMBER          reduce using rule 65 (control_structures -> if_block else_block .)
    STRING          reduce using rule 65 (control_structures -> if_block else_block .)
    IF              reduce using rule 65 (control_structures -> if_block else_block .)
    $end            reduce using rule 65 (control_structures -> if_block else_block .)
    END             reduce using rule 65 (control_structures -> if_block else_block .)
    WHEN            reduce using rule 65 (control_structures -> if_block else_block .)
    ELSE            reduce using rule 65 (control_structures -> if_block else_block .)
    ELSIF           reduce using rule 65 (control_structures -> if_block else_block .)


state 82

    (68) elsif_blocks -> elsif_block .

    END             reduce using rule 68 (elsif_blocks -> elsif_block .)
    INSTANCE_VAR    reduce using rule 68 (elsif_blocks -> elsif_block .)
    GLOBAL_VAR      reduce using rule 68 (elsif_blocks -> elsif_block .)
    ID              reduce using rule 68 (elsif_blocks -> elsif_block .)
    PRINT           reduce using rule 68 (elsif_blocks -> elsif_block .)
    PUTS            reduce using rule 68 (elsif_blocks -> elsif_block .)
    P               reduce using rule 68 (elsif_blocks -> elsif_block .)
    LPAREN          reduce using rule 68 (elsif_blocks -> elsif_block .)
    WHILE           reduce using rule 68 (elsif_blocks -> elsif_block .)
    CASE            reduce using rule 68 (elsif_blocks -> elsif_block .)
    DEF             reduce using rule 68 (elsif_blocks -> elsif_block .)
    LBRACKET        reduce using rule 68 (elsif_blocks -> elsif_block .)
    PLUS            reduce using rule 68 (elsif_blocks -> elsif_block .)
    MINUS           reduce using rule 68 (elsif_blocks -> elsif_block .)
    TIMES           reduce using rule 68 (elsif_blocks -> elsif_block .)
    DIVIDE          reduce using rule 68 (elsif_blocks -> elsif_block .)
    MOD             reduce using rule 68 (elsif_blocks -> elsif_block .)
    LBRACE          reduce using rule 68 (elsif_blocks -> elsif_block .)
    NUMBER          reduce using rule 68 (elsif_blocks -> elsif_block .)
    STRING          reduce using rule 68 (elsif_blocks -> elsif_block .)
    IF              reduce using rule 68 (elsif_blocks -> elsif_block .)
    ELSE            reduce using rule 68 (elsif_blocks -> elsif_block .)
    ELSIF           reduce using rule 68 (elsif_blocks -> elsif_block .)
    $end            reduce using rule 68 (elsif_blocks -> elsif_block .)
    WHEN            reduce using rule 68 (elsif_blocks -> elsif_block .)


state 83

    (71) else_block -> ELSE . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 126
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 84

    (70) elsif_block -> ELSIF . LPAREN conditions RPAREN codigo

    LPAREN          shift and go to state 127


state 85

    (45) hash -> LBRACE RBRACE .

    INSTANCE_VAR    reduce using rule 45 (hash -> LBRACE RBRACE .)
    GLOBAL_VAR      reduce using rule 45 (hash -> LBRACE RBRACE .)
    ID              reduce using rule 45 (hash -> LBRACE RBRACE .)
    PRINT           reduce using rule 45 (hash -> LBRACE RBRACE .)
    PUTS            reduce using rule 45 (hash -> LBRACE RBRACE .)
    P               reduce using rule 45 (hash -> LBRACE RBRACE .)
    LPAREN          reduce using rule 45 (hash -> LBRACE RBRACE .)
    WHILE           reduce using rule 45 (hash -> LBRACE RBRACE .)
    CASE            reduce using rule 45 (hash -> LBRACE RBRACE .)
    DEF             reduce using rule 45 (hash -> LBRACE RBRACE .)
    LBRACKET        reduce using rule 45 (hash -> LBRACE RBRACE .)
    PLUS            reduce using rule 45 (hash -> LBRACE RBRACE .)
    MINUS           reduce using rule 45 (hash -> LBRACE RBRACE .)
    TIMES           reduce using rule 45 (hash -> LBRACE RBRACE .)
    DIVIDE          reduce using rule 45 (hash -> LBRACE RBRACE .)
    MOD             reduce using rule 45 (hash -> LBRACE RBRACE .)
    LBRACE          reduce using rule 45 (hash -> LBRACE RBRACE .)
    NUMBER          reduce using rule 45 (hash -> LBRACE RBRACE .)
    STRING          reduce using rule 45 (hash -> LBRACE RBRACE .)
    IF              reduce using rule 45 (hash -> LBRACE RBRACE .)
    $end            reduce using rule 45 (hash -> LBRACE RBRACE .)
    END             reduce using rule 45 (hash -> LBRACE RBRACE .)
    WHEN            reduce using rule 45 (hash -> LBRACE RBRACE .)
    ELSE            reduce using rule 45 (hash -> LBRACE RBRACE .)
    ELSIF           reduce using rule 45 (hash -> LBRACE RBRACE .)


state 86

    (46) hash -> LBRACE hash_contents . RBRACE
    (48) hash_contents -> hash_contents . COMMA hash_pair

    RBRACE          shift and go to state 128
    COMMA           shift and go to state 129


state 87

    (47) hash_contents -> hash_pair .

    RBRACE          reduce using rule 47 (hash_contents -> hash_pair .)
    COMMA           reduce using rule 47 (hash_contents -> hash_pair .)


state 88

    (49) hash_pair -> value . COLON value

    COLON           shift and go to state 130


state 89

    (66) if_block -> IF LPAREN . conditions RPAREN codigo
    (67) if_block -> IF LPAREN . conditions RPAREN codigo END
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 131
    condition                      shift and go to state 27
    value                          shift and go to state 117

state 90

    (33) aritmeticExpresion -> aritmeticExpresion operator value .

    PLUS            reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MINUS           reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    TIMES           reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DIVIDE          reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    MOD             reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LPAREN          reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    INSTANCE_VAR    reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    GLOBAL_VAR      reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ID              reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    PRINT           reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    PUTS            reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    P               reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    WHILE           reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    CASE            reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    DEF             reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LBRACKET        reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    LBRACE          reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    NUMBER          reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    STRING          reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    IF              reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    $end            reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    RPAREN          reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    AND             reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    OR              reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    END             reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    WHEN            reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSE            reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)
    ELSIF           reduce using rule 33 (aritmeticExpresion -> aritmeticExpresion operator value .)


state 91

    (32) aritmeticExpresion -> value . operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN

    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44

    operator                       shift and go to state 46

state 92

    (26) assign -> INSTANCE_VAR ASSIGN value .

    INSTANCE_VAR    reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    ID              reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    PRINT           reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    PUTS            reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    P               reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    LPAREN          reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    WHILE           reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    CASE            reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    DEF             reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACKET        reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    PLUS            reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    MINUS           reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    TIMES           reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    DIVIDE          reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    MOD             reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    LBRACE          reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    NUMBER          reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    STRING          reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    IF              reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    $end            reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    END             reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    WHEN            reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSE            reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)
    ELSIF           reduce using rule 26 (assign -> INSTANCE_VAR ASSIGN value .)


state 93

    (29) assign -> INSTANCE_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ID              reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    P               reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    CASE            reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DEF             reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    PLUS            reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    MINUS           reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    TIMES           reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    DIVIDE          reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    MOD             reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    LBRACE          reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    STRING          reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    IF              reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    $end            reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    END             reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    WHEN            reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 29 (assign -> INSTANCE_VAR ASSIGN data_structure .)


state 94

    (92) dataIn -> INSTANCE_VAR ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ID              reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PRINT           reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PUTS            reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    P               reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LPAREN          reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    WHILE           reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    CASE            reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    DEF             reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LBRACKET        reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    PLUS            reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    MINUS           reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    TIMES           reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    DIVIDE          reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    MOD             reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    LBRACE          reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    NUMBER          reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    STRING          reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    IF              reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    $end            reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    END             reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    WHEN            reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ELSE            reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 92 (dataIn -> INSTANCE_VAR ASSIGN GETS .)


state 95

    (40) data_structure -> array .

    INSTANCE_VAR    reduce using rule 40 (data_structure -> array .)
    GLOBAL_VAR      reduce using rule 40 (data_structure -> array .)
    ID              reduce using rule 40 (data_structure -> array .)
    PRINT           reduce using rule 40 (data_structure -> array .)
    PUTS            reduce using rule 40 (data_structure -> array .)
    P               reduce using rule 40 (data_structure -> array .)
    LPAREN          reduce using rule 40 (data_structure -> array .)
    WHILE           reduce using rule 40 (data_structure -> array .)
    CASE            reduce using rule 40 (data_structure -> array .)
    DEF             reduce using rule 40 (data_structure -> array .)
    LBRACKET        reduce using rule 40 (data_structure -> array .)
    PLUS            reduce using rule 40 (data_structure -> array .)
    MINUS           reduce using rule 40 (data_structure -> array .)
    TIMES           reduce using rule 40 (data_structure -> array .)
    DIVIDE          reduce using rule 40 (data_structure -> array .)
    MOD             reduce using rule 40 (data_structure -> array .)
    LBRACE          reduce using rule 40 (data_structure -> array .)
    NUMBER          reduce using rule 40 (data_structure -> array .)
    STRING          reduce using rule 40 (data_structure -> array .)
    IF              reduce using rule 40 (data_structure -> array .)
    $end            reduce using rule 40 (data_structure -> array .)
    END             reduce using rule 40 (data_structure -> array .)
    WHEN            reduce using rule 40 (data_structure -> array .)
    ELSE            reduce using rule 40 (data_structure -> array .)
    ELSIF           reduce using rule 40 (data_structure -> array .)


state 96

    (41) data_structure -> tupla .

    INSTANCE_VAR    reduce using rule 41 (data_structure -> tupla .)
    GLOBAL_VAR      reduce using rule 41 (data_structure -> tupla .)
    ID              reduce using rule 41 (data_structure -> tupla .)
    PRINT           reduce using rule 41 (data_structure -> tupla .)
    PUTS            reduce using rule 41 (data_structure -> tupla .)
    P               reduce using rule 41 (data_structure -> tupla .)
    LPAREN          reduce using rule 41 (data_structure -> tupla .)
    WHILE           reduce using rule 41 (data_structure -> tupla .)
    CASE            reduce using rule 41 (data_structure -> tupla .)
    DEF             reduce using rule 41 (data_structure -> tupla .)
    LBRACKET        reduce using rule 41 (data_structure -> tupla .)
    PLUS            reduce using rule 41 (data_structure -> tupla .)
    MINUS           reduce using rule 41 (data_structure -> tupla .)
    TIMES           reduce using rule 41 (data_structure -> tupla .)
    DIVIDE          reduce using rule 41 (data_structure -> tupla .)
    MOD             reduce using rule 41 (data_structure -> tupla .)
    LBRACE          reduce using rule 41 (data_structure -> tupla .)
    NUMBER          reduce using rule 41 (data_structure -> tupla .)
    STRING          reduce using rule 41 (data_structure -> tupla .)
    IF              reduce using rule 41 (data_structure -> tupla .)
    $end            reduce using rule 41 (data_structure -> tupla .)
    END             reduce using rule 41 (data_structure -> tupla .)
    WHEN            reduce using rule 41 (data_structure -> tupla .)
    ELSE            reduce using rule 41 (data_structure -> tupla .)
    ELSIF           reduce using rule 41 (data_structure -> tupla .)


state 97

    (42) data_structure -> hash .

    INSTANCE_VAR    reduce using rule 42 (data_structure -> hash .)
    GLOBAL_VAR      reduce using rule 42 (data_structure -> hash .)
    ID              reduce using rule 42 (data_structure -> hash .)
    PRINT           reduce using rule 42 (data_structure -> hash .)
    PUTS            reduce using rule 42 (data_structure -> hash .)
    P               reduce using rule 42 (data_structure -> hash .)
    LPAREN          reduce using rule 42 (data_structure -> hash .)
    WHILE           reduce using rule 42 (data_structure -> hash .)
    CASE            reduce using rule 42 (data_structure -> hash .)
    DEF             reduce using rule 42 (data_structure -> hash .)
    LBRACKET        reduce using rule 42 (data_structure -> hash .)
    PLUS            reduce using rule 42 (data_structure -> hash .)
    MINUS           reduce using rule 42 (data_structure -> hash .)
    TIMES           reduce using rule 42 (data_structure -> hash .)
    DIVIDE          reduce using rule 42 (data_structure -> hash .)
    MOD             reduce using rule 42 (data_structure -> hash .)
    LBRACE          reduce using rule 42 (data_structure -> hash .)
    NUMBER          reduce using rule 42 (data_structure -> hash .)
    STRING          reduce using rule 42 (data_structure -> hash .)
    IF              reduce using rule 42 (data_structure -> hash .)
    $end            reduce using rule 42 (data_structure -> hash .)
    END             reduce using rule 42 (data_structure -> hash .)
    WHEN            reduce using rule 42 (data_structure -> hash .)
    ELSE            reduce using rule 42 (data_structure -> hash .)
    ELSIF           reduce using rule 42 (data_structure -> hash .)


state 98

    (95) tupla -> LPAREN . values RPAREN
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    values                         shift and go to state 63
    value                          shift and go to state 59

state 99

    (32) aritmeticExpresion -> value operator value .

    PLUS            reduce using rule 32 (aritmeticExpresion -> value operator value .)
    MINUS           reduce using rule 32 (aritmeticExpresion -> value operator value .)
    TIMES           reduce using rule 32 (aritmeticExpresion -> value operator value .)
    DIVIDE          reduce using rule 32 (aritmeticExpresion -> value operator value .)
    MOD             reduce using rule 32 (aritmeticExpresion -> value operator value .)
    LPAREN          reduce using rule 32 (aritmeticExpresion -> value operator value .)
    INSTANCE_VAR    reduce using rule 32 (aritmeticExpresion -> value operator value .)
    GLOBAL_VAR      reduce using rule 32 (aritmeticExpresion -> value operator value .)
    ID              reduce using rule 32 (aritmeticExpresion -> value operator value .)
    PRINT           reduce using rule 32 (aritmeticExpresion -> value operator value .)
    PUTS            reduce using rule 32 (aritmeticExpresion -> value operator value .)
    P               reduce using rule 32 (aritmeticExpresion -> value operator value .)
    WHILE           reduce using rule 32 (aritmeticExpresion -> value operator value .)
    CASE            reduce using rule 32 (aritmeticExpresion -> value operator value .)
    DEF             reduce using rule 32 (aritmeticExpresion -> value operator value .)
    LBRACKET        reduce using rule 32 (aritmeticExpresion -> value operator value .)
    LBRACE          reduce using rule 32 (aritmeticExpresion -> value operator value .)
    NUMBER          reduce using rule 32 (aritmeticExpresion -> value operator value .)
    STRING          reduce using rule 32 (aritmeticExpresion -> value operator value .)
    IF              reduce using rule 32 (aritmeticExpresion -> value operator value .)
    $end            reduce using rule 32 (aritmeticExpresion -> value operator value .)
    RPAREN          reduce using rule 32 (aritmeticExpresion -> value operator value .)
    AND             reduce using rule 32 (aritmeticExpresion -> value operator value .)
    OR              reduce using rule 32 (aritmeticExpresion -> value operator value .)
    END             reduce using rule 32 (aritmeticExpresion -> value operator value .)
    WHEN            reduce using rule 32 (aritmeticExpresion -> value operator value .)
    ELSE            reduce using rule 32 (aritmeticExpresion -> value operator value .)
    ELSIF           reduce using rule 32 (aritmeticExpresion -> value operator value .)


state 100

    (52) condition -> value operComp value .
    (32) aritmeticExpresion -> value . operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AND             reduce using rule 52 (condition -> value operComp value .)
    OR              reduce using rule 52 (condition -> value operComp value .)
    INSTANCE_VAR    reduce using rule 52 (condition -> value operComp value .)
    GLOBAL_VAR      reduce using rule 52 (condition -> value operComp value .)
    ID              reduce using rule 52 (condition -> value operComp value .)
    PRINT           reduce using rule 52 (condition -> value operComp value .)
    PUTS            reduce using rule 52 (condition -> value operComp value .)
    P               reduce using rule 52 (condition -> value operComp value .)
    WHILE           reduce using rule 52 (condition -> value operComp value .)
    CASE            reduce using rule 52 (condition -> value operComp value .)
    DEF             reduce using rule 52 (condition -> value operComp value .)
    LBRACKET        reduce using rule 52 (condition -> value operComp value .)
    LBRACE          reduce using rule 52 (condition -> value operComp value .)
    NUMBER          reduce using rule 52 (condition -> value operComp value .)
    STRING          reduce using rule 52 (condition -> value operComp value .)
    IF              reduce using rule 52 (condition -> value operComp value .)
    $end            reduce using rule 52 (condition -> value operComp value .)
    RPAREN          reduce using rule 52 (condition -> value operComp value .)
    END             reduce using rule 52 (condition -> value operComp value .)
    WHEN            reduce using rule 52 (condition -> value operComp value .)
    ELSE            reduce using rule 52 (condition -> value operComp value .)
    ELSIF           reduce using rule 52 (condition -> value operComp value .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44

  ! LPAREN          [ reduce using rule 52 (condition -> value operComp value .) ]
  ! PLUS            [ reduce using rule 52 (condition -> value operComp value .) ]
  ! MINUS           [ reduce using rule 52 (condition -> value operComp value .) ]
  ! TIMES           [ reduce using rule 52 (condition -> value operComp value .) ]
  ! DIVIDE          [ reduce using rule 52 (condition -> value operComp value .) ]
  ! MOD             [ reduce using rule 52 (condition -> value operComp value .) ]

    operator                       shift and go to state 46

state 101

    (53) condition -> value operComp aritmeticExpresion .
    (33) aritmeticExpresion -> aritmeticExpresion . operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    AND             reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    OR              reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    INSTANCE_VAR    reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    GLOBAL_VAR      reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    ID              reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    PRINT           reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    PUTS            reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    P               reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    WHILE           reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    CASE            reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    DEF             reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    LBRACKET        reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    LBRACE          reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    NUMBER          reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    STRING          reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    IF              reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    $end            reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    RPAREN          reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    END             reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    WHEN            reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    ELSE            reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    ELSIF           reduce using rule 53 (condition -> value operComp aritmeticExpresion .)
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LPAREN          shift and go to state 44

  ! LPAREN          [ reduce using rule 53 (condition -> value operComp aritmeticExpresion .) ]
  ! PLUS            [ reduce using rule 53 (condition -> value operComp aritmeticExpresion .) ]
  ! MINUS           [ reduce using rule 53 (condition -> value operComp aritmeticExpresion .) ]
  ! TIMES           [ reduce using rule 53 (condition -> value operComp aritmeticExpresion .) ]
  ! DIVIDE          [ reduce using rule 53 (condition -> value operComp aritmeticExpresion .) ]
  ! MOD             [ reduce using rule 53 (condition -> value operComp aritmeticExpresion .) ]

    operator                       shift and go to state 43

state 102

    (27) assign -> GLOBAL_VAR ASSIGN value .

    INSTANCE_VAR    reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    GLOBAL_VAR      reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    ID              reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    PRINT           reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    PUTS            reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    P               reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    LPAREN          reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    WHILE           reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    CASE            reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    DEF             reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACKET        reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    PLUS            reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    MINUS           reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    TIMES           reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    DIVIDE          reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    MOD             reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    LBRACE          reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    NUMBER          reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    STRING          reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    IF              reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    $end            reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    END             reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    WHEN            reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSE            reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)
    ELSIF           reduce using rule 27 (assign -> GLOBAL_VAR ASSIGN value .)


state 103

    (30) assign -> GLOBAL_VAR ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ID              reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PRINT           reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PUTS            reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    P               reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LPAREN          reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHILE           reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    CASE            reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DEF             reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACKET        reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    PLUS            reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    MINUS           reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    TIMES           reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    DIVIDE          reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    MOD             reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    LBRACE          reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    NUMBER          reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    STRING          reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    IF              reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    $end            reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    END             reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    WHEN            reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSE            reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)
    ELSIF           reduce using rule 30 (assign -> GLOBAL_VAR ASSIGN data_structure .)


state 104

    (93) dataIn -> GLOBAL_VAR ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ID              reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PRINT           reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PUTS            reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    P               reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LPAREN          reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    WHILE           reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    CASE            reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    DEF             reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LBRACKET        reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    PLUS            reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    MINUS           reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    TIMES           reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    DIVIDE          reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    MOD             reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    LBRACE          reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    NUMBER          reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    STRING          reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    IF              reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    $end            reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    END             reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    WHEN            reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ELSE            reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)
    ELSIF           reduce using rule 93 (dataIn -> GLOBAL_VAR ASSIGN GETS .)


state 105

    (28) assign -> ID ASSIGN value .

    INSTANCE_VAR    reduce using rule 28 (assign -> ID ASSIGN value .)
    GLOBAL_VAR      reduce using rule 28 (assign -> ID ASSIGN value .)
    ID              reduce using rule 28 (assign -> ID ASSIGN value .)
    PRINT           reduce using rule 28 (assign -> ID ASSIGN value .)
    PUTS            reduce using rule 28 (assign -> ID ASSIGN value .)
    P               reduce using rule 28 (assign -> ID ASSIGN value .)
    LPAREN          reduce using rule 28 (assign -> ID ASSIGN value .)
    WHILE           reduce using rule 28 (assign -> ID ASSIGN value .)
    CASE            reduce using rule 28 (assign -> ID ASSIGN value .)
    DEF             reduce using rule 28 (assign -> ID ASSIGN value .)
    LBRACKET        reduce using rule 28 (assign -> ID ASSIGN value .)
    PLUS            reduce using rule 28 (assign -> ID ASSIGN value .)
    MINUS           reduce using rule 28 (assign -> ID ASSIGN value .)
    TIMES           reduce using rule 28 (assign -> ID ASSIGN value .)
    DIVIDE          reduce using rule 28 (assign -> ID ASSIGN value .)
    MOD             reduce using rule 28 (assign -> ID ASSIGN value .)
    LBRACE          reduce using rule 28 (assign -> ID ASSIGN value .)
    NUMBER          reduce using rule 28 (assign -> ID ASSIGN value .)
    STRING          reduce using rule 28 (assign -> ID ASSIGN value .)
    IF              reduce using rule 28 (assign -> ID ASSIGN value .)
    $end            reduce using rule 28 (assign -> ID ASSIGN value .)
    END             reduce using rule 28 (assign -> ID ASSIGN value .)
    WHEN            reduce using rule 28 (assign -> ID ASSIGN value .)
    ELSE            reduce using rule 28 (assign -> ID ASSIGN value .)
    ELSIF           reduce using rule 28 (assign -> ID ASSIGN value .)


state 106

    (31) assign -> ID ASSIGN data_structure .

    INSTANCE_VAR    reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    GLOBAL_VAR      reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    ID              reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    PRINT           reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    PUTS            reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    P               reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    LPAREN          reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    WHILE           reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    CASE            reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    DEF             reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    LBRACKET        reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    PLUS            reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    MINUS           reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    TIMES           reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    DIVIDE          reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    MOD             reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    LBRACE          reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    NUMBER          reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    STRING          reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    IF              reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    $end            reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    END             reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    WHEN            reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    ELSE            reduce using rule 31 (assign -> ID ASSIGN data_structure .)
    ELSIF           reduce using rule 31 (assign -> ID ASSIGN data_structure .)


state 107

    (91) dataIn -> ID ASSIGN GETS .

    INSTANCE_VAR    reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    GLOBAL_VAR      reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    ID              reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    PRINT           reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    PUTS            reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    P               reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    LPAREN          reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    WHILE           reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    CASE            reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    DEF             reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    LBRACKET        reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    PLUS            reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    MINUS           reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    TIMES           reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    DIVIDE          reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    MOD             reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    LBRACE          reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    NUMBER          reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    STRING          reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    IF              reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    $end            reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    END             reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    WHEN            reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    ELSE            reduce using rule 91 (dataIn -> ID ASSIGN GETS .)
    ELSIF           reduce using rule 91 (dataIn -> ID ASSIGN GETS .)


state 108

    (78) p_SfunctionINV -> ID LPAREN params . RPAREN

    RPAREN          shift and go to state 132


state 109

    (82) params -> value . COMMA value

    COMMA           shift and go to state 133


state 110

    (83) impression -> PRINT LPAREN values . RPAREN

    RPAREN          shift and go to state 134


state 111

    (25) values -> value COMMA . values
    (24) values -> . value
    (25) values -> . value COMMA values
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 59
    values                         shift and go to state 135

state 112

    (95) tupla -> LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    ID              reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    PRINT           reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    PUTS            reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    P               reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    LPAREN          reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    WHILE           reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    CASE            reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    DEF             reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    LBRACKET        reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    PLUS            reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    MINUS           reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    TIMES           reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    DIVIDE          reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    MOD             reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    LBRACE          reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    NUMBER          reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    STRING          reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    IF              reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    $end            reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    END             reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    WHEN            reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    ELSE            reduce using rule 95 (tupla -> LPAREN values RPAREN .)
    ELSIF           reduce using rule 95 (tupla -> LPAREN values RPAREN .)


state 113

    (39) operator -> LPAREN aritmeticExpresion RPAREN .

    INSTANCE_VAR    reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    GLOBAL_VAR      reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    ID              reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    PRINT           reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    PUTS            reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    P               reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    LPAREN          reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    WHILE           reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    CASE            reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    DEF             reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    LBRACKET        reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    PLUS            reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    MINUS           reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    TIMES           reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    DIVIDE          reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    MOD             reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    LBRACE          reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    NUMBER          reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    STRING          reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    IF              reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    $end            reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    END             reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    WHEN            reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    ELSE            reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)
    ELSIF           reduce using rule 39 (operator -> LPAREN aritmeticExpresion RPAREN .)


state 114

    (86) impression -> PUTS LPAREN values . RPAREN

    RPAREN          shift and go to state 136


state 115

    (87) impression -> P LPAREN values . RPAREN

    RPAREN          shift and go to state 137


state 116

    (51) conditions -> condition conector conditions .

    INSTANCE_VAR    reduce using rule 51 (conditions -> condition conector conditions .)
    GLOBAL_VAR      reduce using rule 51 (conditions -> condition conector conditions .)
    ID              reduce using rule 51 (conditions -> condition conector conditions .)
    PRINT           reduce using rule 51 (conditions -> condition conector conditions .)
    PUTS            reduce using rule 51 (conditions -> condition conector conditions .)
    P               reduce using rule 51 (conditions -> condition conector conditions .)
    LPAREN          reduce using rule 51 (conditions -> condition conector conditions .)
    WHILE           reduce using rule 51 (conditions -> condition conector conditions .)
    CASE            reduce using rule 51 (conditions -> condition conector conditions .)
    DEF             reduce using rule 51 (conditions -> condition conector conditions .)
    LBRACKET        reduce using rule 51 (conditions -> condition conector conditions .)
    PLUS            reduce using rule 51 (conditions -> condition conector conditions .)
    MINUS           reduce using rule 51 (conditions -> condition conector conditions .)
    TIMES           reduce using rule 51 (conditions -> condition conector conditions .)
    DIVIDE          reduce using rule 51 (conditions -> condition conector conditions .)
    MOD             reduce using rule 51 (conditions -> condition conector conditions .)
    LBRACE          reduce using rule 51 (conditions -> condition conector conditions .)
    NUMBER          reduce using rule 51 (conditions -> condition conector conditions .)
    STRING          reduce using rule 51 (conditions -> condition conector conditions .)
    IF              reduce using rule 51 (conditions -> condition conector conditions .)
    $end            reduce using rule 51 (conditions -> condition conector conditions .)
    RPAREN          reduce using rule 51 (conditions -> condition conector conditions .)
    END             reduce using rule 51 (conditions -> condition conector conditions .)
    WHEN            reduce using rule 51 (conditions -> condition conector conditions .)
    ELSE            reduce using rule 51 (conditions -> condition conector conditions .)
    ELSIF           reduce using rule 51 (conditions -> condition conector conditions .)


state 117

    (52) condition -> value . operComp value
    (53) condition -> value . operComp aritmeticExpresion
    (56) operComp -> . LESSTHAN
    (57) operComp -> . GREATERTHAN
    (58) operComp -> . GREATEROREQUAL
    (59) operComp -> . LESSOREQUAL
    (60) operComp -> . EQUAL
    (61) operComp -> . NOTEQUAL

    LESSTHAN        shift and go to state 48
    GREATERTHAN     shift and go to state 49
    GREATEROREQUAL  shift and go to state 50
    LESSOREQUAL     shift and go to state 51
    EQUAL           shift and go to state 52
    NOTEQUAL        shift and go to state 53

    operComp                       shift and go to state 47

state 118

    (94) while_loop -> WHILE LPAREN conditions . RPAREN codigo END

    RPAREN          shift and go to state 138


state 119

    (75) case -> CASE whens END .

    INSTANCE_VAR    reduce using rule 75 (case -> CASE whens END .)
    GLOBAL_VAR      reduce using rule 75 (case -> CASE whens END .)
    ID              reduce using rule 75 (case -> CASE whens END .)
    PRINT           reduce using rule 75 (case -> CASE whens END .)
    PUTS            reduce using rule 75 (case -> CASE whens END .)
    P               reduce using rule 75 (case -> CASE whens END .)
    LPAREN          reduce using rule 75 (case -> CASE whens END .)
    WHILE           reduce using rule 75 (case -> CASE whens END .)
    CASE            reduce using rule 75 (case -> CASE whens END .)
    DEF             reduce using rule 75 (case -> CASE whens END .)
    LBRACKET        reduce using rule 75 (case -> CASE whens END .)
    PLUS            reduce using rule 75 (case -> CASE whens END .)
    MINUS           reduce using rule 75 (case -> CASE whens END .)
    TIMES           reduce using rule 75 (case -> CASE whens END .)
    DIVIDE          reduce using rule 75 (case -> CASE whens END .)
    MOD             reduce using rule 75 (case -> CASE whens END .)
    LBRACE          reduce using rule 75 (case -> CASE whens END .)
    NUMBER          reduce using rule 75 (case -> CASE whens END .)
    STRING          reduce using rule 75 (case -> CASE whens END .)
    IF              reduce using rule 75 (case -> CASE whens END .)
    $end            reduce using rule 75 (case -> CASE whens END .)
    END             reduce using rule 75 (case -> CASE whens END .)
    WHEN            reduce using rule 75 (case -> CASE whens END .)
    ELSE            reduce using rule 75 (case -> CASE whens END .)
    ELSIF           reduce using rule 75 (case -> CASE whens END .)


state 120

    (74) whens -> whens when .

    END             reduce using rule 74 (whens -> whens when .)
    WHEN            reduce using rule 74 (whens -> whens when .)


state 121

    (72) when -> WHEN conditions . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 6
    codigo                         shift and go to state 139
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 122

    (76) Sfunction -> DEF ID LPAREN . RPAREN codigo END
    (79) p_function_one_parameter -> DEF ID LPAREN . param RPAREN codigo END
    (80) p_function_two_parameter -> DEF ID LPAREN . params RPAREN codigo END
    (81) param -> . value
    (82) params -> . value COMMA value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    RPAREN          shift and go to state 140
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    param                          shift and go to state 141
    params                         shift and go to state 142
    value                          shift and go to state 143

state 123

    (44) array -> LBRACKET values RBRACKET .

    INSTANCE_VAR    reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    GLOBAL_VAR      reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    ID              reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    PRINT           reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    PUTS            reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    P               reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    LPAREN          reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    WHILE           reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    CASE            reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    DEF             reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    LBRACKET        reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    PLUS            reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    MINUS           reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    TIMES           reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    DIVIDE          reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    MOD             reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    LBRACE          reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    NUMBER          reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    STRING          reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    IF              reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    $end            reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    END             reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    WHEN            reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    ELSE            reduce using rule 44 (array -> LBRACKET values RBRACKET .)
    ELSIF           reduce using rule 44 (array -> LBRACKET values RBRACKET .)


state 124

    (64) control_structures -> if_block elsif_blocks else_block .

    INSTANCE_VAR    reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    GLOBAL_VAR      reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    ID              reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    PRINT           reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    PUTS            reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    P               reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    LPAREN          reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    WHILE           reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    CASE            reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    DEF             reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    LBRACKET        reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    PLUS            reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    MINUS           reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    TIMES           reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    DIVIDE          reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    MOD             reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    LBRACE          reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    NUMBER          reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    STRING          reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    IF              reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    $end            reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    END             reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    WHEN            reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    ELSE            reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)
    ELSIF           reduce using rule 64 (control_structures -> if_block elsif_blocks else_block .)


state 125

    (69) elsif_blocks -> elsif_blocks elsif_block .

    END             reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    INSTANCE_VAR    reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    GLOBAL_VAR      reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    ID              reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    PRINT           reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    PUTS            reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    P               reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    LPAREN          reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    WHILE           reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    CASE            reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    DEF             reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    LBRACKET        reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    PLUS            reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    MINUS           reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    TIMES           reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    DIVIDE          reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    MOD             reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    LBRACE          reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    NUMBER          reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    STRING          reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    IF              reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSE            reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    ELSIF           reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    $end            reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)
    WHEN            reduce using rule 69 (elsif_blocks -> elsif_blocks elsif_block .)


state 126

    (71) else_block -> ELSE codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 144
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 127

    (70) elsif_block -> ELSIF LPAREN . conditions RPAREN codigo
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    conditions                     shift and go to state 145
    condition                      shift and go to state 27
    value                          shift and go to state 117

state 128

    (46) hash -> LBRACE hash_contents RBRACE .

    INSTANCE_VAR    reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    GLOBAL_VAR      reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    ID              reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    PRINT           reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    PUTS            reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    P               reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    LPAREN          reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    WHILE           reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    CASE            reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    DEF             reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    LBRACKET        reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    PLUS            reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    MINUS           reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    TIMES           reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    DIVIDE          reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    MOD             reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    LBRACE          reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    NUMBER          reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    STRING          reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    IF              reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    $end            reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    END             reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    WHEN            reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    ELSE            reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)
    ELSIF           reduce using rule 46 (hash -> LBRACE hash_contents RBRACE .)


state 129

    (48) hash_contents -> hash_contents COMMA . hash_pair
    (49) hash_pair -> . value COLON value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    hash_pair                      shift and go to state 146
    value                          shift and go to state 88

state 130

    (49) hash_pair -> value COLON . value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 147

state 131

    (66) if_block -> IF LPAREN conditions . RPAREN codigo
    (67) if_block -> IF LPAREN conditions . RPAREN codigo END

    RPAREN          shift and go to state 148


state 132

    (78) p_SfunctionINV -> ID LPAREN params RPAREN .

    INSTANCE_VAR    reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    GLOBAL_VAR      reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    ID              reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    PRINT           reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    PUTS            reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    P               reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    LPAREN          reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    WHILE           reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    CASE            reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    DEF             reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    LBRACKET        reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    PLUS            reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    MINUS           reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    TIMES           reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    DIVIDE          reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    MOD             reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    LBRACE          reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    NUMBER          reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    STRING          reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    IF              reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    $end            reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    END             reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    WHEN            reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    ELSE            reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)
    ELSIF           reduce using rule 78 (p_SfunctionINV -> ID LPAREN params RPAREN .)


state 133

    (82) params -> value COMMA . value
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID

    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    INSTANCE_VAR    shift and go to state 60
    GLOBAL_VAR      shift and go to state 61
    ID              shift and go to state 62

    value                          shift and go to state 149

state 134

    (83) impression -> PRINT LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    ID              reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    PRINT           reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    PUTS            reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    P               reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    LPAREN          reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    WHILE           reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    CASE            reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    DEF             reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    LBRACKET        reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    PLUS            reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    MINUS           reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    TIMES           reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    DIVIDE          reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    MOD             reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    LBRACE          reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    NUMBER          reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    STRING          reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    IF              reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    $end            reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    END             reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    WHEN            reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    ELSE            reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)
    ELSIF           reduce using rule 83 (impression -> PRINT LPAREN values RPAREN .)


state 135

    (25) values -> value COMMA values .

    INSTANCE_VAR    reduce using rule 25 (values -> value COMMA values .)
    GLOBAL_VAR      reduce using rule 25 (values -> value COMMA values .)
    ID              reduce using rule 25 (values -> value COMMA values .)
    PRINT           reduce using rule 25 (values -> value COMMA values .)
    PUTS            reduce using rule 25 (values -> value COMMA values .)
    P               reduce using rule 25 (values -> value COMMA values .)
    LPAREN          reduce using rule 25 (values -> value COMMA values .)
    WHILE           reduce using rule 25 (values -> value COMMA values .)
    CASE            reduce using rule 25 (values -> value COMMA values .)
    DEF             reduce using rule 25 (values -> value COMMA values .)
    LBRACKET        reduce using rule 25 (values -> value COMMA values .)
    PLUS            reduce using rule 25 (values -> value COMMA values .)
    MINUS           reduce using rule 25 (values -> value COMMA values .)
    TIMES           reduce using rule 25 (values -> value COMMA values .)
    DIVIDE          reduce using rule 25 (values -> value COMMA values .)
    MOD             reduce using rule 25 (values -> value COMMA values .)
    LBRACE          reduce using rule 25 (values -> value COMMA values .)
    NUMBER          reduce using rule 25 (values -> value COMMA values .)
    STRING          reduce using rule 25 (values -> value COMMA values .)
    IF              reduce using rule 25 (values -> value COMMA values .)
    $end            reduce using rule 25 (values -> value COMMA values .)
    END             reduce using rule 25 (values -> value COMMA values .)
    WHEN            reduce using rule 25 (values -> value COMMA values .)
    ELSE            reduce using rule 25 (values -> value COMMA values .)
    ELSIF           reduce using rule 25 (values -> value COMMA values .)
    RPAREN          reduce using rule 25 (values -> value COMMA values .)
    RBRACKET        reduce using rule 25 (values -> value COMMA values .)


state 136

    (86) impression -> PUTS LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    ID              reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    PRINT           reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    PUTS            reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    P               reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    LPAREN          reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    WHILE           reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    CASE            reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    DEF             reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    LBRACKET        reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    PLUS            reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    MINUS           reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    TIMES           reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    DIVIDE          reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    MOD             reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    LBRACE          reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    NUMBER          reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    STRING          reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    IF              reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    $end            reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    END             reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    WHEN            reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    ELSE            reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)
    ELSIF           reduce using rule 86 (impression -> PUTS LPAREN values RPAREN .)


state 137

    (87) impression -> P LPAREN values RPAREN .

    INSTANCE_VAR    reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    GLOBAL_VAR      reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    ID              reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    PRINT           reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    PUTS            reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    P               reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    LPAREN          reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    WHILE           reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    CASE            reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    DEF             reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    LBRACKET        reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    PLUS            reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    MINUS           reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    TIMES           reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    DIVIDE          reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    MOD             reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    LBRACE          reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    NUMBER          reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    STRING          reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    IF              reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    $end            reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    END             reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    WHEN            reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    ELSE            reduce using rule 87 (impression -> P LPAREN values RPAREN .)
    ELSIF           reduce using rule 87 (impression -> P LPAREN values RPAREN .)


state 138

    (94) while_loop -> WHILE LPAREN conditions RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 6
    codigo                         shift and go to state 150
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 139

    (72) when -> WHEN conditions codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             reduce using rule 72 (when -> WHEN conditions codigo .)
    WHEN            reduce using rule 72 (when -> WHEN conditions codigo .)
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 6
    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 140

    (76) Sfunction -> DEF ID LPAREN RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 151
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 141

    (79) p_function_one_parameter -> DEF ID LPAREN param . RPAREN codigo END

    RPAREN          shift and go to state 152


state 142

    (80) p_function_two_parameter -> DEF ID LPAREN params . RPAREN codigo END

    RPAREN          shift and go to state 153


state 143

    (81) param -> value .
    (82) params -> value . COMMA value

    RPAREN          reduce using rule 81 (param -> value .)
    COMMA           shift and go to state 133


state 144

    (71) else_block -> ELSE codigo END .

    INSTANCE_VAR    reduce using rule 71 (else_block -> ELSE codigo END .)
    GLOBAL_VAR      reduce using rule 71 (else_block -> ELSE codigo END .)
    ID              reduce using rule 71 (else_block -> ELSE codigo END .)
    PRINT           reduce using rule 71 (else_block -> ELSE codigo END .)
    PUTS            reduce using rule 71 (else_block -> ELSE codigo END .)
    P               reduce using rule 71 (else_block -> ELSE codigo END .)
    LPAREN          reduce using rule 71 (else_block -> ELSE codigo END .)
    WHILE           reduce using rule 71 (else_block -> ELSE codigo END .)
    CASE            reduce using rule 71 (else_block -> ELSE codigo END .)
    DEF             reduce using rule 71 (else_block -> ELSE codigo END .)
    LBRACKET        reduce using rule 71 (else_block -> ELSE codigo END .)
    PLUS            reduce using rule 71 (else_block -> ELSE codigo END .)
    MINUS           reduce using rule 71 (else_block -> ELSE codigo END .)
    TIMES           reduce using rule 71 (else_block -> ELSE codigo END .)
    DIVIDE          reduce using rule 71 (else_block -> ELSE codigo END .)
    MOD             reduce using rule 71 (else_block -> ELSE codigo END .)
    LBRACE          reduce using rule 71 (else_block -> ELSE codigo END .)
    NUMBER          reduce using rule 71 (else_block -> ELSE codigo END .)
    STRING          reduce using rule 71 (else_block -> ELSE codigo END .)
    IF              reduce using rule 71 (else_block -> ELSE codigo END .)
    $end            reduce using rule 71 (else_block -> ELSE codigo END .)
    END             reduce using rule 71 (else_block -> ELSE codigo END .)
    WHEN            reduce using rule 71 (else_block -> ELSE codigo END .)
    ELSE            reduce using rule 71 (else_block -> ELSE codigo END .)
    ELSIF           reduce using rule 71 (else_block -> ELSE codigo END .)


state 145

    (70) elsif_block -> ELSIF LPAREN conditions . RPAREN codigo

    RPAREN          shift and go to state 154


state 146

    (48) hash_contents -> hash_contents COMMA hash_pair .

    RBRACE          reduce using rule 48 (hash_contents -> hash_contents COMMA hash_pair .)
    COMMA           reduce using rule 48 (hash_contents -> hash_contents COMMA hash_pair .)


state 147

    (49) hash_pair -> value COLON value .

    RBRACE          reduce using rule 49 (hash_pair -> value COLON value .)
    COMMA           reduce using rule 49 (hash_pair -> value COLON value .)


state 148

    (66) if_block -> IF LPAREN conditions RPAREN . codigo
    (67) if_block -> IF LPAREN conditions RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 6
    codigo                         shift and go to state 155
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 149

    (82) params -> value COMMA value .

    RPAREN          reduce using rule 82 (params -> value COMMA value .)


state 150

    (94) while_loop -> WHILE LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 156
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 6
    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 151

    (76) Sfunction -> DEF ID LPAREN RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 157
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 152

    (79) p_function_one_parameter -> DEF ID LPAREN param RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 158
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 153

    (80) p_function_two_parameter -> DEF ID LPAREN params RPAREN . codigo END
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    codigo                         shift and go to state 159
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 154

    (70) elsif_block -> ELSIF LPAREN conditions RPAREN . codigo
    (1) codigo -> . statement
    (2) codigo -> . codigo statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    conditions                     shift and go to state 6
    codigo                         shift and go to state 160
    statement                      shift and go to state 2
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 155

    (66) if_block -> IF LPAREN conditions RPAREN codigo .
    (67) if_block -> IF LPAREN conditions RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

  ! shift/reduce conflict for END resolved as shift
  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    ELSE            reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .)
    $end            reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .)
    WHEN            reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .)
    END             shift and go to state 161
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

  ! INSTANCE_VAR    [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! PLUS            [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! MINUS           [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! TIMES           [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! DIVIDE          [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! MOD             [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]
  ! END             [ reduce using rule 66 (if_block -> IF LPAREN conditions RPAREN codigo .) ]

    conditions                     shift and go to state 6
    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 156

    (94) while_loop -> WHILE LPAREN conditions RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ID              reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PRINT           reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PUTS            reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    P               reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LPAREN          reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    WHILE           reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    CASE            reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    DEF             reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LBRACKET        reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    PLUS            reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    MINUS           reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    TIMES           reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    DIVIDE          reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    MOD             reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    LBRACE          reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    NUMBER          reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    STRING          reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    IF              reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    $end            reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    END             reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    WHEN            reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ELSE            reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)
    ELSIF           reduce using rule 94 (while_loop -> WHILE LPAREN conditions RPAREN codigo END .)


state 157

    (76) Sfunction -> DEF ID LPAREN RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    ID              reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    PRINT           reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    PUTS            reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    P               reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    LPAREN          reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    WHILE           reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    CASE            reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    DEF             reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    LBRACKET        reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    PLUS            reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    MINUS           reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    TIMES           reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    DIVIDE          reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    MOD             reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    LBRACE          reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    NUMBER          reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    STRING          reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    IF              reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    $end            reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    END             reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    WHEN            reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    ELSE            reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)
    ELSIF           reduce using rule 76 (Sfunction -> DEF ID LPAREN RPAREN codigo END .)


state 158

    (79) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 162
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 159

    (80) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo . END
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

    END             shift and go to state 163
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    conditions                     shift and go to state 6
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 160

    (70) elsif_block -> ELSIF LPAREN conditions RPAREN codigo .
    (2) codigo -> codigo . statement
    (3) statement -> . assign
    (4) statement -> . impression
    (5) statement -> . tupla
    (6) statement -> . conditions
    (7) statement -> . while_loop
    (8) statement -> . case
    (9) statement -> . Sfunction
    (10) statement -> . array
    (11) statement -> . p_SfunctionINV
    (12) statement -> . p_function_one_parameter
    (13) statement -> . p_function_two_parameter
    (14) statement -> . aritmeticExpresion
    (15) statement -> . operator
    (16) statement -> . dataIn
    (17) statement -> . control_structures
    (18) statement -> . hash
    (26) assign -> . INSTANCE_VAR ASSIGN value
    (27) assign -> . GLOBAL_VAR ASSIGN value
    (28) assign -> . ID ASSIGN value
    (29) assign -> . INSTANCE_VAR ASSIGN data_structure
    (30) assign -> . GLOBAL_VAR ASSIGN data_structure
    (31) assign -> . ID ASSIGN data_structure
    (83) impression -> . PRINT LPAREN values RPAREN
    (84) impression -> . PRINT values
    (85) impression -> . PUTS values
    (86) impression -> . PUTS LPAREN values RPAREN
    (87) impression -> . P LPAREN values RPAREN
    (88) impression -> . P values
    (89) impression -> . PRINT
    (90) impression -> . PUTS
    (95) tupla -> . LPAREN values RPAREN
    (50) conditions -> . condition
    (51) conditions -> . condition conector conditions
    (94) while_loop -> . WHILE LPAREN conditions RPAREN codigo END
    (75) case -> . CASE whens END
    (76) Sfunction -> . DEF ID LPAREN RPAREN codigo END
    (43) array -> . LBRACKET RBRACKET
    (44) array -> . LBRACKET values RBRACKET
    (77) p_SfunctionINV -> . ID
    (78) p_SfunctionINV -> . ID LPAREN params RPAREN
    (79) p_function_one_parameter -> . DEF ID LPAREN param RPAREN codigo END
    (80) p_function_two_parameter -> . DEF ID LPAREN params RPAREN codigo END
    (32) aritmeticExpresion -> . value operator value
    (33) aritmeticExpresion -> . aritmeticExpresion operator value
    (34) operator -> . PLUS
    (35) operator -> . MINUS
    (36) operator -> . TIMES
    (37) operator -> . DIVIDE
    (38) operator -> . MOD
    (39) operator -> . LPAREN aritmeticExpresion RPAREN
    (91) dataIn -> . ID ASSIGN GETS
    (92) dataIn -> . INSTANCE_VAR ASSIGN GETS
    (93) dataIn -> . GLOBAL_VAR ASSIGN GETS
    (62) control_structures -> . if_block
    (63) control_structures -> . if_block elsif_blocks
    (64) control_structures -> . if_block elsif_blocks else_block
    (65) control_structures -> . if_block else_block
    (45) hash -> . LBRACE RBRACE
    (46) hash -> . LBRACE hash_contents RBRACE
    (52) condition -> . value operComp value
    (53) condition -> . value operComp aritmeticExpresion
    (19) value -> . NUMBER
    (20) value -> . STRING
    (21) value -> . INSTANCE_VAR
    (22) value -> . GLOBAL_VAR
    (23) value -> . ID
    (66) if_block -> . IF LPAREN conditions RPAREN codigo
    (67) if_block -> . IF LPAREN conditions RPAREN codigo END

  ! shift/reduce conflict for INSTANCE_VAR resolved as shift
  ! shift/reduce conflict for GLOBAL_VAR resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for PRINT resolved as shift
  ! shift/reduce conflict for PUTS resolved as shift
  ! shift/reduce conflict for P resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEF resolved as shift
  ! shift/reduce conflict for LBRACKET resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
  ! shift/reduce conflict for LBRACE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for IF resolved as shift
    END             reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    ELSE            reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    ELSIF           reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    $end            reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    WHEN            reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .)
    INSTANCE_VAR    shift and go to state 19
    GLOBAL_VAR      shift and go to state 21
    ID              shift and go to state 22
    PRINT           shift and go to state 23
    PUTS            shift and go to state 25
    P               shift and go to state 26
    LPAREN          shift and go to state 24
    WHILE           shift and go to state 28
    CASE            shift and go to state 29
    DEF             shift and go to state 30
    LBRACKET        shift and go to state 31
    PLUS            shift and go to state 32
    MINUS           shift and go to state 33
    TIMES           shift and go to state 34
    DIVIDE          shift and go to state 35
    MOD             shift and go to state 36
    LBRACE          shift and go to state 38
    NUMBER          shift and go to state 39
    STRING          shift and go to state 40
    IF              shift and go to state 41

  ! INSTANCE_VAR    [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! GLOBAL_VAR      [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! ID              [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PRINT           [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PUTS            [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! P               [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LPAREN          [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! WHILE           [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! CASE            [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! DEF             [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LBRACKET        [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! PLUS            [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! MINUS           [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! TIMES           [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! DIVIDE          [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! MOD             [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! LBRACE          [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! NUMBER          [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! STRING          [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]
  ! IF              [ reduce using rule 70 (elsif_block -> ELSIF LPAREN conditions RPAREN codigo .) ]

    conditions                     shift and go to state 6
    statement                      shift and go to state 42
    assign                         shift and go to state 3
    impression                     shift and go to state 4
    tupla                          shift and go to state 5
    while_loop                     shift and go to state 7
    case                           shift and go to state 8
    Sfunction                      shift and go to state 9
    array                          shift and go to state 10
    p_SfunctionINV                 shift and go to state 11
    p_function_one_parameter       shift and go to state 12
    p_function_two_parameter       shift and go to state 13
    aritmeticExpresion             shift and go to state 14
    operator                       shift and go to state 15
    dataIn                         shift and go to state 16
    control_structures             shift and go to state 17
    hash                           shift and go to state 18
    value                          shift and go to state 20
    condition                      shift and go to state 27
    if_block                       shift and go to state 37

state 161

    (67) if_block -> IF LPAREN conditions RPAREN codigo END .

    ELSE            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    ELSIF           reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    INSTANCE_VAR    reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    ID              reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PRINT           reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PUTS            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    P               reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LPAREN          reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    WHILE           reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    CASE            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    DEF             reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LBRACKET        reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    PLUS            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    MINUS           reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    TIMES           reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    DIVIDE          reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    MOD             reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    LBRACE          reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    NUMBER          reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    STRING          reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    IF              reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    $end            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    END             reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)
    WHEN            reduce using rule 67 (if_block -> IF LPAREN conditions RPAREN codigo END .)


state 162

    (79) p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ID              reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PRINT           reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PUTS            reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    P               reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LPAREN          reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    WHILE           reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    CASE            reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    DEF             reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LBRACKET        reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    PLUS            reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    MINUS           reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    TIMES           reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    DIVIDE          reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    MOD             reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    LBRACE          reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    NUMBER          reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    STRING          reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    IF              reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    $end            reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    END             reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    WHEN            reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ELSE            reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)
    ELSIF           reduce using rule 79 (p_function_one_parameter -> DEF ID LPAREN param RPAREN codigo END .)


state 163

    (80) p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .

    INSTANCE_VAR    reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    GLOBAL_VAR      reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ID              reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PRINT           reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PUTS            reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    P               reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LPAREN          reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    WHILE           reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    CASE            reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    DEF             reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LBRACKET        reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    PLUS            reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    MINUS           reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    TIMES           reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    DIVIDE          reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    MOD             reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    LBRACE          reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    NUMBER          reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    STRING          reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    IF              reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    $end            reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    END             reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    WHEN            reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ELSE            reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)
    ELSIF           reduce using rule 80 (p_function_two_parameter -> DEF ID LPAREN params RPAREN codigo END .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 14 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 14 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 14 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 14 resolved as shift
WARNING: shift/reduce conflict for MOD in state 14 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 14 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 22 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 23 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 23 resolved as shift
WARNING: shift/reduce conflict for STRING in state 23 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 23 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 23 resolved as shift
WARNING: shift/reduce conflict for ID in state 23 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 25 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 25 resolved as shift
WARNING: shift/reduce conflict for STRING in state 25 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 25 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 25 resolved as shift
WARNING: shift/reduce conflict for ID in state 25 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 37 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 37 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 80 resolved as shift
WARNING: shift/reduce conflict for ELSIF in state 80 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 100 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 100 resolved as shift
WARNING: shift/reduce conflict for MOD in state 100 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 100 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 101 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 101 resolved as shift
WARNING: shift/reduce conflict for MOD in state 101 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for END in state 155 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 155 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 155 resolved as shift
WARNING: shift/reduce conflict for ID in state 155 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 155 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 155 resolved as shift
WARNING: shift/reduce conflict for P in state 155 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 155 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 155 resolved as shift
WARNING: shift/reduce conflict for CASE in state 155 resolved as shift
WARNING: shift/reduce conflict for DEF in state 155 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 155 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 155 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 155 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 155 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 155 resolved as shift
WARNING: shift/reduce conflict for MOD in state 155 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 155 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 155 resolved as shift
WARNING: shift/reduce conflict for STRING in state 155 resolved as shift
WARNING: shift/reduce conflict for IF in state 155 resolved as shift
WARNING: shift/reduce conflict for INSTANCE_VAR in state 160 resolved as shift
WARNING: shift/reduce conflict for GLOBAL_VAR in state 160 resolved as shift
WARNING: shift/reduce conflict for ID in state 160 resolved as shift
WARNING: shift/reduce conflict for PRINT in state 160 resolved as shift
WARNING: shift/reduce conflict for PUTS in state 160 resolved as shift
WARNING: shift/reduce conflict for P in state 160 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 160 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 160 resolved as shift
WARNING: shift/reduce conflict for CASE in state 160 resolved as shift
WARNING: shift/reduce conflict for DEF in state 160 resolved as shift
WARNING: shift/reduce conflict for LBRACKET in state 160 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 160 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 160 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 160 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 160 resolved as shift
WARNING: shift/reduce conflict for MOD in state 160 resolved as shift
WARNING: shift/reduce conflict for LBRACE in state 160 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 160 resolved as shift
WARNING: shift/reduce conflict for STRING in state 160 resolved as shift
WARNING: shift/reduce conflict for IF in state 160 resolved as shift
WARNING: reduce/reduce conflict in state 22 resolved using rule (value -> ID)
WARNING: rejected rule (p_SfunctionINV -> ID) in state 22
